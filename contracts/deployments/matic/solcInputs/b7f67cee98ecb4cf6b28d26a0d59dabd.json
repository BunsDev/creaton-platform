{
  "language": "Solidity",
  "sources": {
    "src/creaton/AdminProxy.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract CreatonAdminProxy is ERC1967Proxy {\n    constructor(address _logic, bytes memory _data) public ERC1967Proxy(_logic, _data) {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "src/creaton/CreatorVoting/VotingFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./VotingProcess.sol\";\n\ncontract VotingFactory is Context, UUPSUpgradeable, Initializable {\n    address owner;\n\n    event Initialized(address owner);\n    event VotingProcessDeployed(address creator, address votingProcessAddress, string question, string description, string uri, string[] answers, address[] acceptedERC20);\n\n    function initialize() public payable initializer {\n        owner = _msgSender();\n        emit Initialized(owner);\n    }\n\n    function createVotingProcess( \n        string memory question,\n        string memory description,\n        string memory uri,\n        string[] memory answers,   \n        address[] memory acceptedERC20\n    ) external returns (address) {\n        VotingProcess votingProcess = new VotingProcess(question, description, uri, answers, acceptedERC20);\n\n        address votingProcessAddress = address(votingProcess);\n\n        emit VotingProcessDeployed(_msgSender(), votingProcessAddress, question, description, uri, answers, acceptedERC20);\n        return address(votingProcess);\n    }\n\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\n    }\n\n     /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"VotingFactory: Caller is not owner\");\n        _;\n    }\n}"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/creaton/CreatorVoting/VotingProcess.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract VotingProcess is Context, ERC1155PresetMinterPauser, ERC1155Holder {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    \n    event Created(string question, string description, string uri, string[] answers, address[] acceptedERC20);\n    event Voted(uint256 answerId, address votingToken, uint256 votingAmount);\n\n    string private _question = \"\";\n    string private _description = \"\";\n    string[] private _answers;\n    EnumerableSet.AddressSet private _acceptedERC20;\n\n    constructor (\n        string memory question,\n        string memory description,\n        string memory uri,\n        string[] memory answers,   \n        address[] memory acceptedERC20\n    ) ERC1155PresetMinterPauser(uri) {\n        _question = question;\n        _description = description;\n        _answers = answers;\n        \n        uint256 addressesLength = acceptedERC20.length;\n        for (uint256 i=0; i<addressesLength; i++) {\n            _acceptedERC20.add(acceptedERC20[i]);\n        }\n\n        uint256 answersLength = answers.length;\n        for (uint256 i=0; i<answersLength; i++) {\n            _mint(address(this), i, 0, bytes(answers[i]));\n        }\n\n        emit Created(question, description, uri, answers, acceptedERC20);\n    }\n\n    function getDetails() \n        public view \n        returns (string memory, string memory, string[] memory, address[] memory)\n    {\n        return (_question, _description, _answers, _acceptedERC20.values());\n    }\n\n    function vote(uint256 answerId, address votingToken, uint256 votingAmount)\n        public\n    {\n        require(answerId < _answers.length, \"VotingProcess: answerId must exist\");\n        require(address(votingToken) != address(0), \"VotingProcess: votingToken Address can't be 0x\");\n        require(votingAmount > 0, \"VotingProcess: votingAmount must be > 0\");\n        require(_acceptedERC20.contains(votingToken), \"VotingProcess: votingToken Address not allowed\");\n\n        IERC20(votingToken).transferFrom(_msgSender(), address(this), votingAmount);\n\n        _mint(address(this), answerId, votingAmount, bytes(_answers[answerId]));\n\n        emit Voted(answerId, votingToken, votingAmount);\n    }\n\n    function results() \n        public view \n        returns (uint256[] memory)\n    {\n        uint256 answersLength = _answers.length;\n        uint256[] memory votingResults = new uint256[](answersLength);\n\n        for (uint256 i=0; i<answersLength; i++) {\n            votingResults[i] = balanceOf(address(this), i);\n        }\n\n        return votingResults;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC1155PresetMinterPauser, ERC1155Receiver)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/presets/ERC1155PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\nimport \"../extensions/ERC1155Burnable.sol\";\nimport \"../extensions/ERC1155Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC1155} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC1155PresetMinterPauser is Context, AccessControlEnumerable, ERC1155Burnable, ERC1155Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\n     * deploys the contract.\n     */\n    constructor(string memory uri) ERC1155(uri) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\n     */\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC1155)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155, ERC1155Pausable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC1155 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Pausable is ERC1155, Pausable {\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableMap.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) private returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (_contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(\n        Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "src/reaction/ReactionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\n\nimport \"../dependency/gsn/BaseRelayRecipient.sol\";\n\nimport {\n    IConstantFlowAgreementV1\n} from \"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperTokenFactory\n} from \"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n\nimport \"./ReactionFactory.sol\";\nimport \"./StakedFlow.sol\";\n\ncontract ReactionToken is ERC20, BaseRelayRecipient {\n    event Staked(address author, uint256 amount, address stakingTokenAddress);\n    event Reacted(address author, address reactionRecipientAddress, uint256 tokenId, address reactionTokenAddress, uint256 amount, string reactionTokenName, string reactionTokenSymbol);\n    event Flowed(address flow, uint256 amount, address stakingTokenAddress, address recipient, address stakingSuperTokenAddress);\n\n    address private _sfHost; // host\n    address private _sfCfa; // the stored constant flow agreement class address\n\n    address private _stakingTokenAddress; // If 0x, all tokens will be accepted to stake\n    uint8 private _monthDistributionPercentage; // Monthly percentage to be returned (0-100)\n\n    string internal _tokenMetadataURI; // Metadata url\n\n    ReactionFactory internal _reactionFactory;\n\n    constructor(\n        address reactionFactory,\n        address sfHost, \n        address sfCfa, \n        address stakingTokenAddress,\n        string memory reactionTokenName, \n        string memory reactionTokenSymbol,\n        string memory tokenMetadataURI,\n        uint8 monthDistributionPercentage,\n        address _trustedForwarder\n    ) ERC20(reactionTokenName, reactionTokenSymbol) {\n        require(address(reactionFactory) != address(0), \"ReactionToken: Reaction Factory can't be 0x\");\n        require(address(sfHost) != address(0), \"ReactionToken: Host Address can't be 0x\");\n        require(address(sfCfa) != address(0), \"ReactionToken: CFA Address can't be 0x\");\n        require(monthDistributionPercentage < 101, \"ReactionToken: monthDistributionPercentage must be between 0 and 100\");\n        require(monthDistributionPercentage > 0, \"ReactionToken: monthDistributionPercentage must be between 0 and 100\");\n\n        _reactionFactory = ReactionFactory(reactionFactory);\n        _sfHost = sfHost;\n        _sfCfa = sfCfa;\n\n        _stakingTokenAddress = stakingTokenAddress;\n        _monthDistributionPercentage = monthDistributionPercentage;\n        _tokenMetadataURI = tokenMetadataURI;\n\n        trustedForwarder = _trustedForwarder;\n    }\n\n    function stakeAndMint(uint256 amount, address stakingTokenAddress, address reactionRecipientAddress, uint256 tokenId) public {\n        require(address(stakingTokenAddress) != address(0), \"ReactionToken: Staking Token Address can't be 0x\");\n        require(address(reactionRecipientAddress) != address(0), \"ReactionToken: reactionRecipient Address can't be 0x\");\n\n        // Verify if the staking token is correct\n        if(_stakingTokenAddress != address(0)){\n            require(address(stakingTokenAddress) == address(_stakingTokenAddress), \"ReactionToken: Invalid Staking Token\");\n        }\n\n        // Stake everything to the StakedFlow\n        StakedFlow stakedFlow = StakedFlow(_reactionFactory.getStakedFlow(_msgSender(), stakingTokenAddress, _monthDistributionPercentage));\n\n        IERC20(stakingTokenAddress).transferFrom(_msgSender(), address(stakedFlow), amount);\n        emit Staked(_msgSender(), amount, stakingTokenAddress);\n\n        // Mint the reaction token straight to the Recipient\n        _mint(reactionRecipientAddress, amount);\n        ERC20 reactionToken = ERC20(address(this));\n        emit Reacted(_msgSender(), reactionRecipientAddress, tokenId, address(this), amount, reactionToken.name(), reactionToken.symbol());\n\n        // Upsert the stream the staked amount\n        address stakingSuperTokenAddress = stakedFlow.flow(amount, stakingTokenAddress, _msgSender());\n        emit Flowed(address(stakedFlow), amount, stakingTokenAddress, _msgSender(), stakingSuperTokenAddress); \n    }\n\n    function getTokenMetadataURI() public view returns (string memory) {\n        return _tokenMetadataURI;\n    }\n\n    function getStakingTokenAddress() public view returns (address) {\n        return _stakingTokenAddress;\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient)\n        returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, BaseRelayRecipient)\n        returns (bytes memory) {\n        return BaseRelayRecipient._msgData();\n    }\n    \n}"
    },
    "src/dependency/gsn/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n// solhint-disable no-inline-assembly\npragma solidity >=0.7.6;\n\nimport \"./interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address public trustedForwarder;\n\n    function isTrustedForwarder(address forwarder) public view override returns (bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal view virtual override returns (address ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            ret = msg.sender;\n        }\n    }\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise, return `msg.data`\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\n     * signing or hashing the\n     */\n    function _msgData() internal view virtual override returns (bytes memory ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            return msg.data[0:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n\n/**\n * @title Constant Flow Agreement interface\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @notice Get the maximum flow rate allowed with the deposit\n     * @dev The deposit is clipped and rounded down\n     * @param deposit Deposit amount used for creating the flow\n     * @return flowRate The maximum flow rate\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Get the deposit required for creating the flow\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\n     * @param flowRate Flow rate to be tested\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\n     * NOTE:\n     * - if calculated deposit (flowRate * liquidationPeriod) is less\n     *   than the minimum deposit, we use the minimum deposit otherwise\n     *   we use the calculated deposit\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Returns whether it is the patrician period based on host.getNow()\n     * @param account The account we are interested in\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\n     * @return timestamp The value of host.getNow()\n     */\n    function isPatricianPeriodNow(\n        ISuperfluidToken token,\n        address account)\n        public view virtual\n        returns (bool isPatricianPeriod, uint256 timestamp);\n\n    /**\n     * @dev Returns whether it is the patrician period based on timestamp\n     * @param account The account we are interested in\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\n     */\n    function isPatricianPeriod(\n        ISuperfluidToken token,\n        address account,\n        uint256 timestamp)\n        public view virtual\n        returns (bool isPatricianPeriod);\n\n    /**\n     * @notice Create a flow betwen ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * # App callbacks\n     *\n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - A deposit is taken as safety margin for the solvency agents\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Update the flow rate between ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * # App callbacks\n     *\n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Only the flow sender may update the flow rate\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system\n     * - Deposit amount will be adjusted accordingly\n     * - No new gas fee is charged\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver` of `token`\n     * @param token Super token address\n     * @param sender Flow receiver\n     * @param receiver Flow sender\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @notice Get flow data using agreementId\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The deposit amount of the flow\n     * @return owedDeposit The owed deposit amount of the flow\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return timestamp Timestamp of when a flow was last updated for account\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return flowRate Net flow rate\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     *\n     * # App callbacks\n     *\n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Both flow sender and receiver may delete the flow\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement\n     * - Gas fee may be returned to the sender\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n      * @dev Flow updated event\n      * @param token Super token address\n      * @param sender Flow sender address\n      * @param receiver Flow recipient address\n      * @param flowRate Flow rate in amount per second for this flow\n      * @param totalSenderFlowRate Total flow rate in amount per second for the sender\n      * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n      * @param userData The user provided data\n      */\n     event FlowUpdated(\n         ISuperfluidToken indexed token,\n         address indexed sender,\n         address indexed receiver,\n         int96 flowRate,\n         int256 totalSenderFlowRate,\n         int256 totalReceiverFlowRate,\n         bytes userData\n     );\n\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    SuperAppDefinitions,\n    ContextDefinitions,\n    BatchOperation,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n/**\n * @title Host interface\n * @author Superfluid\n * NOTE:\n * This is the central contract of the system where super agreement, super app\n * and super token features are connected.\n *\n * The Superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Time\n     *\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\n     * > Neo: Then why can't I see what happens to her?\n     * > The Oracle: We can never see past the choices we don't understand.\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\n     *************************************************************************/\n\n    function getNow() external view returns (uint256);\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governance address of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n    /**\n     * @dev Governance replaced event\n     * @param oldGov Address of the old governance contract\n     * @param newGov Address of the new governance contract\n     */\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic Initial agreement class code\n     *\n     * Modifiers:\n     *  - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class registered event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type registered\n     * @param code Address of the new agreement\n     */\n    event AgreementClassRegistered(bytes32 agreementType, address code);\n\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * Modifiers:\n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class updated event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type updated\n     * @param code Address of the new agreement\n     */\n    event AgreementClassUpdated(bytes32 agreementType, address code);\n\n    /**\n    * @notice Check if the agreement type is whitelisted\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @notice Get agreement class\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @notice Create a new bitmask by adding a agreement class to it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @notice Create a new bitmask by removing a agreement class from it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n    /**\n     * @dev SuperToken factory updated event\n     * @param newFactory Address of the new factory\n     */\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\n\n    /**\n     * @notice Update the super token logic to the latest\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n    /**\n     * @dev SuperToken logic updated event\n     * @param code Address of the new SuperToken logic\n     */\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev Message sender declares it as a super app\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n    /**\n     * @dev App registered event\n     * @param app Address of jailed app\n     */\n    event AppRegistered(ISuperApp indexed app);\n\n    /**\n     * @dev Message sender declares it as a super app, using a registration key\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     * @param registrationKey The registration key issued by the governance\n     */\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\n\n    /**\n     * @dev Message sender declares app as a super app\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     * NOTE: only factory contracts authorized by governance can register super apps\n     */\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app level\n     * @param app Super app address\n     */\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\n     * @param targetApp The target super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app is allowed to call the target app as downstream app\n     * @param app Super app address\n     * @param targetApp The target super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app allowance and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory cbdata);\n\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory appCtx);\n\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appAllowanceGranted,\n        int256 appAllowanceUsed,\n        ISuperfluidToken appAllowanceToken\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory appCtx);\n\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 appAllowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function ctxUseAllowance(\n        bytes calldata ctx,\n        uint256 appAllowanceWantedMore,\n        int256 appAllowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n    /**\n     * @dev Jail event for the app\n     * @param app Address of jailed app\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param agreementClass The agreement address you are calling\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        returns(bytes memory returnedData);\n\n    /**\n     * @notice Call app action\n     * @dev Main use case is calling app action in a batch call via the host\n     * @param callData The contextual call data\n     *\n     * NOTE: See \"Contextless Call Proxies\" above for more about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev Context Struct\n     *\n     * NOTE on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // callback level\n        uint8 appLevel;\n        // type of call\n        uint8 callType;\n        // the system timestamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app allowance granted\n        uint256 appAllowanceGranted;\n        // app allowance wanted by the app callback\n        uint256 appAllowanceWanted;\n        // app allowance used, allowing negative values over a callback session\n        int256 appAllowanceUsed;\n        // app address\n        address appAddress;\n        // app allowance in super token\n        ISuperfluidToken appAllowanceToken;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes calldata ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation type. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations\n     */\n    function batchCall(Operation[] memory operations) external;\n\n    /**\n     * @dev Batch call function for trusted forwarders (EIP-2771)\n     * @param operations Array of batch operations\n     */\n    function forwardBatchCall(Operation[] memory operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage doesn't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev The superfluid context is valid.\n     modifier validCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
    },
    "src/reaction/ReactionFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"../dependency/gsn/BaseRelayRecipient.sol\";\n\nimport {\n    ISuperfluid\n} from \"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\nimport \"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/ux/IResolver.sol\";\n\nimport \"./ReactionToken.sol\";\nimport \"./StakedFlow.sol\";\n\ncontract ReactionFactory is BaseRelayRecipient{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address private _sfHost; // host\n    address private _sfCfa; // the stored constant flow agreement class address\n    address private _sfSuperTokenFactory;\n    address private _sfResolver;\n    string private _sfVersion;\n\n    IResolver internal _resolver; // Superfluid resolver\n\n    address owner;\n\n    mapping (address => address) public superTokenRegistry;  // token registry for non-official tokens\n\n    EnumerableSet.AddressSet private superTokensSet; // Registry supertokens\n\n    mapping(address => mapping(address => address)) internal _stakedFlows;\n\n    event Initialized(address sfHost, address sfCfa, address sfSuperTokenFactory, address sfResolver, string sfVersion);\n    event ReactionDeployed(address creator, address reactionContractAddr, string reactionTokenName, string reactionTokenSymbol, string tokenMetadataURI, address stakingTokenAddress);\n\n    constructor(address sfHost, address sfCfa, address sfSuperTokenFactory, address sfResolver, string memory sfVersion, address _trustedForwarder) {\n        require(address(sfHost) != address(0), \"ReactionFactory: Host Address can't be 0x\");\n        require(address(sfCfa) != address(0), \"ReactionFactory: CFA Address can't be 0x\");\n        require(address(sfSuperTokenFactory) != address(0), \"ReactionFactory: SuperTokenFactory Address can't be 0x\");\n        require(address(sfResolver) != address(0), \"ReactionFactory: Resolver Address can't be 0x\");\n\n        _sfHost = sfHost;\n        _sfCfa = sfCfa;\n        _sfSuperTokenFactory = sfSuperTokenFactory;\n        _sfResolver = sfResolver;\n        _sfVersion = sfVersion;\n\n        _resolver = IResolver(sfResolver);\n\n        owner = _msgSender();\n\n        trustedForwarder = _trustedForwarder;\n\n        emit Initialized(_sfHost, _sfCfa, _sfSuperTokenFactory, _sfResolver, _sfVersion);\n    }\n\n    function deployReaction(string memory reactionTokenName, string memory reactionTokenSymbol, string memory tokenMetadataURI, address stakingTokenAddress, uint8 monthDistributionPercentage) external returns (address){\n        ReactionToken reactionContract = new ReactionToken(\n            address(this),\n            _sfHost, \n            _sfCfa,\n            stakingTokenAddress,\n            reactionTokenName, \n            reactionTokenSymbol,\n            tokenMetadataURI,\n            monthDistributionPercentage,\n            trustedForwarder\n        );\n\n        address reactionContractAddr = address(reactionContract);\n\n        emit ReactionDeployed(_msgSender(), reactionContractAddr, reactionTokenName, reactionTokenSymbol, tokenMetadataURI, stakingTokenAddress);\n\n        return reactionContractAddr;\n    }\n\n    function isSuperToken(ERC20WithTokenInfo _token) public view returns (bool) {\n        if(!superTokensSet.contains(address(_token))){\n            string memory tokenId = string(abi.encodePacked('supertokens', '.', _sfVersion, '.', _token.symbol()));\n            return _resolver.get(tokenId) == address(_token);\n        }\n        return true;\n    }\n\n    function getSuperToken(ERC20WithTokenInfo _token) public view returns (address tokenAddress) {\n        if(isSuperToken(_token)){\n            tokenAddress = address(_token);\n        } else {\n            string memory tokenId = string(abi.encodePacked('supertokens', '.', _sfVersion, '.', _token.symbol(), 'x'));\n            tokenAddress = _resolver.get(tokenId);\n\n            if (tokenAddress == address(0)) { // Look on the App registry if there's already a \"non-oficially registered\" Supertoken\n                tokenAddress = superTokenRegistry[address(_token)];\n            }\n        }\n    }\n\n    function createSuperToken(ERC20WithTokenInfo _token) public returns (ISuperToken superToken) {\n        require(isSuperToken(_token) == false, \"ReactionFactory: Token is already a SuperToken\");\n\n        if (superTokenRegistry[address(_token)] != address(0)) {\n            superToken = ISuperToken(superTokenRegistry[address(_token)]);\n        } else {\n            ISuperTokenFactory factory = ISuperfluid(_sfHost).getSuperTokenFactory();\n            string memory name = string(abi.encodePacked('Super ', _token.name()));\n            string memory symbol = string(abi.encodePacked(_token.symbol(), 'x'));\n            superToken = factory.createERC20Wrapper(_token, ISuperTokenFactory.Upgradability.FULL_UPGRADABE, name, symbol);\n            superTokenRegistry[address(_token)] = address(superToken);\n            superTokensSet.add(address(superToken));\n        }\n    }\n\n    function getStakedFlow(address user, address token, uint8 monthDistributionPercentage) public returns (address){\n        address stakedFlow = _stakedFlows[user][token];\n        if(stakedFlow == address(0)){\n            stakedFlow = address(new StakedFlow(address(this), _sfHost, _sfCfa, monthDistributionPercentage, trustedForwarder));\n            _stakedFlows[user][token] = stakedFlow;\n        }\n\n        return stakedFlow;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setTrustedForwarder(address _trustedForwarder) public onlyOwner {\n        trustedForwarder = _trustedForwarder;\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n     /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"ReactionFactory: Caller is not owner\");\n        _;\n    }\n}"
    },
    "src/reaction/StakedFlow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport {\n    IConstantFlowAgreementV1\n} from \"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperTokenFactory\n} from \"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\nimport { ERC20WithTokenInfo } from \"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\";\n\nimport \"../dependency/gsn/BaseRelayRecipient.sol\";\n\nimport \"./ReactionFactory.sol\"; \n\ncontract StakedFlow is Context, BaseRelayRecipient {\n    event Flowing(address stakingSuperToken, uint256 balance, address recipient, uint256 flowRate);\n\n    ISuperfluid internal _host; // Superfluid host address\n    IConstantFlowAgreementV1 internal _cfa; // Superfluid Constant Flow Agreement address\n    ISuperTokenFactory internal _superTokenFactory; // Superfluid Supertoken Factory\n\n    ReactionFactory internal _reactionFactory;\n\n    uint8 internal _monthDistributionPercentage;\n\n    constructor(\n        address reactionFactory,\n        address host, \n        address cfa,\n        uint8 monthDistributionPercentage,\n        address _trustedForwarder\n    ) {\n        require(address(reactionFactory) != address(0), \"StakedFlow: Reaction Factory can't be 0x\");\n        require(address(host) != address(0), \"StakedFlow: Host Address can't be 0x\");\n        require(address(cfa) != address(0), \"StakedFlow: CFA Address can't be 0x\");\n        require(monthDistributionPercentage < 101, \"StakedFlow: monthDistributionPercentage must be between 0 and 100\");\n        require(monthDistributionPercentage > 0, \"StakedFlow: monthDistributionPercentage must be between 0 and 100\");\n\n        _reactionFactory = ReactionFactory(reactionFactory);\n        _host = ISuperfluid(host);\n        _cfa =  IConstantFlowAgreementV1(cfa);\n        _monthDistributionPercentage = monthDistributionPercentage;\n\n        trustedForwarder = _trustedForwarder;\n    }\n\n    function flow(uint256 amount, address stakingTokenAddress, address recipient) public returns (address){\n        require(address(stakingTokenAddress) != address(0), \"StakedFlow: Staking Token Address can't be 0x\");\n\n        ERC20WithTokenInfo stakingToken = ERC20WithTokenInfo(stakingTokenAddress);\n\n        // Get/Create the super token\n        address stakingSuperToken = _reactionFactory.isSuperToken(stakingToken) ? address(stakingToken) : _reactionFactory.getSuperToken(stakingToken);\n        if (stakingSuperToken == address(0)) {\n            stakingSuperToken = address(_reactionFactory.createSuperToken(stakingToken));\n        }\n\n        // Approve token to be upgraded\n        if (stakingToken.allowance(address(this), stakingSuperToken) < amount) {\n            bool success = stakingToken.approve(stakingSuperToken, amount); // max allowance\n            require(success, \"ReactionToken: Failed to approve allowance to SuperToken\");\n        }\n\n        // Give token Superpowers\n        if(address(stakingToken) != address(stakingSuperToken)){\n            ISuperToken(stakingSuperToken).upgrade(amount);\n        }\n\n        // Calculate the flow rate\n        uint256 secondsInAMonth = 2592000;\n        uint256 balance = ISuperToken(stakingSuperToken).balanceOf(address(this));\n        uint256 flowRate = (balance*_monthDistributionPercentage)/(secondsInAMonth*100);\n\n        // Create/Uodate CFA\n        (, int96 outFlowRate,,) = _cfa.getFlow(ISuperToken(stakingSuperToken), address(this), recipient);\n        if(outFlowRate > 0){\n            _host.callAgreement(\n                _cfa,\n                abi.encodeWithSelector(\n                    _cfa.updateFlow.selector,\n                    stakingSuperToken,\n                    recipient,\n                    flowRate,\n                    new bytes(0) // placeholder\n                ),\n                new bytes(0)\n            );\n        }else{\n            _host.callAgreement(\n                _cfa,\n                abi.encodeWithSelector(\n                    _cfa.createFlow.selector,\n                    stakingSuperToken,\n                    recipient,\n                    flowRate,\n                    new bytes(0) // placeholder\n                ),\n                new bytes(0)\n            );\n        }\n\n        emit Flowing(stakingSuperToken, balance, recipient, flowRate);\n\n        return stakingSuperToken;\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient)\n        returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, BaseRelayRecipient)\n        returns (bytes memory) {\n        return BaseRelayRecipient._msgData();\n    }\n}"
    },
    "src/dependency/gsn/interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal virtual view returns (bytes memory);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * Note:\n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * NOTE\n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmount The amount the reward recepient account will receive\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     *\n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAccount Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * NOTE:\n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAccount will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the liquidatorAccount will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the rewardAccount will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * NOTE:\n     *\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * NOTE:\n     *\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * NOTE:\n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @title Superfluid governance interface\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * NOTE:\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function batchUpdateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken[] calldata tokens) external;\n    \n    /**\n     * @dev Set configuration as address value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        address value\n    ) external;\n    \n    /**\n     * @dev Set configuration as uint256 value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Clear configuration\n     */\n    function clearConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    ) external;\n\n    /**\n     * @dev Get configuration as address value\n     */\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /**\n     * @dev Get configuration as uint256 value\n     */\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: SuperToken always uses 18 decimals.\n     *\n     * Note: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * For super token contracts, this value is 1 always\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `data` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n   /**\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n    * spend tokens of `sender`.\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n   ) external;\n\n   /**\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\n    * `account`.\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to received upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are upgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transfer from by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender  The account where the funds is sent from.\n    * @param recipient The recipient of thefunds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n/**\n * @title Super token factory interface\n * @author Superfluid\n */\ninterface ISuperTokenFactory {\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @dev Get the current super token logic used by the factory\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABE\n    }\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     *\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    /**\n      * @dev Super token logic created event\n      * @param tokenLogic Token logic address\n      */\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    /**\n      * @dev Super token created event\n      * @param token Newly created super token address\n      */\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    /**\n      * @dev Custom super token created event\n      * @param token Newly created custom super token address\n      */\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n/**\n * @title SuperApp interface\n * @author Superfluid\n * @dev Be aware of the app being jailed, when the word permitted is used.\n *\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * NOTE:\n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass\n    *          arbitary information to the after-hook callback.\n    *\n    * NOTE:\n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\n/**\n * @title Super app definitions library\n * @author Superfluid\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\n    }\n}\n\n/**\n * @title Context definitions library\n * @author Superfluid\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appLevel, uint8 callType)\n    {\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @title Batch operation library\n * @author Superfluid\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev Superfluid.callAgreement batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes calldata, bytes userdata)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev Superfluid.callAppAction batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\n/**\n * @title Superfluid governance configs library\n * @author Superfluid\n */\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\");\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY = \n        keccak256(\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\");\n\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.trustedForwarder\",\n            forwarder));\n    }\n\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\",\n            deployer,\n            registrationKey));\n    }\n\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.factory\",\n            factory));\n    }\n\n    function decodePPPConfig(uint256 pppConfig) internal pure returns (uint256 liquidationPeriod, uint256 patricianPeriod) {\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\n        patricianPeriod = pppConfig & type(uint32).max;\n    }\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\n/**\n * @title ERC20 token info interface\n * @author Superfluid\n * @dev ERC20 standard interface does not specify these functions, but\n *      often the token implementations have them.\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n/**\n * @title ERC20 token with token info interface\n * @author Superfluid\n * @dev Using abstract contract instead of interfaces because old solidity\n *      does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
    },
    "@superfluid-finance_1/ethereum-contracts/contracts/interfaces/ux/IResolver.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\n/**\n * @title Abstraction for an address resolver contract\n * @author Superfluid\n */\ninterface IResolver {\n\n    event Set(string indexed name, address target);\n\n    /**\n     * @dev Set resolver address name\n     */\n    function set(string calldata name, address target) external;\n\n    /**\n     * @dev Get address by name\n     */\n    function get(string calldata name) external view returns (address);\n\n}\n"
    },
    "src/token/DummyErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../dependency/gsn/BaseRelayRecipient.sol\";\n\ncontract DummyErc20 is ERC20, BaseRelayRecipient {\n    constructor(uint256 initialSupply, address _trustedForwarder) ERC20(\"DummyErc20\", \"DUM\") {\n        _mint(_msgSender(), initialSupply);\n        trustedForwarder = _trustedForwarder;\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient)\n        returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, BaseRelayRecipient)\n        returns (bytes memory) {\n        return BaseRelayRecipient._msgData();\n    }\n}"
    },
    "src/token/link/token/ERC677.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract ERC677 is IERC20 {\n  function transferAndCall(address to, uint value, bytes memory data) public virtual returns (bool success);\n\n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n"
    },
    "src/token/link/ERC677Token.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./token/ERC677.sol\";\nimport \"./token/ERC677Receiver.sol\";\n\nabstract contract ERC677Token is ERC20, ERC677 {\n  /**\n   * @dev transfer token to a contract address with additional data if the recipient is a contact.\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   * @param _data The extra data to be passed to the receiving contract.\n   */\n  function transferAndCall(address _to, uint _value, bytes memory _data)\n    public\n    override\n    virtual\n    returns (bool success)\n  {\n    super.transfer(_to, _value);\n    emit Transfer(msg.sender, _to, _value, _data);\n    if (isContract(_to)) {\n      contractFallback(_to, _value, _data);\n    }\n    return true;\n  }\n\n\n  // PRIVATE\n\n  function contractFallback(address _to, uint _value, bytes memory _data)\n    private\n  {\n    ERC677Receiver receiver = ERC677Receiver(_to);\n    receiver.onTokenTransfer(msg.sender, _value, _data);\n  }\n\n  function isContract(address _addr)\n    private\n    view\n    returns (bool hasCode)\n  {\n    uint length;\n    assembly { length := extcodesize(_addr) }\n    return length > 0;\n  }\n}\n"
    },
    "src/token/link/token/ERC677Receiver.sol": {
      "content": "pragma solidity ^0.8.0;\n\nabstract contract ERC677Receiver {\n  function onTokenTransfer(address _sender, uint _value, bytes memory _data) public virtual;\n}\n"
    },
    "src/token/link/LinkToken.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport './token/LinkERC20.sol';\nimport './ERC677Token.sol';\n\ncontract LinkToken is LinkERC20, ERC677Token {\n  uint private constant TOTAL_SUPPLY = 10**27;\n  string private constant NAME = 'ChainLink Token';\n  string private constant SYMBOL = 'LINK';\n\n  constructor() ERC20(NAME, SYMBOL)\n    public\n  {\n    _onCreate();\n  }\n\n  /**\n   * @dev Hook that is called when this contract is created.\n   * Useful to override constructor behaviour in child contracts (e.g., LINK bridge tokens).\n   * @notice Default implementation mints 10**27 tokens to msg.sender\n   */\n  function _onCreate()\n    internal\n    virtual\n  {\n    _mint(msg.sender, TOTAL_SUPPLY);\n  }\n\n  /**\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\n   *\n   * This is internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(address sender, address recipient, uint256 amount)\n    internal\n    override\n    virtual\n    validAddress(recipient)\n  {\n    super._transfer(sender, recipient, amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   *\n   * This is internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(address owner, address spender, uint256 amount)\n    internal\n    override\n    virtual\n    validAddress(spender)\n  {\n    super._approve(owner, spender, amount);\n  }\n\n\n  // MODIFIERS\n\n  modifier validAddress(address _recipient) {\n    require(_recipient != address(this), \"LinkToken: transfer/approve to this contract address\");\n    _;\n  }\n}\n"
    },
    "src/token/link/token/LinkERC20.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nabstract contract LinkERC20 is ERC20 {\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseApproval(address spender, uint256 addedValue) public virtual returns (bool) {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseApproval(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n"
    },
    "src/creaton/RedeemingTokens/ProtoCreateTeam.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ProtoCreateTeam is ERC20, Ownable {\n    //only exists to be converted into Create for the team.\n    constructor() ERC20(\"Proto Create Team\", \"PCT\") {\n        _mint(msg.sender, 33000000*(10**18));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/dependency/gsn/utils/VersionRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n// solhint-disable not-rely-on-time\n\nimport \"../interfaces/IVersionRegistry.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract VersionRegistry is IVersionRegistry, Ownable {\n\n    function addVersion(bytes32 id, bytes32 version, string calldata value) external override onlyOwner {\n        require(id != bytes32(0), \"missing id\");\n        require(version != bytes32(0), \"missing version\");\n        emit VersionAdded(id, version, value, block.timestamp);\n    }\n\n    function cancelVersion(bytes32 id, bytes32 version, string calldata reason) external override onlyOwner {\n        emit VersionCanceled(id, version, reason);\n    }\n}\n"
    },
    "src/dependency/gsn/interfaces/IVersionRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\n\ninterface IVersionRegistry {\n\n    //event emitted whenever a version is added\n    event VersionAdded(bytes32 indexed id, bytes32 version, string value, uint time);\n\n    //event emitted whenever a version is canceled\n    event VersionCanceled(bytes32 indexed id, bytes32 version, string reason);\n\n    /**\n     * add a version\n     * @param id the object-id to add a version (32-byte string)\n     * @param version the new version to add (32-byte string)\n     * @param value value to attach to this version\n     */\n    function addVersion(bytes32 id, bytes32 version, string calldata value) external;\n\n    /**\n     * cancel a version.\n     */\n    function cancelVersion(bytes32 id, bytes32 version, string calldata reason) external;\n}\n"
    },
    "src/dependency/gsn/RelayHub.sol": {
      "content": "/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable not-rely-on-time */\n/* solhint-disable avoid-tx-origin */\n/* solhint-disable bracket-align */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./utils/MinLibBytes.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./utils/GsnUtils.sol\";\nimport \"./utils/GsnEip712Library.sol\";\nimport \"./utils/RelayHubValidator.sol\";\nimport \"./utils/GsnTypes.sol\";\nimport \"./interfaces/IRelayHub.sol\";\nimport \"./interfaces/IPaymaster.sol\";\nimport \"./forwarder/IForwarder.sol\";\nimport \"./interfaces/IStakeManager.sol\";\n\ncontract RelayHub is IRelayHub, Ownable {\n    using SafeMath for uint256;\n\n    string public override versionHub = \"2.2.3+opengsn.hub.irelayhub\";\n\n    IStakeManager public immutable override stakeManager;\n    address public immutable override penalizer;\n\n    RelayHubConfig private config;\n\n    function getConfiguration() public override view returns (RelayHubConfig memory) {\n        return config;\n    }\n\n    function setConfiguration(RelayHubConfig memory _config) public override onlyOwner {\n        config = _config;\n        emit RelayHubConfigured(config);\n    }\n\n    uint256 public constant G_NONZERO = 16;\n\n    // maps relay worker's address to its manager's address\n    mapping(address => address) public override workerToManager;\n\n    // maps relay managers to the number of their workers\n    mapping(address => uint256) public override workerCount;\n\n    mapping(address => uint256) private balances;\n\n    uint256 public override deprecationBlock = type(uint).max;\n\n    constructor (\n        IStakeManager _stakeManager,\n        address _penalizer,\n        uint256 _maxWorkerCount,\n        uint256 _gasReserve,\n        uint256 _postOverhead,\n        uint256 _gasOverhead,\n        uint256 _maximumRecipientDeposit,\n        uint256 _minimumUnstakeDelay,\n        uint256 _minimumStake,\n        uint256 _dataGasCostPerByte,\n        uint256 _externalCallDataCostOverhead\n    ) {\n        stakeManager = _stakeManager;\n        penalizer = _penalizer;\n        setConfiguration(RelayHubConfig(\n            _maxWorkerCount,\n            _gasReserve,\n            _postOverhead,\n            _gasOverhead,\n            _maximumRecipientDeposit,\n            _minimumUnstakeDelay,\n            _minimumStake,\n            _dataGasCostPerByte,\n            _externalCallDataCostOverhead\n        ));\n    }\n\n    function registerRelayServer(uint256 baseRelayFee, uint256 pctRelayFee, string calldata url) external override {\n        address relayManager = msg.sender;\n        require(\n            isRelayManagerStaked(relayManager),\n            \"relay manager not staked\"\n        );\n        require(workerCount[relayManager] > 0, \"no relay workers\");\n        emit RelayServerRegistered(relayManager, baseRelayFee, pctRelayFee, url);\n    }\n\n    function addRelayWorkers(address[] calldata newRelayWorkers) external override {\n        address relayManager = msg.sender;\n        uint256 newWorkerCount = workerCount[relayManager] + newRelayWorkers.length;\n        workerCount[relayManager] = newWorkerCount;\n        require(newWorkerCount <= config.maxWorkerCount, \"too many workers\");\n\n        require(\n            isRelayManagerStaked(relayManager),\n            \"relay manager not staked\"\n        );\n\n        for (uint256 i = 0; i < newRelayWorkers.length; i++) {\n            require(workerToManager[newRelayWorkers[i]] == address(0), \"this worker has a manager\");\n            workerToManager[newRelayWorkers[i]] = relayManager;\n        }\n\n        emit RelayWorkersAdded(relayManager, newRelayWorkers, newWorkerCount);\n    }\n\n    function depositFor(address target) public override payable {\n        uint256 amount = msg.value;\n        require(amount <= config.maximumRecipientDeposit, \"deposit too big\");\n\n        balances[target] = balances[target].add(amount);\n\n        emit Deposited(target, msg.sender, amount);\n    }\n\n    function balanceOf(address target) external override view returns (uint256) {\n        return balances[target];\n    }\n\n    function withdraw(uint256 amount, address payable dest) public override {\n        address payable account = payable(msg.sender);\n        require(balances[account] >= amount, \"insufficient funds\");\n\n        balances[account] = balances[account].sub(amount);\n        dest.transfer(amount);\n\n        emit Withdrawn(account, dest, amount);\n    }\n\n    function calldataGasCost(uint256 length) public override view returns (uint256) {\n        return config.dataGasCostPerByte.mul(length);\n}\n\n    function verifyGasAndDataLimits(\n        uint256 maxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        uint256 initialGasLeft,\n        uint256 externalGasLimit\n    )\n    private\n    view\n    returns (IPaymaster.GasAndDataLimits memory gasAndDataLimits, uint256 maxPossibleGas) {\n        gasAndDataLimits =\n            IPaymaster(relayRequest.relayData.paymaster).getGasAndDataLimits{gas:50000}();\n        require(msg.data.length <= gasAndDataLimits.calldataSizeLimit, \"msg.data exceeded limit\" );\n        uint256 dataGasCost = calldataGasCost(msg.data.length);\n        uint256 externalCallDataCost = externalGasLimit - initialGasLeft - config.externalCallDataCostOverhead;\n        uint256 txDataCostPerByte = externalCallDataCost/msg.data.length;\n        require(txDataCostPerByte <= G_NONZERO, \"invalid externalGasLimit\");\n\n        require(maxAcceptanceBudget >= gasAndDataLimits.acceptanceBudget, \"acceptance budget too high\");\n        require(gasAndDataLimits.acceptanceBudget >= gasAndDataLimits.preRelayedCallGasLimit, \"acceptance budget too low\");\n\n        maxPossibleGas =\n            config.gasOverhead.add(\n            gasAndDataLimits.preRelayedCallGasLimit).add(\n            gasAndDataLimits.postRelayedCallGasLimit).add(\n            relayRequest.request.gas).add(\n            dataGasCost).add(\n            externalCallDataCost);\n\n        // This transaction must have enough gas to forward the call to the recipient with the requested amount, and not\n        // run out of gas later in this function.\n        require(\n            externalGasLimit >= maxPossibleGas,\n            \"no gas for innerRelayCall\");\n\n        uint256 maxPossibleCharge = calculateCharge(\n            maxPossibleGas,\n            relayRequest.relayData\n        );\n\n        // We don't yet know how much gas will be used by the recipient, so we make sure there are enough funds to pay\n        // for the maximum possible charge.\n        require(maxPossibleCharge <= balances[relayRequest.relayData.paymaster],\n            \"Paymaster balance too low\");\n    }\n\n    struct RelayCallData {\n        bool success;\n        bytes4 functionSelector;\n        uint256 initialGasLeft;\n        bytes recipientContext;\n        bytes relayedCallReturnValue;\n        IPaymaster.GasAndDataLimits gasAndDataLimits;\n        RelayCallStatus status;\n        uint256 innerGasUsed;\n        uint256 maxPossibleGas;\n        uint256 gasBeforeInner;\n        bytes retData;\n        address relayManager;\n        uint256 dataGasCost;\n    }\n\n    function relayCall(\n        uint maxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint externalGasLimit\n    )\n    external\n    override\n    returns (bool paymasterAccepted, bytes memory returnValue)\n    {\n        RelayCallData memory vars;\n        vars.initialGasLeft = gasleft();\n        require(!isDeprecated(), \"hub deprecated\");\n        vars.functionSelector = relayRequest.request.data.length>=4 ? MinLibBytes.readBytes4(relayRequest.request.data, 0) : bytes4(0);\n        require(msg.sender == tx.origin, \"relay worker must be EOA\");\n        vars.relayManager = workerToManager[msg.sender];\n        require(vars.relayManager != address(0), \"Unknown relay worker\");\n        require(relayRequest.relayData.relayWorker == msg.sender, \"Not a right worker\");\n        require(\n            isRelayManagerStaked(vars.relayManager),\n            \"relay manager not staked\"\n        );\n        require(relayRequest.relayData.gasPrice <= tx.gasprice, \"Invalid gas price\");\n        require(externalGasLimit <= block.gaslimit, \"Impossible gas limit\");\n\n        (vars.gasAndDataLimits, vars.maxPossibleGas) =\n             verifyGasAndDataLimits(maxAcceptanceBudget, relayRequest, vars.initialGasLeft, externalGasLimit);\n\n        RelayHubValidator.verifyTransactionPacking(relayRequest,signature,approvalData);\n\n    {\n\n        //How much gas to pass down to innerRelayCall. must be lower than the default 63/64\n        // actually, min(gasleft*63/64, gasleft-GAS_RESERVE) might be enough.\n        uint256 innerGasLimit = gasleft()*63/64- config.gasReserve;\n        vars.gasBeforeInner = gasleft();\n\n        uint256 _tmpInitialGas = innerGasLimit + externalGasLimit + config.gasOverhead + config.postOverhead;\n        // Calls to the recipient are performed atomically inside an inner transaction which may revert in case of\n        // errors in the recipient. In either case (revert or regular execution) the return data encodes the\n        // RelayCallStatus value.\n        (bool success, bytes memory relayCallStatus) = address(this).call{gas:innerGasLimit}(\n            abi.encodeWithSelector(RelayHub.innerRelayCall.selector, relayRequest, signature, approvalData, vars.gasAndDataLimits,\n                _tmpInitialGas - gasleft(),\n                vars.maxPossibleGas\n                )\n        );\n        vars.success = success;\n        vars.innerGasUsed = vars.gasBeforeInner-gasleft();\n        (vars.status, vars.relayedCallReturnValue) = abi.decode(relayCallStatus, (RelayCallStatus, bytes));\n        if ( vars.relayedCallReturnValue.length>0 ) {\n            emit TransactionResult(vars.status, vars.relayedCallReturnValue);\n        }\n    }\n    {\n        vars.dataGasCost = calldataGasCost(msg.data.length);\n        if (!vars.success) {\n            //Failure cases where the PM doesn't pay\n            if (vars.status == RelayCallStatus.RejectedByPreRelayed ||\n                    (vars.innerGasUsed <= vars.gasAndDataLimits.acceptanceBudget.add(vars.dataGasCost)) && (\n                    vars.status == RelayCallStatus.RejectedByForwarder ||\n                    vars.status == RelayCallStatus.RejectedByRecipientRevert  //can only be thrown if rejectOnRecipientRevert==true\n            )) {\n                paymasterAccepted=false;\n\n                emit TransactionRejectedByPaymaster(\n                    vars.relayManager,\n                    relayRequest.relayData.paymaster,\n                    relayRequest.request.from,\n                    relayRequest.request.to,\n                    msg.sender,\n                    vars.functionSelector,\n                    vars.innerGasUsed,\n                    vars.relayedCallReturnValue);\n                return (false, vars.relayedCallReturnValue);\n            }\n        }\n        // We now perform the actual charge calculation, based on the measured gas used\n        uint256 gasUsed = (externalGasLimit - gasleft()) + config.gasOverhead;\n        uint256 charge = calculateCharge(gasUsed, relayRequest.relayData);\n\n        balances[relayRequest.relayData.paymaster] = balances[relayRequest.relayData.paymaster].sub(charge);\n        balances[vars.relayManager] = balances[vars.relayManager].add(charge);\n\n        emit TransactionRelayed(\n            vars.relayManager,\n            msg.sender,\n            relayRequest.request.from,\n            relayRequest.request.to,\n            relayRequest.relayData.paymaster,\n            vars.functionSelector,\n            vars.status,\n            charge);\n        return (true, \"\");\n    }\n    }\n\n    struct InnerRelayCallData {\n        uint256 balanceBefore;\n        bytes32 preReturnValue;\n        bool relayedCallSuccess;\n        bytes relayedCallReturnValue;\n        bytes recipientContext;\n        bytes data;\n        bool rejectOnRecipientRevert;\n    }\n\n    function innerRelayCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        IPaymaster.GasAndDataLimits calldata gasAndDataLimits,\n        uint256 totalInitialGas,\n        uint256 maxPossibleGas\n    )\n    external\n    returns (RelayCallStatus, bytes memory)\n    {\n        InnerRelayCallData memory vars;\n        // A new gas measurement is performed inside innerRelayCall, since\n        // due to EIP150 available gas amounts cannot be directly compared across external calls\n\n        // This external function can only be called by RelayHub itself, creating an internal transaction. Calls to the\n        // recipient (preRelayedCall, the relayedCall, and postRelayedCall) are called from inside this transaction.\n        require(msg.sender == address(this), \"Must be called by RelayHub\");\n\n        // If either pre or post reverts, the whole internal transaction will be reverted, reverting all side effects on\n        // the recipient. The recipient will still be charged for the used gas by the relay.\n\n        // The paymaster is no allowed to withdraw balance from RelayHub during a relayed transaction. We check pre and\n        // post state to ensure this doesn't happen.\n        vars.balanceBefore = balances[relayRequest.relayData.paymaster];\n\n        // First preRelayedCall is executed.\n        // Note: we open a new block to avoid growing the stack too much.\n        vars.data = abi.encodeWithSelector(\n            IPaymaster.preRelayedCall.selector,\n                relayRequest, signature, approvalData, maxPossibleGas\n        );\n        {\n            bool success;\n            bytes memory retData;\n            (success, retData) = relayRequest.relayData.paymaster.call{gas:gasAndDataLimits.preRelayedCallGasLimit}(vars.data);\n            if (!success) {\n                GsnEip712Library.truncateInPlace(retData);\n                revertWithStatus(RelayCallStatus.RejectedByPreRelayed, retData);\n            }\n            (vars.recipientContext, vars.rejectOnRecipientRevert) = abi.decode(retData, (bytes,bool));\n        }\n\n        // The actual relayed call is now executed. The sender's address is appended at the end of the transaction data\n\n        {\n            bool forwarderSuccess;\n            (forwarderSuccess, vars.relayedCallSuccess, vars.relayedCallReturnValue) = GsnEip712Library.execute(relayRequest, signature);\n            if ( !forwarderSuccess ) {\n                revertWithStatus(RelayCallStatus.RejectedByForwarder, vars.relayedCallReturnValue);\n            }\n\n            if (vars.rejectOnRecipientRevert && !vars.relayedCallSuccess) {\n                // we trusted the recipient, but it reverted...\n                revertWithStatus(RelayCallStatus.RejectedByRecipientRevert, vars.relayedCallReturnValue);\n            }\n        }\n        // Finally, postRelayedCall is executed, with the relayedCall execution's status and a charge estimate\n        // We now determine how much the recipient will be charged, to pass this value to postRelayedCall for accurate\n        // accounting.\n        vars.data = abi.encodeWithSelector(\n            IPaymaster.postRelayedCall.selector,\n            vars.recipientContext,\n            vars.relayedCallSuccess,\n            totalInitialGas - gasleft(), /*gasUseWithoutPost*/\n            relayRequest.relayData\n        );\n\n        {\n        (bool successPost,bytes memory ret) = relayRequest.relayData.paymaster.call{gas:gasAndDataLimits.postRelayedCallGasLimit}(vars.data);\n\n        if (!successPost) {\n            revertWithStatus(RelayCallStatus.PostRelayedFailed, ret);\n        }\n        }\n\n        if (balances[relayRequest.relayData.paymaster] < vars.balanceBefore) {\n            revertWithStatus(RelayCallStatus.PaymasterBalanceChanged, \"\");\n        }\n\n        return (vars.relayedCallSuccess ? RelayCallStatus.OK : RelayCallStatus.RelayedCallFailed, vars.relayedCallReturnValue);\n    }\n\n    /**\n     * @dev Reverts the transaction with return data set to the ABI encoding of the status argument (and revert reason data)\n     */\n    function revertWithStatus(RelayCallStatus status, bytes memory ret) private pure {\n        bytes memory data = abi.encode(status, ret);\n        GsnEip712Library.truncateInPlace(data);\n\n        assembly {\n            let dataSize := mload(data)\n            let dataPtr := add(data, 32)\n\n            revert(dataPtr, dataSize)\n        }\n    }\n\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) public override virtual view returns (uint256) {\n        return relayData.baseRelayFee.add((gasUsed.mul(relayData.gasPrice).mul(relayData.pctRelayFee.add(100))).div(100));\n    }\n\n    function isRelayManagerStaked(address relayManager) public override view returns (bool) {\n        return stakeManager.isRelayManagerStaked(relayManager, address(this), config.minimumStake, config.minimumUnstakeDelay);\n    }\n\n    function deprecateHub(uint256 fromBlock) public override onlyOwner {\n        require(deprecationBlock > block.number, \"Already deprecated\");\n        deprecationBlock = fromBlock;\n        emit HubDeprecated(fromBlock);\n    }\n\n    function isDeprecated() public override view returns (bool) {\n        return block.number >= deprecationBlock;\n    }\n\n    modifier penalizerOnly () {\n        require(msg.sender == penalizer, \"Not penalizer\");\n        _;\n    }\n\n    function penalize(address relayWorker, address payable beneficiary) external override penalizerOnly {\n        address relayManager = workerToManager[relayWorker];\n        // The worker must be controlled by a manager with a locked stake\n        require(relayManager != address(0), \"Unknown relay worker\");\n        IStakeManager.StakeInfo memory stakeInfo = stakeManager.getStakeInfo(relayManager);\n        require(stakeInfo.stake > 0, \"relay manager not staked\");\n        stakeManager.penalizeRelayManager(relayManager, beneficiary, stakeInfo.stake);\n    }\n}\n"
    },
    "src/dependency/gsn/utils/MinLibBytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// minimal bytes manipulation required by GSN\n// a minimal subset from 0x/LibBytes\n/* solhint-disable no-inline-assembly */\npragma solidity ^0.8.0;\n\nlibrary MinLibBytes {\n\n    //truncate the given parameter (in-place) if its length is above the given maximum length\n    // do nothing otherwise.\n    //NOTE: solidity warns unless the method is marked \"pure\", but it DOES modify its parameter.\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\n        if (data.length > maxlen) {\n            assembly { mstore(data, maxlen) }\n        }\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require (b.length >= index + 20, \"readAddress: data too short\");\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(b.length >= index + 32, \"readBytes32: data too short\" );\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n        }\n        return result;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(b.length >= index + 4, \"readBytes4: data too short\");\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "src/dependency/gsn/utils/GsnUtils.sol": {
      "content": "/* solhint-disable no-inline-assembly */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../utils/MinLibBytes.sol\";\n\nlibrary GsnUtils {\n\n    /**\n     * extract method sig from encoded function call\n     */\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\n        return MinLibBytes.readBytes4(msgData, 0);\n    }\n\n    /**\n     * extract parameter from encoded-function block.\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\n     * the return value should be casted to the right type (uintXXX/bytesXXX/address/bool/enum)\n     */\n    function getParam(bytes memory msgData, uint index) internal pure returns (uint) {\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\n    }\n\n    //re-throw revert with the same revert data.\n    function revertWithData(bytes memory data) internal pure {\n        assembly {\n            revert(add(data,32), mload(data))\n        }\n    }\n\n}\n"
    },
    "src/dependency/gsn/utils/GsnEip712Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\nimport \"../interfaces/IRelayRecipient.sol\";\nimport \"../forwarder/IForwarder.sol\";\n\nimport \"./GsnUtils.sol\";\n\n/**\n * Bridge Library to map GSN RelayRequest into a call of a Forwarder\n */\nlibrary GsnEip712Library {\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\n    uint256 private constant MAX_RETURN_SIZE = 1024;\n\n    //copied from Forwarder (can't reference string constants even from another library)\n    string public constant GENERIC_PARAMS = \"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntil\";\n\n    bytes public constant RELAYDATA_TYPE = \"RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\";\n\n    string public constant RELAY_REQUEST_NAME = \"RelayRequest\";\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\"RelayData relayData)\", RELAYDATA_TYPE));\n\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\n        RELAY_REQUEST_NAME,\"(\",GENERIC_PARAMS,\",\", RELAY_REQUEST_SUFFIX);\n\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\n\n\n    struct EIP712Domain {\n        string name;\n        string version;\n        uint256 chainId;\n        address verifyingContract;\n    }\n\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n    );\n\n    function splitRequest(\n        GsnTypes.RelayRequest calldata req\n    )\n    internal\n    pure\n    returns (\n        bytes memory suffixData\n    ) {\n        suffixData = abi.encode(\n            hashRelayData(req.relayData));\n    }\n\n    //verify that the recipient trusts the given forwarder\n    // MUST be called by paymaster\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\n            abi.encodeWithSelector(\n                IRelayRecipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\n            )\n        );\n        require(success, \"isTrustedForwarder: reverted\");\n        require(ret.length == 32, \"isTrustedForwarder: bad response\");\n        require(abi.decode(ret, (bool)), \"invalid forwarder for recipient\");\n    }\n\n    function verifySignature(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\n        (bytes memory suffixData) = splitRequest(relayRequest);\n        bytes32 _domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\n        forwarder.verify(relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\n    }\n\n    function verify(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\n        verifyForwarderTrusted(relayRequest);\n        verifySignature(relayRequest, signature);\n    }\n\n    function execute(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal returns (bool forwarderSuccess, bool callSuccess, bytes memory ret) {\n        (bytes memory suffixData) = splitRequest(relayRequest);\n        bytes32 _domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\n        /* solhint-disable-next-line avoid-low-level-calls */\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\n            abi.encodeWithSelector(IForwarder.execute.selector,\n            relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\n        ));\n        if ( forwarderSuccess ) {\n\n          //decode return value of execute:\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\n        }\n        truncateInPlace(ret);\n    }\n\n    //truncate the given parameter (in-place) if its length is above the given maximum length\n    // do nothing otherwise.\n    //NOTE: solidity warns unless the method is marked \"pure\", but it DOES modify its parameter.\n    function truncateInPlace(bytes memory data) internal pure {\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\n    }\n\n    function domainSeparator(address forwarder) internal view returns (bytes32) {\n        return hashDomain(EIP712Domain({\n            name : \"GSN Relayed Transaction\",\n            version : \"2\",\n            chainId : getChainID(),\n            verifyingContract : forwarder\n            }));\n    }\n\n    function getChainID() internal view returns (uint256 id) {\n        /* solhint-disable no-inline-assembly */\n        assembly {\n            id := chainid()\n        }\n    }\n\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                EIP712DOMAIN_TYPEHASH,\n                keccak256(bytes(req.name)),\n                keccak256(bytes(req.version)),\n                req.chainId,\n                req.verifyingContract));\n    }\n\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                RELAYDATA_TYPEHASH,\n                req.gasPrice,\n                req.pctRelayFee,\n                req.baseRelayFee,\n                req.relayWorker,\n                req.paymaster,\n                req.forwarder,\n                keccak256(req.paymasterData),\n                req.clientId\n            ));\n    }\n}\n"
    },
    "src/dependency/gsn/utils/RelayHubValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\n\nlibrary RelayHubValidator {\n\n    // validate that encoded relayCall is properly packed without any extra bytes\n    function verifyTransactionPacking(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) internal pure {\n        // abicoder v2: https://docs.soliditylang.org/en/latest/abi-spec.html\n        // each static param/member is 1 word\n        // struct (with dynamic members) has offset to struct which is 1 word\n        // dynamic member is 1 word offset to actual value, which is 1-word length and ceil(length/32) words for data\n        // relayCall has 5 method params,\n        // relayRequest: 2 members\n        // relayData 8 members\n        // ForwardRequest: 7 members\n        // total 22 32-byte words if all dynamic params are zero-length.\n        uint expectedMsgDataLen = 4 + 22 * 32 +\n            dynamicParamSize(signature) +\n            dynamicParamSize(approvalData) +\n            dynamicParamSize(relayRequest.request.data) +\n            dynamicParamSize(relayRequest.relayData.paymasterData);\n        require(signature.length <= 65, \"invalid signature length\");\n        require(expectedMsgDataLen == msg.data.length, \"extra msg.data bytes\" );\n    }\n\n    // helper method for verifyTransactionPacking:\n    // size (in bytes) of the given \"bytes\" parameter. size include the length (32-byte word),\n    // and actual data size, rounded up to full 32-byte words\n    function dynamicParamSize(bytes calldata buf) internal pure returns (uint) {\n        return 32 + ((buf.length + 31) & (type(uint).max - 31));\n    }\n}\n"
    },
    "src/dependency/gsn/utils/GsnTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../forwarder/IForwarder.sol\";\n\ninterface GsnTypes {\n    /// @notice gasPrice, pctRelayFee and baseRelayFee must be validated inside of the paymaster's preRelayedCall in order not to overpay\n    struct RelayData {\n        uint256 gasPrice;\n        uint256 pctRelayFee;\n        uint256 baseRelayFee;\n        address relayWorker;\n        address paymaster;\n        address forwarder;\n        bytes paymasterData;\n        uint256 clientId;\n    }\n\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\n    struct RelayRequest {\n        IForwarder.ForwardRequest request;\n        RelayData relayData;\n    }\n}\n"
    },
    "src/dependency/gsn/interfaces/IRelayHub.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\nimport \"./IStakeManager.sol\";\n\ninterface IRelayHub {\n    struct RelayHubConfig {\n        // maximum number of worker accounts allowed per manager\n        uint256 maxWorkerCount;\n        // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\n        uint256 gasReserve;\n        // Gas overhead to calculate gasUseWithoutPost\n        uint256 postOverhead;\n        // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\n        // Assume that relay has non-zero balance (costs 15'000 more otherwise).\n        uint256 gasOverhead;\n        // Maximum funds that can be deposited at once. Prevents user error by disallowing large deposits.\n        uint256 maximumRecipientDeposit;\n        // Minimum unstake delay blocks of a relay manager's stake on the StakeManager\n        uint256 minimumUnstakeDelay;\n        // Minimum stake a relay can have. An attack on the network will never cost less than half this value.\n        uint256 minimumStake;\n        // relayCall()'s msg.data upper bound gas cost per byte\n        uint256 dataGasCostPerByte;\n        // relayCalls() minimal gas overhead when calculating cost of putting tx on chain.\n        uint256 externalCallDataCostOverhead;\n    }\n\n    event RelayHubConfigured(RelayHubConfig config);\n\n    /// Emitted when a relay server registers or updates its details\n    /// Looking at these events lets a client discover relay servers\n    event RelayServerRegistered(\n        address indexed relayManager,\n        uint256 baseRelayFee,\n        uint256 pctRelayFee,\n        string relayUrl\n    );\n\n    /// Emitted when relays are added by a relayManager\n    event RelayWorkersAdded(\n        address indexed relayManager,\n        address[] newRelayWorkers,\n        uint256 workersCount\n    );\n\n    /// Emitted when an account withdraws funds from RelayHub.\n    event Withdrawn(\n        address indexed account,\n        address indexed dest,\n        uint256 amount\n    );\n\n    /// Emitted when depositFor is called, including the amount and account that was funded.\n    event Deposited(\n        address indexed paymaster,\n        address indexed from,\n        uint256 amount\n    );\n\n    /// Emitted when an attempt to relay a call fails and Paymaster does not accept the transaction.\n    /// The actual relayed call was not executed, and the recipient not charged.\n    /// @param reason contains a revert reason returned from preRelayedCall or forwarder.\n    event TransactionRejectedByPaymaster(\n        address indexed relayManager,\n        address indexed paymaster,\n        address indexed from,\n        address to,\n        address relayWorker,\n        bytes4 selector,\n        uint256 innerGasUsed,\n        bytes reason\n    );\n\n    /// Emitted when a transaction is relayed. Note that the actual encoded function might be reverted: this will be\n    /// indicated in the status field.\n    /// Useful when monitoring a relay's operation and relayed calls to a contract.\n    /// Charge is the ether value deducted from the recipient's balance, paid to the relay's manager.\n    event TransactionRelayed(\n        address indexed relayManager,\n        address indexed relayWorker,\n        address indexed from,\n        address to,\n        address paymaster,\n        bytes4 selector,\n        RelayCallStatus status,\n        uint256 charge\n    );\n\n    event TransactionResult(\n        RelayCallStatus status,\n        bytes returnValue\n    );\n\n    event HubDeprecated(uint256 fromBlock);\n\n    /// Reason error codes for the TransactionRelayed event\n    /// @param OK - the transaction was successfully relayed and execution successful - never included in the event\n    /// @param RelayedCallFailed - the transaction was relayed, but the relayed call failed\n    /// @param RejectedByPreRelayed - the transaction was not relayed due to preRelatedCall reverting\n    /// @param RejectedByForwarder - the transaction was not relayed due to forwarder check (signature,nonce)\n    /// @param PostRelayedFailed - the transaction was relayed and reverted due to postRelatedCall reverting\n    /// @param PaymasterBalanceChanged - the transaction was relayed and reverted due to the paymaster balance change\n    enum RelayCallStatus {\n        OK,\n        RelayedCallFailed,\n        RejectedByPreRelayed,\n        RejectedByForwarder,\n        RejectedByRecipientRevert,\n        PostRelayedFailed,\n        PaymasterBalanceChanged\n    }\n\n    /// Add new worker addresses controlled by sender who must be a staked Relay Manager address.\n    /// Emits a RelayWorkersAdded event.\n    /// This function can be called multiple times, emitting new events\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\n\n    function registerRelayServer(uint256 baseRelayFee, uint256 pctRelayFee, string calldata url) external;\n\n    // Balance management\n\n    /// Deposits ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only\n    /// be withdrawn by the contract itself, by calling withdraw.\n    /// Emits a Deposited event.\n    function depositFor(address target) external payable;\n\n    /// Withdraws from an account's balance, sending it back to it. Relay managers call this to retrieve their revenue, and\n    /// contracts can also use it to reduce their funding.\n    /// Emits a Withdrawn event.\n    function withdraw(uint256 amount, address payable dest) external;\n\n    // Relaying\n\n\n    /// Relays a transaction. For this to succeed, multiple conditions must be met:\n    ///  - Paymaster's \"preRelayCall\" method must succeed and not revert\n    ///  - the sender must be a registered Relay Worker that the user signed\n    ///  - the transaction's gas price must be equal or larger than the one that was signed by the sender\n    ///  - the transaction must have enough gas to run all internal transactions if they use all gas available to them\n    ///  - the Paymaster must have enough balance to pay the Relay Worker for the scenario when all gas is spent\n    ///\n    /// If all conditions are met, the call will be relayed and the recipient charged.\n    ///\n    /// Arguments:\n    /// @param maxAcceptanceBudget - max valid value for paymaster.getGasLimits().acceptanceBudget\n    /// @param relayRequest - all details of the requested relayed call\n    /// @param signature - client's EIP-712 signature over the relayRequest struct\n    /// @param approvalData: dapp-specific data forwarded to preRelayedCall.\n    ///        This value is *not* verified by the Hub. For example, it can be used to pass a signature to the Paymaster\n    /// @param externalGasLimit - the value passed as gasLimit to the transaction.\n    ///\n    /// Emits a TransactionRelayed event.\n    function relayCall(\n        uint maxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint externalGasLimit\n    )\n    external\n    returns (bool paymasterAccepted, bytes memory returnValue);\n\n    function penalize(address relayWorker, address payable beneficiary) external;\n\n    function setConfiguration(RelayHubConfig memory _config) external;\n\n    // Deprecate hub (reverting relayCall()) from block number 'fromBlock'\n    // Can only be called by owner\n    function deprecateHub(uint256 fromBlock) external;\n\n    /// The fee is expressed as a base fee in wei plus percentage on actual charge.\n    /// E.g. a value of 40 stands for a 40% fee, so the recipient will be\n    /// charged for 1.4 times the spent amount.\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\n\n    /* getters */\n\n    /// Returns the whole hub configuration\n    function getConfiguration() external view returns (RelayHubConfig memory config);\n\n    function calldataGasCost(uint256 length) external view returns (uint256);\n\n    function workerToManager(address worker) external view returns(address);\n\n    function workerCount(address manager) external view returns(uint256);\n\n    /// Returns an account's deposits. It can be either a deposit of a paymaster, or a revenue of a relay manager.\n    function balanceOf(address target) external view returns (uint256);\n\n    function stakeManager() external view returns (IStakeManager);\n\n    function penalizer() external view returns (address);\n\n    /// Uses StakeManager info to decide if the Relay Manager can be considered staked\n    /// @return true if stake size and delay satisfy all requirements\n    function isRelayManagerStaked(address relayManager) external view returns(bool);\n\n    // Checks hubs' deprecation status\n    function isDeprecated() external view returns (bool);\n\n    // Returns the block number from which the hub no longer allows relaying calls.\n    function deprecationBlock() external view returns (uint256);\n\n    /// @return a SemVer-compliant version of the hub contract\n    function versionHub() external view returns (string memory);\n}\n\n"
    },
    "src/dependency/gsn/interfaces/IPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\n\ninterface IPaymaster {\n\n    /**\n     * @param acceptanceBudget -\n     *      Paymaster expected gas budget to accept (or reject) a request\n     *      This a gas required by any calculations that might need to reject the\n     *      transaction, by preRelayedCall, forwarder and recipient.\n     *      See value in BasePaymaster.PAYMASTER_ACCEPTANCE_BUDGET\n     *      Transaction that gets rejected above that gas usage is on the paymaster's expense.\n     *      As long this value is above preRelayedCallGasLimit (see defaults in BasePaymaster), the\n     *      Paymaster is guaranteed it will never pay for rejected transactions.\n     *      If this value is below preRelayedCallGasLimt, it might might make Paymaster open to a \"griefing\" attack.\n     *\n     *      Specifying value too high might make the call rejected by some relayers.\n     *\n     *      From a Relay's point of view, this is the highest gas value a paymaster might \"grief\" the relay,\n     *      since the paymaster will pay anything above that (regardless if the tx reverts)\n     *\n     * @param preRelayedCallGasLimit - the max gas usage of preRelayedCall. any revert (including OOG)\n     *      of preRelayedCall is a reject by the paymaster.\n     *      as long as acceptanceBudget is above preRelayedCallGasLimit, any such revert (including OOG)\n     *      is not payed by the paymaster.\n     * @param postRelayedCallGasLimit - the max gas usage of postRelayedCall.\n     *      note that an OOG will revert the transaction, but the paymaster already committed to pay,\n     *      so the relay will get compensated, at the expense of the paymaster\n     */\n    struct GasAndDataLimits {\n        uint256 acceptanceBudget;\n        uint256 preRelayedCallGasLimit;\n        uint256 postRelayedCallGasLimit;\n        uint256 calldataSizeLimit;\n    }\n\n    /**\n     * Return the Gas Limits and msg.data max size constants used by the Paymaster.\n     */\n    function getGasAndDataLimits()\n    external\n    view\n    returns (\n        GasAndDataLimits memory limits\n    );\n\n    function trustedForwarder() external view returns (IForwarder);\n\n/**\n * return the relayHub of this contract.\n */\n    function getHubAddr() external view returns (address);\n\n    /**\n     * Can be used to determine if the contract can pay for incoming calls before making any.\n     * @return the paymaster's deposit in the RelayHub.\n     */\n    function getRelayHubDeposit() external view returns (uint256);\n\n    /**\n     * Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call.\n     *\n     * MUST be protected with relayHubOnly() in case it modifies state.\n     *\n     * The Paymaster rejects by the following \"revert\" operations\n     *  - preRelayedCall() method reverts\n     *  - the forwarder reverts because of nonce or signature error\n     *  - the paymaster returned \"rejectOnRecipientRevert\", and the recipient contract reverted.\n     * In any of the above cases, all paymaster calls (and recipient call) are reverted.\n     * In any other case, the paymaster agrees to pay for the gas cost of the transaction (note\n     *  that this includes also postRelayedCall revert)\n     *\n     * The rejectOnRecipientRevert flag means the Paymaster \"delegate\" the rejection to the recipient\n     *  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\n     *  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,\n     *  otherwise the TX is paid by the Paymaster.\n     *\n     *  @param relayRequest - the full relay request structure\n     *  @param signature - user's EIP712-compatible signature of the {@link relayRequest}.\n     *              Note that in most cases the paymaster shouldn't try use it at all. It is always checked\n     *              by the forwarder immediately after preRelayedCall returns.\n     *  @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\n     *  @param maxPossibleGas - based on values returned from {@link getGasAndDataLimits},\n     *         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\n     *         In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"\n     *  return:\n     *      a context to be passed to postRelayedCall\n     *      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.\n     *          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.\n     *          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\n     */\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    returns (bytes memory context, bool rejectOnRecipientRevert);\n\n    /**\n     * This method is called after the actual relayed function call.\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\n     *\n     * MUST be protected with relayHubOnly() in case it modifies state.\n     *\n     * @param context - the call context, as returned by the preRelayedCall\n     * @param success - true if the relayed call succeeded, false if it reverted\n     * @param gasUseWithoutPost - the actual amount of gas used by the entire transaction, EXCEPT\n     *        the gas used by the postRelayedCall itself.\n     * @param relayData - the relay params of the request. can be used by relayHub.calculateCharge()\n     *\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\n     * is still committed to pay the relay for the entire transaction.\n     */\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    ) external;\n\n    function versionPaymaster() external view returns (string memory);\n}\n"
    },
    "src/dependency/gsn/forwarder/IForwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\ninterface IForwarder {\n\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n        uint256 validUntil;\n    }\n\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\n\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\n\n    function getNonce(address from)\n    external view\n    returns(uint256);\n\n    /**\n     * verify the transaction would execute.\n     * validate the signature and the nonce of the request.\n     * revert if either signature or nonce are incorrect.\n     * also revert if domainSeparator or requestTypeHash are not registered.\n     */\n    function verify(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    ) external view;\n\n    /**\n     * execute a transaction\n     * @param forwardRequest - all transaction parameters\n     * @param domainSeparator - domain used when signing this request\n     * @param requestTypeHash - request type used when signing this request.\n     * @param suffixData - the extension data used when signing this request.\n     * @param signature - signature to validate.\n     *\n     * the transaction is verified, and then executed.\n     * the success and ret of \"call\" are returned.\n     * This method would revert only verification errors. target errors\n     * are reported using the returned \"success\" and ret string\n     */\n    function execute(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    )\n    external payable\n    returns (bool success, bytes memory ret);\n\n    /**\n     * Register a new Request typehash.\n     * @param typeName - the name of the request type.\n     * @param typeSuffix - any extra data after the generic params.\n     *  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)\n     */\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\n\n    /**\n     * Register a new domain separator.\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\n     * This method is given the domain name and version to create and register the domain separator value.\n     * @param name the domain's display name\n     * @param version the domain/protocol version\n     */\n    function registerDomainSeparator(string calldata name, string calldata version) external;\n}\n"
    },
    "src/dependency/gsn/interfaces/IStakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IStakeManager {\n\n    /// Emitted when a stake or unstakeDelay are initialized or increased\n    event StakeAdded(\n        address indexed relayManager,\n        address indexed owner,\n        uint256 stake,\n        uint256 unstakeDelay\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed relayManager,\n        address indexed owner,\n        uint256 withdrawBlock\n    );\n\n    /// Emitted when owner withdraws relayManager funds\n    event StakeWithdrawn(\n        address indexed relayManager,\n        address indexed owner,\n        uint256 amount\n    );\n\n    /// Emitted when an authorized Relay Hub penalizes a relayManager\n    event StakePenalized(\n        address indexed relayManager,\n        address indexed beneficiary,\n        uint256 reward\n    );\n\n    event HubAuthorized(\n        address indexed relayManager,\n        address indexed relayHub\n    );\n\n    event HubUnauthorized(\n        address indexed relayManager,\n        address indexed relayHub,\n        uint256 removalBlock\n    );\n\n    event OwnerSet(\n        address indexed relayManager,\n        address indexed owner\n    );\n\n    /// @param stake - amount of ether staked for this relay\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\n    /// @param withdrawBlock - first block number 'withdraw' will be callable, or zero if the unlock has not been called\n    /// @param owner - address that receives revenue and manages relayManager's stake\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelay;\n        uint256 withdrawBlock;\n        address payable owner;\n    }\n\n    struct RelayHubInfo {\n        uint256 removalBlock;\n    }\n\n    /// Set the owner of a Relay Manager. Called only by the RelayManager itself.\n    /// Note that owners cannot transfer ownership - if the entry already exists, reverts.\n    /// @param owner - owner of the relay (as configured off-chain)\n    function setRelayManagerOwner(address payable owner) external;\n\n    /// Only the owner can call this function. If the entry does not exist, reverts.\n    /// @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\n    function stakeForRelayManager(address relayManager, uint256 unstakeDelay) external payable;\n\n    function unlockStake(address relayManager) external;\n\n    function withdrawStake(address relayManager) external;\n\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\n\n    function authorizeHubByManager(address relayHub) external;\n\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\n\n    function unauthorizeHubByManager(address relayHub) external;\n\n    function isRelayManagerStaked(address relayManager, address relayHub, uint256 minAmount, uint256 minUnstakeDelay)\n    external\n    view\n    returns (bool);\n\n    /// Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.\n    /// @param relayManager - entry to penalize\n    /// @param beneficiary - address that receives half of the penalty amount\n    /// @param amount - amount to withdraw from stake\n    function penalizeRelayManager(address relayManager, address payable beneficiary, uint256 amount) external;\n\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo);\n\n    function maxUnstakeDelay() external view returns (uint256);\n\n    function versionSM() external view returns (string memory);\n}\n"
    },
    "src/dependency/gsn/StakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./interfaces/IStakeManager.sol\";\n\ncontract StakeManager is IStakeManager {\n    using SafeMath for uint256;\n\n    string public override versionSM = \"2.2.3+opengsn.stakemanager.istakemanager\";\n    uint256 public immutable override maxUnstakeDelay;\n\n    /// maps relay managers to their stakes\n    mapping(address => StakeInfo) public stakes;\n    function getStakeInfo(address relayManager) external override view returns (StakeInfo memory stakeInfo) {\n        return stakes[relayManager];\n    }\n\n    /// maps relay managers to a map of addressed of their authorized hubs to the information on that hub\n    mapping(address => mapping(address => RelayHubInfo)) public authorizedHubs;\n\n    constructor(uint256 _maxUnstakeDelay) {\n        maxUnstakeDelay = _maxUnstakeDelay;\n    }\n\n    function setRelayManagerOwner(address payable owner) external override {\n        require(owner != address(0), \"invalid owner\");\n        require(stakes[msg.sender].owner == address(0), \"already owned\");\n        stakes[msg.sender].owner = owner;\n        emit OwnerSet(msg.sender, owner);\n    }\n\n    /// Put a stake for a relayManager and set its unstake delay. Only the owner can call this function.\n    /// @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\n    function stakeForRelayManager(address relayManager, uint256 unstakeDelay) external override payable ownerOnly(relayManager) {\n        require(unstakeDelay >= stakes[relayManager].unstakeDelay, \"unstakeDelay cannot be decreased\");\n        require(unstakeDelay <= maxUnstakeDelay, \"unstakeDelay too big\");\n        stakes[relayManager].stake += msg.value;\n        stakes[relayManager].unstakeDelay = unstakeDelay;\n        emit StakeAdded(relayManager, stakes[relayManager].owner, stakes[relayManager].stake, stakes[relayManager].unstakeDelay);\n    }\n\n    function unlockStake(address relayManager) external override ownerOnly(relayManager) {\n        StakeInfo storage info = stakes[relayManager];\n        require(info.withdrawBlock == 0, \"already pending\");\n        uint withdrawBlock = block.number.add(info.unstakeDelay);\n        info.withdrawBlock = withdrawBlock;\n        emit StakeUnlocked(relayManager, msg.sender, withdrawBlock);\n    }\n\n    function withdrawStake(address relayManager) external override ownerOnly(relayManager) {\n        StakeInfo storage info = stakes[relayManager];\n        require(info.withdrawBlock > 0, \"Withdrawal is not scheduled\");\n        require(info.withdrawBlock <= block.number, \"Withdrawal is not due\");\n        uint256 amount = info.stake;\n        info.stake = 0;\n        info.withdrawBlock = 0;\n        payable(msg.sender).transfer(amount);\n        emit StakeWithdrawn(relayManager, msg.sender, amount);\n    }\n\n    modifier ownerOnly (address relayManager) {\n        StakeInfo storage info = stakes[relayManager];\n        require(info.owner == msg.sender, \"not owner\");\n        _;\n    }\n\n    modifier managerOnly () {\n        StakeInfo storage info = stakes[msg.sender];\n        require(info.owner != address(0), \"not manager\");\n        _;\n    }\n\n    function authorizeHubByOwner(address relayManager, address relayHub) external ownerOnly(relayManager) override {\n        _authorizeHub(relayManager, relayHub);\n    }\n\n    function authorizeHubByManager(address relayHub) external managerOnly override {\n        _authorizeHub(msg.sender, relayHub);\n    }\n\n    function _authorizeHub(address relayManager, address relayHub) internal {\n        authorizedHubs[relayManager][relayHub].removalBlock = type(uint).max;\n        emit HubAuthorized(relayManager, relayHub);\n    }\n\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external override ownerOnly(relayManager) {\n        _unauthorizeHub(relayManager, relayHub);\n    }\n\n    function unauthorizeHubByManager(address relayHub) external override managerOnly {\n        _unauthorizeHub(msg.sender, relayHub);\n    }\n\n    function _unauthorizeHub(address relayManager, address relayHub) internal {\n        RelayHubInfo storage hubInfo = authorizedHubs[relayManager][relayHub];\n        require(hubInfo.removalBlock == type(uint).max, \"hub not authorized\");\n        uint256 removalBlock = block.number.add(stakes[relayManager].unstakeDelay);\n        hubInfo.removalBlock = removalBlock;\n        emit HubUnauthorized(relayManager, relayHub, removalBlock);\n    }\n\n    function isRelayManagerStaked(address relayManager, address relayHub, uint256 minAmount, uint256 minUnstakeDelay)\n    external\n    override\n    view\n    returns (bool) {\n        StakeInfo storage info = stakes[relayManager];\n        bool isAmountSufficient = info.stake >= minAmount;\n        bool isDelaySufficient = info.unstakeDelay >= minUnstakeDelay;\n        bool isStakeLocked = info.withdrawBlock == 0;\n        bool isHubAuthorized = authorizedHubs[relayManager][relayHub].removalBlock == type(uint).max;\n        return\n        isAmountSufficient &&\n        isDelaySufficient &&\n        isStakeLocked &&\n        isHubAuthorized;\n    }\n\n    /// Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.\n    /// @param relayManager - entry to penalize\n    /// @param beneficiary - address that receives half of the penalty amount\n    /// @param amount - amount to withdraw from stake\n    function penalizeRelayManager(address relayManager, address payable beneficiary, uint256 amount) external override {\n        uint256 removalBlock =  authorizedHubs[relayManager][msg.sender].removalBlock;\n        require(removalBlock != 0, \"hub not authorized\");\n        require(removalBlock > block.number, \"hub authorization expired\");\n\n        // Half of the stake will be burned (sent to address 0)\n        require(stakes[relayManager].stake >= amount, \"penalty exceeds stake\");\n        stakes[relayManager].stake = SafeMath.sub(stakes[relayManager].stake, amount);\n\n        uint256 toBurn = SafeMath.div(amount, 2);\n        uint256 reward = SafeMath.sub(amount, toBurn);\n\n        // Ether is burned and transferred\n        payable(address(0)).transfer(toBurn);\n        beneficiary.transfer(reward);\n        emit StakePenalized(relayManager, beneficiary, reward);\n    }\n}\n"
    },
    "src/metatx/MetatxStaking.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"../dependency/gsn/BaseRelayRecipient.sol\";\nimport \"../utils/Owned.sol\";\n\n// Inheritance\nimport \"./IMetatxStaking.sol\";\n\ncontract MetatxStaking is IMetatxStaking, BaseRelayRecipient, ReentrancyGuard, Pausable, Owned {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== ERC1820 RECIPIENT REGISTRY ========== */\n\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n    bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public token;\n    IERC20 public rewardEscrow;\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public oldRewardsDuration = 30 days;\n    uint256 public rewardsDuration = 30 days;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    uint256 public minStake = 5 * 1e18;\n    bool public lastPeriod = false;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _owner,\n        address _token,\n        address _trustedForwarder\n    ) public Owned(_owner) {\n        token = IERC20(_token);\n        _erc1820.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function lastTimeRewardApplicable() public view override returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view override returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n            );\n    }\n\n    function earned(address account) public view override returns (uint256) {\n        return\n            _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(\n                rewards[account]\n            );\n    }\n\n    function getRewardForDuration() external view override returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n\n    function getMinStake() external view override returns (uint256) {\n        return minStake;\n    }\n\n    function _msgSender() internal view virtual override(Context, BaseRelayRecipient) returns (address ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            ret = msg.sender;\n        }\n    }\n\n    function _msgData() internal view virtual override(Context, BaseRelayRecipient) returns (bytes memory ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            return msg.data[0:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n\n    function versionRecipient() external view override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stake(uint256 amount) public override nonReentrant whenNotPaused updateReward(_msgSender()) {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\n        token.safeTransferFrom(_msgSender(), address(this), amount);\n        emit Staked(_msgSender(), amount);\n    }\n\n    function withdraw(uint256 amount) public override nonReentrant updateReward(_msgSender()) {\n        require(amount > 0, \"Cannot withdraw 0\");\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[_msgSender()] = _balances[_msgSender()].sub(amount);\n        token.safeTransfer(_msgSender(), amount);\n        emit Withdrawn(_msgSender(), amount);\n    }\n\n    function getReward() public override nonReentrant updateReward(_msgSender()) {\n        uint256 reward = rewards[_msgSender()];\n        if (reward > 0) {\n            rewards[_msgSender()] = 0;\n            token.safeTransferFrom(address(rewardEscrow), _msgSender(), reward);\n            emit RewardPaid(_msgSender(), reward);\n        }\n    }\n\n    function exit() external override {\n        withdraw(_balances[_msgSender()]);\n        getReward();\n    }\n\n    // Do not forget to send reward escrow the caller prize\n    function halvingRewards() external override updateReward(address(0)) whenNotPaused whenNotLastPeriod {\n        if (block.timestamp > periodFinish) {\n            token.safeTransferFrom(address(rewardEscrow), _msgSender(), minStake);\n            if (rewardsDuration == oldRewardsDuration) {\n                rewardRate = rewardRate.div(2);\n            } else {\n                rewardRate = rewardRate.mul(oldRewardsDuration).div(rewardsDuration).div(2);\n                oldRewardsDuration = rewardsDuration;\n            }\n            lastUpdateTime = block.timestamp;\n            periodFinish = block.timestamp.add(rewardsDuration);\n            emit RewardHalved(periodFinish);\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setInitialReward(address _rewardEscrow, uint256 _rewardRate) external onlyOwner {\n        rewardEscrow = IERC20(_rewardEscrow);\n        rewardRate = _rewardRate;\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDuration);\n        emit RewardStarted(rewardRate);\n    }\n\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        require(tokenAddress != address(token), \"Cannot withdraw the staking token\");\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n        require(\n            block.timestamp > periodFinish,\n            \"Previous rewards period must be complete before changing the duration for the new period\"\n        );\n        rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(rewardsDuration);\n    }\n\n    function setMinimumStake(uint256 _minStake) external onlyOwner {\n        minStake = _minStake;\n        emit MinStakeUpdated(minStake);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    modifier whenNotLastPeriod() {\n        require(!lastPeriod, \"Last period is in\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event RewardHalved(uint256 periodFinish);\n    event RewardStarted(uint256 rewardRate);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event Recovered(address token, uint256 amount);\n    event MinStakeUpdated(uint256 minStake);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(\n        address account,\n        bytes32 _interfaceHash,\n        address implementer\n    ) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "src/utils/Owned.sol": {
      "content": "pragma solidity ^0.8.0;\n\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n"
    },
    "src/metatx/IMetatxStaking.sol": {
      "content": "pragma solidity ^0.8.0;\n\n\ninterface IMetatxStaking {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function getMinStake() external view returns (uint256);\n\n    // Mutative\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n\n    function halvingRewards() external;\n}\n"
    },
    "src/metatx/RewardEscrow.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// Inheritance\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Owned.sol\";\n\n// https://docs.synthetix.io/contracts/source/contracts/rewardsdistributionrecipient\ncontract RewardEscrow is Owned {\n    using SafeERC20 for IERC20;\n\n    IERC20 public token;\n    address public staking;\n    uint256 public infAllowance = 2**256 - 1;\n\n    constructor(\n        address _owner,\n        address _token,\n        address _staking\n    ) public Owned(_owner) {\n        staking = _staking;\n        token = IERC20(_token);\n        token.approve(staking, infAllowance);\n    }\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event Recovered(address tokenAddress, uint256 tokenAmount);\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/superfluid/SuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.0;\n\nimport { UUPSProxiable } from \"../upgradability/UUPSProxiable.sol\";\n\nimport {\n    ISuperfluid,\n    ISuperfluidGovernance,\n    ISuperToken,\n    ISuperAgreement,\n    IERC20,\n    IERC777,\n    TokenInfo\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { ISuperfluidToken, SuperfluidToken } from \"./SuperfluidToken.sol\";\n\nimport { ERC777Helper } from \"../utils/ERC777Helper.sol\";\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\nimport { IERC777Recipient } from \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport { IERC777Sender } from \"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\n\n/**\n * @title Superfluid's super token implementation\n * @author Superfluid\n */\ncontract SuperToken is\n    UUPSProxiable,\n    SuperfluidToken,\n    ISuperToken\n{\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using SignedSafeMath for int256;\n    using Address for address;\n    using ERC777Helper for ERC777Helper.Operators;\n    using SafeERC20 for IERC20;\n\n    uint8 constant private _STANDARD_DECIMALS = 18;\n\n    /* WARNING: NEVER RE-ORDER VARIABLES! Including the base contracts.\n       Always double-check that new\n       variables are added APPEND-ONLY. Re-ordering variables can\n       permanently BREAK the deployed proxy contract. */\n\n    /// @dev The underlaying ERC20 token\n    IERC20 internal _underlyingToken;\n\n    /// @dev Decimals of the underlying token\n    uint8 internal _underlyingDecimals;\n\n    /// @dev TokenInfo Name property\n    string internal _name;\n\n    /// @dev TokenInfo Symbol property\n    string internal _symbol;\n\n    /// @dev ERC20 Allowances Storage\n    mapping(address => mapping (address => uint256)) internal _allowances;\n\n    /// @dev ERC777 operators support data\n    ERC777Helper.Operators internal _operators;\n\n    // NOTE: for future compatibility, these are reserved solidity slots\n    // The sub-class of SuperToken solidity slot will start after _reserve19\n    uint256 internal _reserve10;\n    uint256 private _reserve11;\n    uint256 private _reserve12;\n    uint256 private _reserve13;\n    uint256 private _reserve14;\n    uint256 private _reserve15;\n    uint256 private _reserve16;\n    uint256 private _reserve17;\n    uint256 private _reserve18;\n    uint256 internal _reserve19;\n\n    constructor(\n        ISuperfluid host\n    )\n        SuperfluidToken(host)\n        // solhint-disable-next-line no-empty-blocks\n    {\n    }\n\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    )\n        external override\n        initializer // OpenZeppelin Initializable\n    {\n        _underlyingToken = underlyingToken;\n        _underlyingDecimals = underlyingDecimals;\n\n        _name = n;\n        _symbol = s;\n\n        // register interfaces\n        ERC777Helper.register(address(this));\n    }\n\n    function proxiableUUID() public pure override returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.contracts.SuperToken.implementation\");\n    }\n\n    function updateCode(address newAddress) external override {\n        require(msg.sender == address(_host), \"only host can update code\");\n        UUPSProxiable._updateCodeAddress(newAddress);\n    }\n\n    /**************************************************************************\n     * ERC20 Token Info\n     *************************************************************************/\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return _STANDARD_DECIMALS;\n    }\n\n    /**************************************************************************\n     * (private) Token Logics\n     *************************************************************************/\n\n    function _transferFrom(address spender, address holder, address recipient, uint amount)\n        internal returns (bool)\n    {\n        require(holder != address(0), \"SuperToken: transfer from zero address\");\n        require(recipient != address(0), \"SuperToken: transfer to zero address\");\n\n        address operator = msg.sender;\n\n        _callTokensToSend(operator, holder, recipient, amount, \"\", \"\");\n\n        _move(operator, holder, recipient, amount, \"\", \"\");\n\n        if (spender != holder) {\n            _approve(\n                holder,\n                spender,\n                _allowances[holder][spender].sub(amount, \"SuperToken: transfer amount exceeds allowance\"));\n        }\n\n        _callTokensReceived(operator, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Send tokens\n     * @param operator address operator address\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"SuperToken: transfer from zero address\");\n        require(to != address(0), \"SuperToken: transfer to zero address\");\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        SuperfluidToken._move(from, to, amount.toInt256());\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bool requireReceptionAck,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        internal\n    {\n        require(account != address(0), \"SuperToken: mint to zero address\");\n\n        SuperfluidToken._mint(account, amount);\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param userData bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        internal\n    {\n        require(from != address(0), \"SuperToken: burn from zero address\");\n\n        _callTokensToSend(operator, from, address(0), amount, userData, operatorData);\n\n        SuperfluidToken._burn(from, amount);\n\n        emit Burned(operator, from, amount, userData, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    /**\n     * @notice Sets `amount` as the allowance of `spender` over the `account`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address account, address spender, uint256 amount)\n        internal\n    {\n        require(account != address(0), \"SuperToken: approve from zero address\");\n        require(spender != address(0), \"SuperToken: approve to zero address\");\n\n        _allowances[account][spender] = amount;\n        emit Approval(account, spender, amount);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = ERC777Helper._ERC1820_REGISTRY.getInterfaceImplementer(\n            from, ERC777Helper._TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = ERC777Helper._ERC1820_REGISTRY.getInterfaceImplementer(\n            to, ERC777Helper._TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(\n                !to.isContract(),\n                \"SuperToken: not an ERC777TokensRecipient\");\n        }\n    }\n\n    /**************************************************************************\n     * ERC20 Implementations\n     *************************************************************************/\n\n    function totalSupply()\n        public view override returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    function balanceOf(\n        address account\n    )\n        public\n        view\n        override\n        returns(uint256 balance)\n    {\n        // solhint-disable-next-line not-rely-on-time\n        (int256 availableBalance, , ) = super.realtimeBalanceOf(account, block.timestamp);\n        return availableBalance < 0 ? 0 : uint256(availableBalance);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public override returns (bool)\n    {\n        return _transferFrom(msg.sender, msg.sender, recipient, amount);\n    }\n\n    function allowance(address account, address spender)\n        public view override returns (uint256)\n    {\n        return _allowances[account][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address holder, address recipient, uint256 amount)\n        public override returns (bool)\n    {\n        return _transferFrom(msg.sender, holder, recipient, amount);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public override returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public override returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue,\n            \"SuperToken: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**************************************************************************\n     * ERC-777 functions\n     *************************************************************************/\n\n    function granularity() external pure override returns (uint256) { return 1; }\n\n    function send(address recipient, uint256 amount, bytes calldata data) external override {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n\n    function burn(uint256 amount, bytes calldata data) external override {\n        _downgrade(msg.sender, msg.sender, amount, data, \"\");\n    }\n\n    function isOperatorFor(address operator, address tokenHolder) external override view returns (bool) {\n        return _operators.isOperatorFor(operator, tokenHolder);\n    }\n\n    function authorizeOperator(address operator) external override {\n        address holder = msg.sender;\n        _operators.authorizeOperator(holder, operator);\n        emit AuthorizedOperator(operator, holder);\n    }\n\n    function revokeOperator(address operator) external override {\n        address holder = msg.sender;\n        _operators.revokeOperator(holder, operator);\n        emit RevokedOperator(operator, holder);\n    }\n\n    function defaultOperators() external override view returns (address[] memory) {\n        return ERC777Helper.defaultOperators(_operators);\n    }\n\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override {\n        address operator = msg.sender;\n        require(_operators.isOperatorFor(operator, sender), \"SuperToken: caller is not an operator for holder\");\n        _send(operator, sender, recipient, amount, data, operatorData, true);\n    }\n\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override {\n        address operator = msg.sender;\n        require(_operators.isOperatorFor(operator, account), \"SuperToken: caller is not an operator for holder\");\n        _downgrade(operator, account, amount, data, operatorData);\n    }\n\n    function _setupDefaultOperators(address[] memory operators) internal {\n        _operators.setupDefaultOperators(operators);\n    }\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    )\n        external override\n        onlySelf\n    {\n        _mint(msg.sender, account, amount,\n            true /* requireReceptionAck */, userData, new bytes(0));\n    }\n\n    function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n    )\n       external override\n       onlySelf\n    {\n       _burn(msg.sender, account, amount, userData, new bytes(0));\n    }\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    function transferAll(address recipient)\n        external override\n    {\n        _transferFrom(msg.sender, msg.sender, recipient, balanceOf(msg.sender));\n    }\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /// @dev ISuperfluidGovernance.getUnderlyingToken implementation\n    function getUnderlyingToken() external view override returns(address) {\n        return address(_underlyingToken);\n    }\n\n    /// @dev ISuperToken.upgrade implementation\n    function upgrade(uint256 amount) external override {\n        _upgrade(msg.sender, msg.sender, msg.sender, amount, \"\", \"\");\n    }\n\n    /// @dev ISuperToken.upgradeTo implementation\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external override {\n        _upgrade(msg.sender, msg.sender, to, amount, \"\", data);\n    }\n\n    /// @dev ISuperToken.downgrade implementation\n    function downgrade(uint256 amount) external override {\n        _downgrade(msg.sender, msg.sender, amount, \"\", \"\");\n    }\n\n    function _upgrade(\n        address operator,\n        address account,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        require(address(_underlyingToken) != address(0), \"SuperToken: no underlying token\");\n\n        (uint256 underlyingAmount, uint256 adjustedAmount) = _toUnderlyingAmount(amount);\n\n        uint256 amountBefore = _underlyingToken.balanceOf(address(this));\n        _underlyingToken.safeTransferFrom(account, address(this), underlyingAmount);\n        uint256 amountAfter = _underlyingToken.balanceOf(address(this));\n        uint256 actualUpgradedAmount = amountAfter.sub(amountBefore);\n        require(\n            underlyingAmount == actualUpgradedAmount,\n            \"SuperToken: inflationary/deflationary tokens not supported\");\n\n        _mint(operator, to, adjustedAmount,\n            // if `to` is diffferent from `account`, we requireReceptionAck\n            account != to, userData, operatorData);\n\n        emit TokenUpgraded(account, adjustedAmount);\n    }\n\n    function _downgrade(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData) private {\n        require(address(_underlyingToken) != address(0), \"SuperToken: no underlying token\");\n\n        (uint256 underlyingAmount, uint256 adjustedAmount) = _toUnderlyingAmount(amount);\n\n         // _burn will check the (actual) amount availability again\n         _burn(operator, account, adjustedAmount, data, operatorData);\n\n        uint256 amountBefore = _underlyingToken.balanceOf(address(this));\n        _underlyingToken.safeTransfer(account, underlyingAmount);\n        uint256 amountAfter = _underlyingToken.balanceOf(address(this));\n        uint256 actualDowngradedAmount = amountBefore.sub(amountAfter);\n        require(\n            underlyingAmount == actualDowngradedAmount,\n            \"SuperToken: inflationary/deflationary tokens not supported\");\n\n        emit TokenDowngraded(account, adjustedAmount);\n    }\n\n    /**\n     * @dev Handle decimal differences between underlying token and super token\n     */\n    function _toUnderlyingAmount(uint256 amount)\n        private view\n        returns (uint256 underlyingAmount, uint256 adjustedAmount)\n    {\n        uint256 factor;\n        if (_underlyingDecimals < _STANDARD_DECIMALS) {\n            // if underlying has less decimals\n            // one can upgrade less \"granualar\" amount of tokens\n            factor = 10 ** (_STANDARD_DECIMALS - _underlyingDecimals);\n            underlyingAmount = amount / factor;\n            // remove precision errors\n            adjustedAmount = underlyingAmount * factor;\n        } else if (_underlyingDecimals > _STANDARD_DECIMALS) {\n            // if underlying has more decimals\n            // one can upgrade more \"granualar\" amount of tokens\n            factor = 10 ** (_underlyingDecimals - _STANDARD_DECIMALS);\n            underlyingAmount = amount * factor;\n            adjustedAmount = amount;\n        } else {\n            underlyingAmount = adjustedAmount = amount;\n        }\n    }\n\n    /**************************************************************************\n     * Superfluid Batch Operations\n     *************************************************************************/\n\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    )\n        external override\n        onlyHost\n    {\n        _approve(account, spender, amount);\n    }\n\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    )\n        external override\n        onlyHost\n    {\n        _transferFrom(account, spender, recipient, amount);\n    }\n\n    function operationUpgrade(address account, uint256 amount)\n        external override\n        onlyHost\n    {\n        _upgrade(msg.sender, account, account, amount, \"\", \"\");\n    }\n\n    function operationDowngrade(address account, uint256 amount)\n        external override\n        onlyHost\n    {\n        _downgrade(msg.sender, account, amount, \"\", \"\");\n    }\n\n    /**************************************************************************\n    * Modifiers\n    *************************************************************************/\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"SuperToken: only self allowed\");\n        _;\n    }\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.7.6;\n\nimport { UUPSUtils } from \"./UUPSUtils.sol\";\nimport { Initializable } from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\n/**\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxiable contract.\n */\nabstract contract UUPSProxiable is Initializable {\n\n    /**\n     * @dev Get current implementation code address.\n     */\n    function getCodeAddress() public view returns (address codeAddress)\n    {\n        return UUPSUtils.implementation();\n    }\n\n    function updateCode(address newAddress) external virtual;\n\n    /**\n     * @dev Proxiable UUID marker function.\n     *      This would help to avoid wrong logic contract to be used for upgrading.\n     */\n    function proxiableUUID() public view virtual returns (bytes32);\n\n    /**\n     * @dev Update code address function.\n     *      It is internal, so the derived contract could setup its own permission logic.\n     */\n    function _updateCodeAddress(address newAddress) internal\n    {\n        // require UUPSProxy.initializeProxy first\n        require(UUPSUtils.implementation() != address(0), \"UUPSProxiable: not upgradable\");\n        require(\n            proxiableUUID() == UUPSProxiable(newAddress).proxiableUUID(),\n            \"UUPSProxiable: not compatible logic\"\n        );\n        UUPSUtils.setImplementation(newAddress);\n        emit CodeUpdated(proxiableUUID(), newAddress);\n    }\n\n    event CodeUpdated(bytes32 uuid, address codeAddress);\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n// This is required by the batchCall and decodeCtx\npragma experimental ABIEncoderV2;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    SuperAppDefinitions,\n    ContextDefinitions,\n    BatchOperation,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n\n/**\n * @dev Superfluid host interface.\n\n * It is the central contract of the system where super agreement, super app\n * and super token features are connected together.\n *\n * The superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n * @author Superfluid\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governace of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic INitial agreement class code\n     *\n     * Modifiers:\n     *  - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * Modifiers:\n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @dev Get agreement class\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @dev Create a new bitmask by adding a agreement class to it.\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @dev Create a new bitmask by removing a agreement class from it.\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n\n    /**\n     * @dev Update the super token logic to the latest\n     *\n     * NOTE:\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev Message sender declares it as a super app\n     * @param configWord The super app manifest configuration, flags are defined in\n     *                   `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app level\n     * @param app Super app address\n     */\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev White-list the target app for app composition for the source app (msg.sender)\n     * @param targetApp The taget super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app  is allowed to call the target app as downstream app.\n     * @param app Super app address\n     * @param targetApp The taget super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**\n     * @dev Jail event for the app\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app allowance and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory cbdata);\n\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory appCtx);\n\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appAllowanceGranted,\n        int256 appAllowanceUsed\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory appCtx);\n\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 allowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function ctxUseAllowance(\n        bytes calldata ctx,\n        uint256 allowanceWantedMore,\n        int256 allowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        returns(bytes memory returnedData);\n\n    /**\n     * @dev Call app action\n     * @param callData The contextual call data.\n     *\n     * NOTE: See callAgreement about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev ABIv2 Encoded memory data of context\n     *\n     * NOTE on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // callback level\n        uint8 appLevel;\n        // type of call\n        uint8 callType;\n        // the system timestsamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app allowance granted\n        uint256 appAllowanceGranted;\n        // app allowance wanted by the app callback\n        uint256 appAllowanceWanted;\n        // app allowance used, allowing negative values over a callback session\n        int256 appAllowanceUsed;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes calldata ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations.\n     */\n    function batchCall(Operation[] memory operations) external;\n\n    /**\n     * @dev Batch call function with biconomy forwarder\n     * @param operations Array of batch operations.\n     */\n    function biconomyBatchCall(Operation[] memory operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage don't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev The superfluid context is valid.\n     modifier validCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/superfluid/SuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\n/* solhint-disable not-rely-on-time */\npragma solidity ^0.8.0;\n\nimport { ISuperfluid } from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { ISuperAgreement } from \"../interfaces/superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidGovernance } from \"../interfaces/superfluid/ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"../interfaces/superfluid/ISuperfluidToken.sol\";\n\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\nimport { FixedSizeData } from \"../utils/FixedSizeData.sol\";\n\n\n/**\n * @title Superfluid's token implementation\n *\n * @author Superfluid\n */\nabstract contract SuperfluidToken is ISuperfluidToken\n{\n\n    bytes32 private constant _REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using SignedSafeMath for int256;\n\n    /// @dev Superfluid contract\n    ISuperfluid immutable internal _host;\n\n    /// @dev Active agreement bitmap\n    mapping(address => uint256) internal _inactiveAgreementBitmap;\n\n    /// @dev Settled balance for the account\n    mapping(address => int256) internal _balances;\n\n    /// @dev Total supply\n    uint256 internal _totalSupply;\n\n    // NOTE: for future compatibility, these are reserved solidity slots\n    // The sub-class of SuperfluidToken solidity slot will start after _reserve9\n    uint256 internal _reserve0;\n    uint256 private _reserve1;\n    uint256 private _reserve2;\n    uint256 private _reserve3;\n    uint256 private _reserve4;\n    uint256 private _reserve5;\n    uint256 private _reserve6;\n    uint256 private _reserve7;\n    uint256 private _reserve8;\n    uint256 internal _reserve9;\n\n    constructor(\n        ISuperfluid host\n    ) {\n        _host = host;\n    }\n\n    /// @dev ISuperfluidToken.getHost implementation\n    function getHost()\n       external view\n       override(ISuperfluidToken)\n       returns(address host)\n    {\n       return address(_host);\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /// @dev ISuperfluidToken.realtimeBalanceOf implementation\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n       public view override\n       returns (\n           int256 availableBalance,\n           uint256 deposit,\n           uint256 owedDeposit)\n    {\n        availableBalance = _balances[account];\n        ISuperAgreement[] memory activeAgreements = getAccountActiveAgreements(account);\n        for (uint256 i = 0; i < activeAgreements.length; i++) {\n            (\n                int256 agreementDynamicBalance,\n                uint256 agreementDeposit,\n                uint256 agreementOwedDeposit) = activeAgreements[i]\n                    .realtimeBalanceOf(\n                         this,\n                         account,\n                         timestamp\n                     );\n            deposit = deposit.add(agreementDeposit);\n            owedDeposit = owedDeposit.add(agreementOwedDeposit);\n            // 1. Available Balance = Dynamic Balance - Max(0, Deposit - OwedDeposit)\n            // 2. Deposit should not be shared between agreements\n            \n            int256 zero = 0; //Solidity 0.8.2 made 0 a uint8.\n            availableBalance = availableBalance\n                .add(agreementDynamicBalance)\n                .sub(\n                    (agreementDeposit > agreementOwedDeposit) ?\n                    (agreementDeposit - agreementOwedDeposit).toInt256() : zero\n                );\n        }\n    }\n\n    /// @dev ISuperfluidToken.realtimeBalanceOfNow implementation\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view override\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp)\n    {\n        timestamp = block.timestamp;\n        (\n            availableBalance,\n            deposit,\n            owedDeposit\n        ) = realtimeBalanceOf(account, timestamp);\n    }\n\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        public view override\n        returns(bool isCritical)\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(account, timestamp);\n        return availableBalance < 0;\n    }\n\n    function isAccountCriticalNow(\n       address account\n    )\n        external view override\n       returns(bool isCritical)\n    {\n        return isAccountCritical(account, block.timestamp);\n    }\n\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        public view override\n        returns(bool isSolvent)\n    {\n        (int256 availableBalance, uint256 deposit, uint256 owedDeposit) =\n            realtimeBalanceOf(account, timestamp);\n        // Available Balance = Realtime Balance - Max(0, Deposit - OwedDeposit)\n\n        int256 zero = 0; //Solidity 0.8.2 made 0 a uint8.\n        \n        int realtimeBalance = availableBalance.add(\n            (deposit > owedDeposit ? (deposit - owedDeposit).toInt256() : zero)\n        );\n        return realtimeBalance >= 0;\n    }\n\n    function isAccountSolventNow(\n       address account\n    )\n       external view override\n       returns(bool isSolvent)\n    {\n        return isAccountSolvent(account, block.timestamp);\n    }\n\n    /// @dev ISuperfluidToken.getAccountActiveAgreements implementation\n    function getAccountActiveAgreements(address account)\n       public view override\n       returns(ISuperAgreement[] memory)\n    {\n       return _host.mapAgreementClasses(~_inactiveAgreementBitmap[account]);\n    }\n\n    /**************************************************************************\n     * Token implementation helpers\n     *************************************************************************/\n\n    function _mint(\n        address account,\n        uint256 amount\n    )\n        internal\n    {\n        _balances[account] = _balances[account].add(amount.toInt256());\n        _totalSupply = _totalSupply.add(amount);\n    }\n\n    function _burn(\n        address account,\n        uint256 amount\n    )\n        internal\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(account, block.timestamp);\n        require(availableBalance >= amount.toInt256(), \"SuperfluidToken: burn amount exceeds balance\");\n        _balances[account] = _balances[account].sub(amount.toInt256());\n        _totalSupply = _totalSupply.sub(amount);\n    }\n\n    function _move(\n        address from,\n        address to,\n        int256 amount\n    )\n        internal\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(from, block.timestamp);\n        require(availableBalance >= amount, \"SuperfluidToken: move amount exceeds balance\");\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n    }\n\n    /**************************************************************************\n     * Super Agreement hosting functions\n     *************************************************************************/\n\n    /// @dev ISuperfluidToken.createAgreement implementation\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        require(!FixedSizeData.hasData(slot, data.length), \"SuperfluidToken: agreement already created\");\n        FixedSizeData.storeData(slot, data);\n        emit AgreementCreated(agreementClass, id, data);\n    }\n\n    /// @dev ISuperfluidToken.getAgreementData implementation\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view override\n        returns(bytes32[] memory data)\n    {\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        data = FixedSizeData.loadData(slot, dataLength);\n    }\n\n    /// @dev ISuperfluidToken.updateAgreementData implementation\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        FixedSizeData.storeData(slot, data);\n        emit AgreementUpdated(msg.sender, id, data);\n    }\n\n    /// @dev ISuperfluidToken.terminateAgreement implementation\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        require(FixedSizeData.hasData(slot,dataLength), \"SuperfluidToken: agreement does not exist\");\n        FixedSizeData.eraseData(slot, dataLength);\n        emit AgreementTerminated(msg.sender, id);\n    }\n\n    /// @dev ISuperfluidToken.updateAgreementState implementation\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external override\n    {\n        bytes32 slot = keccak256(abi.encode(\"AgreementState\", msg.sender, account, slotId));\n        FixedSizeData.storeData(slot, slotData);\n        // FIXME change how this is done\n        //_addAgreementClass(msg.sender, account);\n        emit AgreementStateUpdated(msg.sender, account, slotId);\n    }\n\n    /// @dev ISuperfluidToken.getAgreementState implementation\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external override view\n        returns (bytes32[] memory slotData) {\n        bytes32 slot = keccak256(abi.encode(\"AgreementState\", agreementClass, account, slotId));\n        slotData = FixedSizeData.loadData(slot, dataLength);\n    }\n\n    /// @dev ISuperfluidToken.settleBalance implementation\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external override\n        onlyAgreement\n    {\n        _balances[account] = _balances[account].add(delta);\n    }\n\n    /// @dev ISuperfluidToken.makeLiquidationPayouts implementation\n    function makeLiquidationPayouts\n    (\n        bytes32 id,\n        address liquidator,\n        address penaltyAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    )\n        external override\n        onlyAgreement\n    {\n        ISuperfluidGovernance gov = _host.getGovernance();\n        address rewardAccount = gov.getConfigAsAddress(_host, this, _REWARD_ADDRESS_CONFIG_KEY);\n        // reward go to liquidator if reward address is null\n        if (rewardAccount == address(0)) {\n            rewardAccount = liquidator;\n        }\n\n        int256 signedRewardAmount = rewardAmount.toInt256();\n\n        if (bailoutAmount == 0) {\n            // if account is in critical state\n            // - reward account takes the reward\n            _balances[rewardAccount] = _balances[rewardAccount]\n                .add(signedRewardAmount);\n            // - penalty applies\n            _balances[penaltyAccount] = _balances[penaltyAccount]\n                .sub(signedRewardAmount);\n            emit AgreementLiquidated(\n                msg.sender, id,\n                penaltyAccount,\n                rewardAccount /* rewardAccount */,\n                rewardAmount\n            );\n        } else {\n            int256 signedBailoutAmount = bailoutAmount.toInt256();\n            // if account is in insolvent state\n            // - liquidator takes the reward\n            _balances[liquidator] = _balances[liquidator]\n                .add(signedRewardAmount);\n            // - reward account becomes bailout account\n            _balances[rewardAccount] = _balances[rewardAccount]\n                .sub(signedRewardAmount)\n                .sub(signedBailoutAmount);\n            // - penalty applies (excluding the bailout)\n            _balances[penaltyAccount] = _balances[penaltyAccount]\n                .add(signedBailoutAmount);\n            emit AgreementLiquidated(\n                msg.sender, id,\n                penaltyAccount,\n                liquidator /* rewardAccount */,\n                rewardAmount\n            );\n            emit Bailout(\n                rewardAccount,\n                bailoutAmount\n            );\n        }\n    }\n\n    /**************************************************************************\n    * Modifiers\n    *************************************************************************/\n\n    modifier onlyAgreement() {\n        require(\n            _host.isAgreementClassListed(ISuperAgreement(msg.sender)),\n            \"SuperfluidToken: only listed agreeement\");\n        _;\n    }\n\n    modifier onlyHost() {\n        require(address(_host) == msg.sender, \"SuperfluidToken: Only host contract allowed\");\n        _;\n    }\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/utils/ERC777Helper.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.7.6;\n\nimport { IERC1820Registry } from \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\n\n\nlibrary ERC777Helper {\n\n    IERC1820Registry constant internal _ERC1820_REGISTRY =\n        IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    // keccak256(\"ERC777TokensSender\")\n    bytes32 constant internal _TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n    // keccak256(\"ERC777TokensRecipient\")\n    bytes32 constant internal _TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n\n    /// @dev ERC777 operators support self structure\n    struct Operators {\n        address[] defaultOperatorsArray;\n        mapping(address => bool) defaultOperators;\n        mapping(address => mapping(address => bool)) operators;\n        mapping(address => mapping(address => bool)) revokedDefaultOperators;\n    }\n\n    function register(address token) internal {\n        _ERC1820_REGISTRY.setInterfaceImplementer(token, keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(token, keccak256(\"ERC20Token\"), address(this));\n    }\n\n    function isOperatorFor(Operators storage self, address operator, address tokenHolder) internal view returns (bool) {\n        return operator == tokenHolder ||\n            (\n                self.defaultOperators[operator] &&\n                !self.revokedDefaultOperators[tokenHolder][operator]\n            ) ||\n            self.operators[tokenHolder][operator];\n    }\n\n    function authorizeOperator(Operators storage self, address holder, address operator) internal {\n        require(holder != operator, \"ERC777Operators: authorizing self as operator\");\n\n        if (self.defaultOperators[operator]) {\n            delete self.revokedDefaultOperators[holder][operator];\n        } else {\n            self.operators[holder][operator] = true;\n        }\n    }\n\n    function revokeOperator(Operators storage self, address holder, address operator) internal {\n        require(operator != msg.sender, \"ERC777Operators: revoking self as operator\");\n        if (self.defaultOperators[operator]) {\n            self.revokedDefaultOperators[holder][operator] = true;\n        } else {\n            delete self.operators[holder][operator];\n        }\n    }\n\n    function defaultOperators(Operators storage self) internal view returns (address[] memory) {\n        return self.defaultOperatorsArray;\n    }\n\n    function setupDefaultOperators(Operators storage self, address[] memory operators) internal {\n        // According to 777 spec: default operators should only be setup once\n        assert(self.defaultOperatorsArray.length == 0);\n        self.defaultOperatorsArray = operators;\n        for (uint i = 0; i < operators.length; ++i) {\n            self.defaultOperators[operators[i]] = true;\n        }\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SignedSafeMath {\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        return a + b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n * their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSUtils.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.7.6;\n\n/**\n * @title UUPS (Universal Upgradeable Proxy Standard) Shared Library\n */\nlibrary UUPSUtils {\n\n    /**\n     * @dev Implementation slot constant.\n     * Using https://eips.ethereum.org/EIPS/eip-1967 standard\n     * Storage slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n     * (obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)).\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /// @dev Get implementation address.\n    function implementation() internal view returns (address impl) {\n        assembly { // solium-disable-line\n            impl := sload(_IMPLEMENTATION_SLOT)\n        }\n    }\n\n    /// @dev Set new implementation address.\n    function setImplementation(address codeAddress) internal {\n        assembly {\n            // solium-disable-line\n            sstore(\n                _IMPLEMENTATION_SLOT,\n                codeAddress\n            )\n        }\n    }\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @dev Superfluid's Governance interface\n *\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * NOTE:\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function updateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken token) external;\n\n    /// @dev Get configuration as address value\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /// @dev Get configuration as uint256 value\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n\n/**\n * @title Superfluid's token interface.\n *\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @param account Account to query\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @dev Check if one account is critical\n    * @param account Account check if is critical by a future time\n    * @param timestamp Time of balance\n    * @return isCritical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @dev Check if one account is critical now\n    * @param account Account check if is critical by a future time\n    * @return isCritical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @dev Check if one account is solvent\n     * @param account Account check if is solvent by a future time\n     * @param timestamp Time of balance\n     * @return isSolvent\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @dev Check if one account is solvent now\n     * @param account Account check if is solvent now\n     * @return isSolvent\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @dev Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n\n    /**\n     * @dev Agreement creation event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n\n    /**\n     * @dev Agreement creation event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n\n    /**\n     * @dev Agreement termination event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * NOTE\n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of a agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account of the agrement\n     * @param state Agreement state of the account\n     */\n    event AgreementAccountStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        bytes state\n    );\n\n    /**\n     * @dev Settle balance from an account by the agreement.\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Agreement liquidation event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Make liquidation payouts\n     * @param id Agreement ID\n     * @param liquidator Address of the executer of liquidation\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of account bailout needed\n     *\n     * NOTE:\n     * Liquidation rules:\n     *  - If a bailout is required (bailoutAmount > 0)\n     *     - the actual reward goes to the liquidator,\n     *     - while the reward account becomes the bailout account\n     *     - total bailout include: bailout amount + reward amount\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function makeLiquidationPayouts\n    (\n        bytes32 id,\n        address liquidator,\n        address penaltyAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    )\n        external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\n *\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /// @dev Initialize the contract\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: SuperToken always uses 18 decimals.\n     *\n     * Note: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For super token contracts, this value is 1 always\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlaying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to received upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account whose tokens are upgraded\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are upgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transfer from by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender  The account where the funds is sent from.\n    * @param recipient The recipient of thefunds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n\ninterface ISuperTokenFactory {\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @dev Get the current super token logic used by the factory\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABE\n    }\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external;\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     *\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external;\n\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    event SuperTokenCreated(ISuperToken indexed token);\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Superfluid's agreement interface.\n *\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Initialize the agreement contract\n     */\n    function initialize() external;\n\n    /**\n     * @dev Get the type of the agreement class.\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class.\n     * @param account Account the state belongs to\n     * @param time Future time used for the calculation.\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\n     * @return deposit Account deposit amount of this agreement.\n     * @return owedDeposit Account owed deposit amount of this agreement.\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n\n/**\n * @title Superfluid's app interface.\n *\n * NOTE:\n * - Be fearful of the app jail, when the word permitted is used.\n *\n * @author Superfluid\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * NOTE:\n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass\n    *          arbitary information to the after-hook callback.\n    *\n    * NOTE:\n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\n/**\n * @dev Super app definitions library\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n}\n\n/**\n * @dev Context definitions library\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appLevel, uint8 callType)\n    {\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @dev Batch operation library\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev ERC20 Approve batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes calldata, bytes userdata)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev ERC20 Approve batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\");\n\n    bytes32 constant internal BICONOMY_FORWARDER_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.biconomyForwarderAddress\");\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.5.0;\n\n/**\n * @dev ERC20 token info interface\n *\n * NOTE: ERC20 standard interface does not specify these functions, but\n * often the token implementations have them.\n *\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.5.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n\n/**\n *\n * @dev Interface for ERC20 token with token info\n *\n * NOTE: Using abstract contract instead of interfaces because old solidity\n * does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/utils/FixedSizeData.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.7.6;\n\n\n/**\n * @dev Utilities for fixed size data in storage\n *\n * When using solidity dynamic array, first word is used to store the length\n * of the array. For use cases that the length doesn't change, it is better\n * to use a fixed size data premitive.\n *\n * To use this library:\n * - The pointer to the storage is `slot`, the user could use `keccak256(abi.encode(...))`\n *   scheme to create collision-free slot ID for locating the data.\n * - To load data, or erase data and get all gas refund, data length is always required.\n */\nlibrary FixedSizeData {\n\n    /**\n     * @dev Store data to the slot at `slot`\n     */\n    function storeData(bytes32 slot, bytes32[] memory data) internal {\n        for (uint j = 0; j < data.length; ++j) {\n            bytes32 d = data[j];\n            assembly { sstore(add(slot, j), d) }\n        }\n    }\n\n    function hasData(bytes32 slot, uint dataLength) internal view returns (bool) {\n        for (uint j = 0; j < dataLength; ++j) {\n            bytes32 d;\n            assembly { d := sload(add(slot, j)) }\n            if (uint256(d) > 0) return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Load data of size `dataLength` from the slot at `slot`\n     */\n    function loadData(bytes32 slot, uint dataLength) internal view returns (bytes32[] memory data) {\n        data = new bytes32[](dataLength);\n        for (uint j = 0; j < dataLength; ++j) {\n            bytes32 d;\n            assembly { d := sload(add(slot, j)) }\n            data[j] = d;\n        }\n    }\n\n    /**\n     * @dev Erase data of size `dataLength` from the slot at `slot`\n     */\n    function eraseData(bytes32 slot, uint dataLength) internal {\n        for (uint j = 0; j < dataLength; ++j) {\n            assembly { sstore(add(slot, j), 0) }\n        }\n    }\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n\n/**\n * @title Superfluid's instant distribution agreement interface.\n *\n * @author Superfluid\n *\n * Notes:\n *   - A publisher can create as many as indeces as possibily identifiable with `indexId`.\n *     - `indexId` is deliberately limited to 32 bits, to avoid the chance for sha-3 collision.\n *       Despite knowing sha-3 collision is only theoratical.\n *   - A publisher can create subscription to an index for any subscriber.\n *   - A subscription consists of:\n *     - The index it subscribes to.\n *     - Number of units subscribed.\n *   - An index consists of:\n *     - Current value as `uint128 indexValue`.\n *     - Total units of the approved subscriptions as `uint128 totalUnitsApproved`.\n *     - Total units of the non approved subscription as `uint128 totalUnitsPending`.\n *   - A publisher can update index with new value that doesn't decrease.\n *   - A publisher can update subscription with any number of units.\n *   - A publisher or a subscriber can delete subscription and reset units to zero.\n *   - A subscriber must approve the index in order to receive distributions from the publisher\n *     each time the index is updated.\n *     - The amount distributed is $$\\Delta{index} * units$$\n *   - Distributions to a non approved subscription stays in the publisher's deposit until:\n *     - the subscriber approve the subscription (side effect),\n *     - the publisher update the subscription (side effect),\n *     - the subscriber delete the subscription even if it is never approved (side effect),\n *     - or the subscriber can explicitly claim them.\n */\nabstract contract IInstantDistributionAgreementV1 is ISuperAgreement {\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.InstantDistributionAgreement.v1\");\n    }\n\n    /**\n     * @dev Create a new index for the publisher.\n     * @param token Super token address.\n     * @param indexId Id of the index.\n     *\n     * App callbacks: None\n     */\n    function createIndex(\n        ISuperfluidToken token,\n        uint32 indexId,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    event IndexCreated(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        bytes userData);\n\n    /**\n     * @dev Query the data of a index.\n     * @param token Super token address.\n     * @param publisher The publisher of the index.\n     * @param indexId Id of the index.\n     * @return exist Does the index exist.\n     * @return indexValue Value of the current index.\n     * @return totalUnitsApproved Total units approved for the index.\n     * @return totalUnitsPending Total units pending approval for the index.\n     *\n     * # App callbacks\n     *\n     * None\n     */\n    function getIndex(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId)\n            external\n            view\n            virtual\n            returns(\n                bool exist,\n                uint128 indexValue,\n                uint128 totalUnitsApproved,\n                uint128 totalUnitsPending);\n\n    /**\n     * @dev Update index value of an index.\n     * @param token Super token address.\n     * @param indexId Id of the index.\n     * @param indexValue Value of the index.\n     *\n     * # App callbacks\n     *\n     * None\n     */\n    function updateIndex(\n        ISuperfluidToken token,\n        uint32 indexId,\n        uint128 indexValue,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    event IndexUpdated(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        uint128 indexValue,\n        uint128 totalUnitsPending,\n        uint128 totalUnitsApproved,\n        bytes userData);\n\n    /**\n     * @dev Distribute tokens through the index.\n     * @param token Super token address.\n     * @param indexId Id of the index.\n     * @param amount The amount of tokens desired to be distributed.\n     *\n     * NOTE:\n     * - This is a convenient version of updateIndex. It adds to the index\n     *   a delta that equals to `amount / totalUnits`.\n     * - The actual amount distributed could be obtained via\n     *   `calculateDistribution`. This is due to precision error with index\n     *   value and units data range.\n     *\n     * # App callbacks\n     *\n     * None\n     */\n    function distribute(\n        ISuperfluidToken token,\n        uint32 indexId,\n        uint256 amount,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    /**\n     * @dev Calculate actual distribution amount\n     * @param token Super token address.\n     * @param publisher The publisher of the index.\n     * @param indexId Id of the index.\n     * @param amount The amount of tokens desired to be distributed.\n     */\n    function calculateDistribution(\n       ISuperfluidToken token,\n       address publisher,\n       uint32 indexId,\n       uint256 amount)\n           external view\n           virtual\n           returns(\n               uint256 actualAmount,\n               uint128 newIndexValue);\n\n    /**\n     * @dev Approve the subscription of an index.\n     * @param token Super token address.\n     * @param publisher The publisher of the index.\n     * @param indexId Id of the index.\n     *\n     * # App callbacks\n     *\n     * - if subscription exist\n     *   - AgreementCreated callback to the publisher:\n     *      - agreementId is for the subscription\n     * - if subscription does not exist\n     *   - AgreementUpdated callback to the publisher:\n     *      - agreementId is for the subscription\n     */\n    function approveSubscription(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    event IndexSubscribed(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        address subscriber,\n        bytes userData);\n\n    event SubscriptionApproved(\n        ISuperfluidToken indexed token,\n        address indexed subscriber,\n        address publisher,\n        uint32 indexId,\n        bytes userData);\n\n    /**\n     * @dev Update the nuber of units of a subscription.\n     * @param token Super token address.\n     * @param indexId Id of the index.\n     * @param subscriber The subscriber of the index.\n     * @param units Number of units of the subscription.\n     *\n     * # App callbacks\n     *\n     * - if subscription exist\n     *   - AgreementCreated callback to the subscriber:\n     *      - agreementId is for the subscription\n     * - if subscription does not exist\n     *   - AgreementUpdated callback to the subscriber:\n     *      - agreementId is for the subscription\n     */\n    function updateSubscription(\n        ISuperfluidToken token,\n        uint32 indexId,\n        address subscriber,\n        uint128 units,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    event IndexUnitsUpdated(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        address subscriber,\n        uint128 units,\n        bytes userData);\n\n    event SubscriptionUnitsUpdated(\n        ISuperfluidToken indexed token,\n        address indexed subscriber,\n        address publisher,\n        uint32 indexId,\n        uint128 units,\n        bytes userData);\n\n    /**\n     * @dev Get data of a subscription\n     * @param token Super token address.\n     * @param publisher The publisher of the index.\n     * @param indexId Id of the index.\n     * @param subscriber The subscriber of the index.\n     * @return exist Does the subscription exist?\n     * @return approved Is the subscription approved?\n     * @return units Units of the suscription.\n     * @return pendingDistribution Pending amount of tokens to be distributed for unapproved subscription.\n     */\n    function getSubscription(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber)\n            external\n            view\n            virtual\n            returns(\n                bool exist,\n                bool approved,\n                uint128 units,\n                uint256 pendingDistribution\n            );\n\n    /**\n     * @dev Get data of a subscription by agreement ID\n     * @param token Super token address.\n     * @param agreementId The agreement ID.\n     * @return publisher The publisher of the index.\n     * @return indexId Id of the index.\n     * @return approved Is the subscription approved?\n     * @return units Units of the suscription.\n     * @return pendingDistribution Pending amount of tokens to be distributed for unapproved subscription.\n     */\n    function getSubscriptionByID(\n        ISuperfluidToken token,\n        bytes32 agreementId)\n            external\n            view\n            virtual\n            returns(\n                address publisher,\n                uint32 indexId,\n                bool approved,\n                uint128 units,\n                uint256 pendingDistribution\n            );\n\n    /**\n     * @dev List subscriptions of an user.\n     * @param token Super token address.\n     * @param subscriber The user, a subscriber.\n     * @return publishers Publishers of the subcriptions.\n     * @return indexIds Indexes of the subscriptions.\n     * @return unitsList Units of the subscriptions.\n     */\n    function listSubscriptions(\n        ISuperfluidToken token,\n        address subscriber)\n            external\n            view\n            virtual\n            returns(\n                address[] memory publishers,\n                uint32[] memory indexIds,\n                uint128[] memory unitsList);\n\n    /**\n     * @dev Delete the subscription of an user.\n     * @param token Super token address.\n     * @param publisher The publisher of the index.\n     * @param indexId Id of the index.\n     * @param subscriber The user, a subscriber.\n     *\n     * # App callbacks\n     *\n     * - if the subscriber called it\n     *   - AgreementTerminated callback to the publsiher:\n     *      - agreementId is for the subscription\n     * - if the publisher called it\n     *   - AgreementTerminated callback to the subscriber:\n     *      - agreementId is for the subscription\n     */\n    function deleteSubscription(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes calldata ctx)\n            external\n            virtual\n            returns(bytes memory newCtx);\n\n    event IndexUnsubscribed(\n        ISuperfluidToken indexed token,\n        address indexed publisher,\n        uint32 indexed indexId,\n        address subscriber,\n        bytes userData);\n\n    event SubscriptionDeleted(\n        ISuperfluidToken indexed token,\n        address indexed subscriber,\n        address publisher,\n        uint32 indexId,\n        bytes userData);\n\n    /**\n    * @dev Claim pending distributions.\n    * @param token Super token address.\n    * @param publisher The publisher of the index.\n    * @param indexId Id of the index.\n    * @param subscriber The user, a subscriber.\n    *\n    * The subscription should not exist yet.\n    *\n    * # App callbacks\n    *\n    * - AgreementUpdated callback to the publisher:\n    *    - agreementId is for the subscription\n    */\n    function claim(\n        ISuperfluidToken token,\n        address publisher,\n        uint32 indexId,\n        address subscriber,\n        bytes calldata ctx)\n        external\n        virtual\n        returns(bytes memory newCtx);\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n\n/**\n * @dev Superfluid's constant flow agreement interface\n *\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @dev Get the maximum flow rate allowed with the deposit\n     * @param deposit Deposit amount used for creating the flow\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @dev Get the deposit required for creating the flow\n     * @param flowRate Flow rate to be tested\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Create a flow betwen sender and receiver.\n     * @param token Super token address.\n     * @param receiver Flow receiver address.\n     * @param flowRate New flow rate in amount per second.\n     *\n     * # App callbacks\n     *\n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - A deposit is taken as safety margin for the solvency agents.\n     * - A extra gas fee may be taken to pay for solvency agent liquidations.\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev Update the flow rate between sender and receiver.\n     * @param token Super token address.\n     * @param receiver Flow receiver address.\n     * @param flowRate New flow rate in amount per second.\n     *\n     * # App callbacks\n     *\n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Only the flow sender may update the flow rate.\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system.\n     * - Deposit amount will be adjusted accordingly.\n     * - No new gas fee is charged.\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver`.\n     * @param token Super token address.\n     * @param sender Flow receiver.\n     * @param receiver Flow sender.\n     * @return timestamp Timestamp of when the flow is updated.\n     * @return flowRate The flow rate.\n     * @return deposit The amount of deposit the flow.\n     * @return owedDeposit The amount of owed deposit of the flow.\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get flow data using agreement ID\n     * @param token Super token address.\n     * @param agreementId The agreement ID.\n     * @return timestamp Timestamp of when the flow is updated.\n     * @return flowRate The flow rate.\n     * @return deposit The amount of deposit the flow.\n     * @return owedDeposit The amount of owed deposit of the flow.\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address.\n    * @param account Account for the query.\n    */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address.\n     * @param account Account for the query.\n     * @return flowRate Flow rate.\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @dev Delete the flow between sender and receiver\n     * @param token Super token address.\n     * @param ctx Context bytes.\n     * @param receiver Flow receiver address.\n     *\n     * # App callbacks\n     *\n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Both flow sender and receiver may delete the flow.\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement.\n     * - Gas fee may be returned to the sender.\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n      * @dev Flow updated event.\n      * @param token Super token address.\n      * @param sender Flow sender address.\n      * @param receiver Flow recipient address.\n      * @param flowRate Flow rate in amount per second for this flow.\n      * @param flowRate Total flow rate in amount per second for the sender.\n      * @param flowRate Total flow rate in amount per second for the receiver.\n      * @param userData The user provided data.\n      */\n     event FlowUpdated(\n         ISuperfluidToken indexed token,\n         address indexed sender,\n         address indexed receiver,\n         int96 flowRate,\n         int256 totalSenderFlowRate,\n         int256 totalReceiverFlowRate,\n         bytes userData\n     );\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/CustomSuperTokenProxyBase.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport {\n    ISuperToken\n} from \"../../interfaces/superfluid/ISuperToken.sol\";\nimport { UUPSProxy } from \"../../upgradability/UUPSProxy.sol\";\n\n\n/**\n * @dev Custom super token proxy base contract\n *\n * NOTE:\n * - Because of how solidity is layouting its storages variables and custom\n *   super token inherits the Super Token standard implementation, so it is\n *   required that the custom token proxy would need to pad its implementation\n *   with reserved storages used by the Super Token implementation.\n * - Refer to SETH.sol for an example how it is used.\n */\nabstract contract CustomSuperTokenProxyBase is UUPSProxy {\n    // This is the hard-coded number of storage slots used by the super token\n    uint256[32] internal _storagePaddings;\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxy.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.7.6;\n\nimport { UUPSUtils } from \"./UUPSUtils.sol\";\nimport { Proxy } from \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\n\n/**\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxy\n *\n * NOTE:\n * - Compliant with [Universal Upgradeable Proxy Standard](https://eips.ethereum.org/EIPS/eip-1822)\n * - Compiiant with [Standard Proxy Storage Slots](https://eips.ethereum.org/EIPS/eip-1967)\n * - Implements delegation of calls to other contracts, with proper forwarding of\n *   return values and bubbling of failures.\n * - It defines a fallback function that delegates all calls to the implementation.\n */\ncontract UUPSProxy is Proxy {\n\n    /**\n     * @dev Proxy initialization function.\n     *      This should only be called once and it is permission-less.\n     * @param initialAddress Initial logic contract code address to be used.\n     */\n    function initializeProxy(address initialAddress) external {\n        require(initialAddress != address(0), \"UUPSProxy: zero address\");\n        require(UUPSUtils.implementation() == address(0), \"UUPSProxy: already initialized\");\n        UUPSUtils.setImplementation(initialAddress);\n    }\n\n    /// @dev Proxy._implementation implementation\n    function _implementation() internal virtual override view returns (address)\n    {\n        return UUPSUtils.implementation();\n    }\n\n}\n"
    },
    "src/token/create/CreatonToken.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport {\n    ISuperToken,\n    CustomSuperTokenProxyBase\n} from \"../../dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/CustomSuperTokenProxyBase.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n//import { UUPSProxiable } from \"@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol\";\n\ninterface INativeSuperToken {\n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        uint256 initialSupply\n    ) external;\n}\n\ncontract CreatonToken is INativeSuperToken, CustomSuperTokenProxyBase {\n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        uint256 initialSupply\n    ) external override {\n        ISuperToken(address(this)).initialize(\n            IERC20(address(0x0)), // no underlying/wrapped token\n            18, // shouldn't matter if there's no wrapped token\n            name,\n            symbol\n        );\n        ISuperToken(address(this)).selfMint(msg.sender, initialSupply, new bytes(0));\n    }\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/tokens/FullUpgradableSuperTokenProxy.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.0;\n\nimport { ISuperTokenFactory } from \"../interfaces/superfluid/ISuperTokenFactory.sol\";\nimport { Proxy } from \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\n\n/**\n * @dev Full upgradable super token proxy\n */\ncontract FullUpgradableSuperTokenProxy is Proxy {\n\n    // web3.utils.keccak256(\"org.superfluid-finance.FullUpgradableSuperTokenWrapper.factory_slot\")\n    bytes32 internal constant _FACTORY_SLOT = 0xb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a0;\n\n    function initialize() external\n    {\n        address factory;\n        assembly { // solium-disable-line\n            factory := sload(_FACTORY_SLOT)\n        }\n        require(address(factory) == address(0), \"Already initialized\");\n        factory = msg.sender;\n        assembly { // solium-disable-line\n            sstore(_FACTORY_SLOT, factory)\n        }\n    }\n\n    function _implementation() internal override view returns (address impl) {\n        ISuperTokenFactory factory;\n        assembly { // solium-disable-line\n            factory := sload(_FACTORY_SLOT)\n        }\n        require(address(factory) != address(0), \"Not initialized\");\n        return address(factory.getSuperTokenLogic());\n    }\n\n}\n"
    },
    "src/dependency/superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperApp,\n    SuperAppDefinitions\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\n\nabstract contract SuperAppBase is ISuperApp {\n\n    function beforeAgreementCreated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback - Before Agreement Created\");\n    }\n\n    function afterAgreementCreated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Created\");\n    }\n\n    function beforeAgreementUpdated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback - Before Agreement updated\");\n    }\n\n    function afterAgreementUpdated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Updated\");\n    }\n\n    function beforeAgreementTerminated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback -  Before Agreement Terminated\");\n    }\n\n    function afterAgreementTerminated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Terminated\");\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "src/creaton/CreatorBeacon.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\ncontract CreatorBeacon is UpgradeableBeacon {\n    constructor(address _implementation) public UpgradeableBeacon(_implementation) {}\n}\n"
    },
    "src/creaton/CreatorProxy.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n\ncontract CreatorProxy is BeaconProxy {\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) {}\n}\n"
    },
    "src/creaton/CreatonAdminV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma abicoder v2;\n\n// import \"hardhat-deploy/solc_0.7/proxy/Proxied.sol\";\nimport \"./CreatorProxy.sol\";\nimport \"./CreatorV1.sol\";\nimport \"../dependency/gsn/BaseRelayRecipient.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./ICreatonAdmin.sol\";\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperAgreement,\n    SuperAppDefinitions,\n    ISuperApp\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n\nimport { IUnlock, IPublicLock } from \"./unlock/IUnlock.sol\";\n\ncontract CreatonAdmin is ICreatonAdmin, Initializable, BaseRelayRecipient {\n    // -----------------------------------------\n    // Events\n    // -----------------------------------------\n\n    event CreatorDeployed(address creator, address creatorContract, string description, uint256 subscriptionPrice, address unlock);\n    event NewSubscriber(address user, uint256 amount);\n    event ProfileUpdate(address user, string jsonData);\n    event ReactionFactoryDeployed(address factoryContractAddress);\n\n    // -----------------------------------------\n    // Storage\n    // -----------------------------------------\n    address owner;\n\n    mapping(address => address[]) public creator2contract;\n    mapping(address => address) public contract2creator;\n    mapping(address => bool) public override registeredUsers;\n\n    address private _host;\n    address private _cfa;\n    address private _acceptedToken;\n    int96 private _MINIMUM_FLOW_RATE;\n\n    ISuperfluid public superFluid;\n\n    address public override treasury;\n    int96 public override treasuryFee;\n\n    address public creatorBeacon;\n    address public override nftFactory;\n    address public reactionFactory;\n\n    IUnlock unlockProtocol;\n\n    // -----------------------------------------\n    // Constructor\n    // -----------------------------------------\n\n    constructor(\n        address host,\n        address cfa,\n        address acceptedToken, // get these from superfluid contracts\n        address _treasury,\n        int96 _treasuryFee,\n        address _creatorBeacon,\n        address _nftFactory,\n        address _trustedForwarder,\n        address _reactionFactory\n    ) {\n        owner = msg.sender;\n\n        assert(host != address(0));\n        assert(cfa != address(0));\n        assert(acceptedToken != address(0));\n\n        _host = host;\n        _cfa = cfa;\n        _acceptedToken = acceptedToken;\n\n        superFluid = ISuperfluid(_host);\n\n        treasury = _treasury;\n        treasuryFee = _treasuryFee;\n\n        creatorBeacon = _creatorBeacon;\n        nftFactory = _nftFactory;\n\n        trustedForwarder = _trustedForwarder;\n        \n        reactionFactory = _reactionFactory;\n    }\n\n    // -----------------------------------------\n    // Logic\n    // -----------------------------------------\n\n    function deployCreator(\n        string calldata description,\n        uint256 subscriptionPrice,\n        string memory nftName,\n        string memory nftSymbol\n    ) external {\n\n        CreatorProxy creatorContract =\n            new CreatorProxy(\n                creatorBeacon,\n                abi.encodeWithSignature(\n                    \"initialize(address,address,address,address,string,uint256,string,string,address)\",\n                    _host,\n                    _cfa,\n                    _acceptedToken,\n                    _msgSender(),\n                    description,\n                    subscriptionPrice,\n                    nftName,\n                    nftSymbol,\n                    trustedForwarder\n                )\n            );\n\n        uint256 configWord = SuperAppDefinitions.APP_LEVEL_FINAL;\n\n        address creatorContractAddr = address(creatorContract);\n        require(creatorContractAddr != address(0));\n\n        superFluid.registerAppByFactory(ISuperApp(creatorContractAddr), configWord);\n\n        contract2creator[creatorContractAddr] = _msgSender();\n        creator2contract[_msgSender()].push(creatorContractAddr);\n\n        //IERC20(_acceptedToken).transfer(creatorContractAddr, 1e16); not necessary anymore?\n\n        unlockProtocol = IUnlock(0xE8E5cd156f89F7bdB267EabD5C43Af3d5AF2A78f); //Polygon v10\n        _MINIMUM_FLOW_RATE = (int96(uint96(subscriptionPrice)) * 1e18) / (3600 * 24 * 30);\n        \n        uint256 version = unlockProtocol.unlockVersion();\n        bytes12 salt = bytes12(keccak256(abi.encodePacked(_MINIMUM_FLOW_RATE, _acceptedToken)));\n        IPublicLock lock = IPublicLock(unlockProtocol.createLock(315360000, _acceptedToken, 0, 10000000, nftName, salt));\n        lock.addLockManager(_msgSender());\n        lock.addKeyGranter(_msgSender());\n        lock.setEventHooks(creatorContractAddr, creatorContractAddr);\n        //lock.setBaseTokenURI(\"https://api.backer.vip/keys/\");\n        lock.updateLockSymbol(nftSymbol); // TODO: change?\n        \n        emit CreatorDeployed(_msgSender(), creatorContractAddr, description, subscriptionPrice, address(lock));\n    }\n\n    function updateProfile(string memory dataJSON) external {\n        registeredUsers[_msgSender()] = true;\n        emit ProfileUpdate(_msgSender(), dataJSON);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function getTrustedForwarder() public view override returns (address) {\n        return trustedForwarder;\n    }\n\n    function versionRecipient() external view override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    //function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    function updateTrustedForwarder(address _trustedForwarder) public onlyOwner {\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"CreatonAdmin: Caller is not owner\");\n        _;\n    }\n}\n"
    },
    "src/creaton/CreatorV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./ICreatonAdmin.sol\";\nimport \"./NFTFactory.sol\";\nimport \"./Post.sol\";\nimport \"../dependency/gsn/BaseRelayRecipient.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperAgreement,\n    SuperAppDefinitions\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n\nimport {\n    IConstantFlowAgreementV1\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\n\nimport {SuperAppBase} from \"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\";\n\nimport { IUnlock, IPublicLock } from \"./unlock/IUnlock.sol\";\n\ncontract CreatorV1 is SuperAppBase, Initializable, BaseRelayRecipient {\n    // -----------------------------------------\n    // Errors\n    // -----------------------------------------\n\n    string private constant _ERR_STR_LOW_FLOW_RATE = \"Superfluid: flow rate not enough\";\n    string private constant _ERR_STR_NO_UPFRONT = \"Creaton: pay monthly amount upfront first\";\n\n    // -----------------------------------------\n    // Structures\n    // -----------------------------------------\n\n    enum Status {unSubscribed, subscribed}\n    enum Type {free, encrypted}\n\n    event SubscriberEvent(address user, Status status);\n    event NewPost(uint256 tokenId, string jsonData, Type contentType);\n    event PostContract(address nftContract);\n    event HidePost(uint256 tokenId, bool hide);\n\n    struct Subscriber {\n        Status status;\n    }\n\n    // -----------------------------------------\n    // Storage\n    // -----------------------------------------\n\n    ISuperfluid private _host; // host\n    IConstantFlowAgreementV1 private _cfa; // the stored constant flow agreement class address\n    ISuperToken private _acceptedToken; // accepted token\n\n    address public admin;\n    address public creator;\n    ICreatonAdmin adminContract;\n    NFTFactory nftFactory;\n    IUnlock unlockProtocol;\n    address public unlockLock;\n\n    string public description;\n    int96 public subscriptionPrice;\n    int96 private _MINIMUM_FLOW_RATE;\n    mapping(address => Subscriber) public subscribers;\n    uint256 subscriberCount; // subscribers in subscribed/pendingSubscribe state\n    address public postNFT;\n    mapping(uint256 => Type) post2tier;\n    uint256 uIntSubscriptionPrice;\n    mapping(address => bool) public payedUpfront;\n\n    // -----------------------------------------\n    // Initializer\n    // -----------------------------------------\n\n    function initialize(\n        address host,\n        address cfa,\n        address acceptedToken,\n        address _creator,\n        string memory _description,\n        uint256 _subscriptionPrice,\n        string memory nftName,\n        string memory nftSymbol,\n        address _trustedForwarder,\n        address unlockLock\n    ) public payable initializer {\n        admin = _msgSender();\n\n        assert(address(host) != address(0));\n        assert(address(cfa) != address(0));\n        assert(address(acceptedToken) != address(0));\n\n        _host = ISuperfluid(host);\n        _cfa = IConstantFlowAgreementV1(cfa);\n        _acceptedToken = ISuperToken(acceptedToken);\n        trustedForwarder = _trustedForwarder;\n        //uint256 configWord = SuperAppDefinitions.APP_LEVEL_FINAL;\n        //_host.registerApp(configWord);\n\n        creator = _creator;\n        description = _description;\n        uIntSubscriptionPrice = _subscriptionPrice * 1e18;\n        subscriptionPrice = int96(uint96(_subscriptionPrice));\n        _MINIMUM_FLOW_RATE = (subscriptionPrice * 1e18) / (3600 * 24 * 30);\n\n        adminContract = ICreatonAdmin(admin);\n        nftFactory = NFTFactory(adminContract.nftFactory());\n        createPostNFT(nftName, nftSymbol);\n\n        unlockLock = unlockLock;\n        // TODO: config the lock: symbol, image, callbacks, etc. -- need Lock interface\n        //Tier memory tier = Tier(address(lock), flowRate, token, multiplier, name, metadata, true);\n\n        //Creator subscribes to themselves\n        _addSubscriber(creator);\n        grantKeys(creator);\n    }\n\n    // -----------------------------------------\n    // Logic\n    // -----------------------------------------\n\n    receive() external payable {}\n\n    function withdrawEth() public onlyCreator {\n        (bool success, ) = _msgSender().call{value: (address(this).balance)}(\"Not admin\");\n        require(success, \"No balance\");\n    }\n\n    function recoverTokens(address _token) external onlyCreator {\n        IERC20(_token).approve(address(this), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        IERC20(_token).transfer(_msgSender(), IERC20(_token).balanceOf(address(this)));\n    }\n\n    function changeStatus(address _address, Status status) private {\n        subscribers[_address].status = status;\n        emit SubscriberEvent(_address, status);\n    }\n\n    function getSubscriberCount() public view returns (uint256) {\n        return subscriberCount;\n    }\n\n    function createPostNFT(string memory name, string memory symbol) internal {\n        require(postNFT == address(0));\n        postNFT = nftFactory.createPostNFT(name, symbol, \"\", address(this));\n        emit PostContract(postNFT);\n    }\n\n    function upload(\n        string memory _metadataURI,\n        string memory _dataJSON,\n        Type contentType\n    ) external onlyCreator {\n        require(postNFT != address(0));\n        require(contentType == Type.free || contentType == Type.encrypted);\n        uint256 tokenId = Post(postNFT).mint(creator, _metadataURI);\n        post2tier[tokenId] = contentType;\n        emit NewPost(tokenId, _dataJSON, contentType);\n    }\n\n    function hidePost(uint256 tokenId, bool hide) external onlyCreator {\n        emit HidePost(tokenId, hide);\n    }\n\n    // -----------------------------------------\n    // utility\n    // -----------------------------------------\n\n    function percentage(int96 num, int96 percent) public pure returns (int96) {\n        return (num * percent) / 100;\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    function isTrustedForwarderAdmin(address forwarder) public view returns (bool) {\n        return forwarder == adminContract.getTrustedForwarder();\n    }\n\n    function updateTrustedForwarder(address _trustedForwarder) public onlyCreator {\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /// @dev Take entrance fee from the user and issue a ticket\n    function upfrontFee(bytes calldata ctx) external onlyHost returns (bytes memory newCtx) {\n        // msg sender is encoded in the Context\n        address sender = _host.decodeCtx(ctx).msgSender;\n        _acceptedToken.transferFrom(sender, creator, uIntSubscriptionPrice);\n        payedUpfront[sender] = true;\n        return ctx;\n    }\n\n    // -----------------------------------------\n    // Superfluid Logic\n    // -----------------------------------------\n\n    function _openFlows(\n        bytes calldata ctx,\n        int96 contract2creator,\n        int96 contract2treasury\n    ) private returns (bytes memory newCtx) {\n        // open flow to creator\n        (newCtx, ) = _host.callAgreementWithContext(\n            _cfa,\n            abi.encodeWithSelector(_cfa.createFlow.selector, _acceptedToken, creator, contract2creator, new bytes(0)),\n            new bytes(0),\n            ctx\n        );\n\n        // open flow to treasury\n        (newCtx, ) = _host.callAgreementWithContext(\n            _cfa,\n            abi.encodeWithSelector(\n                _cfa.createFlow.selector,\n                _acceptedToken,\n                adminContract.treasury(),\n                contract2treasury,\n                new bytes(0)\n            ),\n            new bytes(0),\n            newCtx\n        );\n    }\n\n    function _updateFlows(\n        bytes calldata ctx,\n        int96 contract2creator,\n        int96 contract2treasury\n    ) private returns (bytes memory newCtx) {\n        // update flow to creator\n        (newCtx, ) = _host.callAgreementWithContext(\n            _cfa,\n            abi.encodeWithSelector(_cfa.updateFlow.selector, _acceptedToken, creator, contract2creator, new bytes(0)),\n            new bytes(0),\n            ctx\n        );\n\n        // update flow to treasury\n        (newCtx, ) = _host.callAgreementWithContext(\n            _cfa,\n            abi.encodeWithSelector(\n                _cfa.updateFlow.selector,\n                _acceptedToken,\n                adminContract.treasury(),\n                contract2treasury,\n                new bytes(0)\n            ), // call data\n            new bytes(0), // user data\n            newCtx // ctx\n        );\n    }\n\n    function _deleteFlows(bytes calldata ctx) private returns (bytes memory newCtx) {\n        // delete flow to creator\n        (newCtx, ) = _host.callAgreementWithContext(\n            _cfa,\n            abi.encodeWithSelector(_cfa.deleteFlow.selector, _acceptedToken, address(this), creator, new bytes(0)),\n            new bytes(0),\n            ctx\n        );\n\n        // delete flow to treasury\n        (newCtx, ) = _host.callAgreementWithContext(\n            _cfa,\n            abi.encodeWithSelector(\n                _cfa.deleteFlow.selector,\n                _acceptedToken,\n                address(this),\n                adminContract.treasury(),\n                new bytes(0)\n            ), // call data\n            new bytes(0), // user data\n            newCtx // ctx\n        );\n    }\n\n    function _addSubscriber(address _address) private {\n        subscriberCount += 1;\n        changeStatus(_address, Status.subscribed);\n    }\n\n    function _delSubscriber(address _address) private {\n        subscriberCount -= 1;\n        changeStatus(_address, Status.unSubscribed);\n        delete subscribers[_address];\n    }\n\n    function _subscribe(\n        bytes calldata ctx,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata cbdata\n    ) private returns (bytes memory newCtx) {\n        (, int96 flowRate, , ) = IConstantFlowAgreementV1(agreementClass).getFlowByID(_acceptedToken, agreementId);\n        require(flowRate >= _MINIMUM_FLOW_RATE, _ERR_STR_LOW_FLOW_RATE);\n        ISuperfluid.Context memory context = _host.decodeCtx(ctx); // should give userData\n        require(payedUpfront[context.msgSender] == true, _ERR_STR_NO_UPFRONT);\n\n        int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\n        int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasuryFee());\n        int96 contract2treasuryDelta = contractFlowRate - contract2creatorDelta;\n\n        //Grant Unlock NFT and key to subscriber\n        grantKeys(context.msgSender);\n\n        if (subscriberCount == 1) {\n            //creator are subscribed to themselves already\n            newCtx = _openFlows(ctx, contract2creatorDelta, contract2treasuryDelta);\n        } else if (subscriberCount > 1) {\n            (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\n            (, int96 contract2treasuryCurrent, , ) =\n                _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\n            newCtx = _updateFlows(\n                ctx,\n                contract2creatorCurrent + contract2creatorDelta,\n                contract2treasuryCurrent + contract2treasuryDelta\n            );\n        }\n\n        payedUpfront[context.msgSender] = false;\n\n        _addSubscriber(context.msgSender);\n    }\n\n    function _updateSubscribe(\n        bytes calldata ctx,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata cbdata\n    ) private returns (bytes memory newCtx) {\n        (, int96 flowRate, , ) = IConstantFlowAgreementV1(agreementClass).getFlowByID(_acceptedToken, agreementId);\n        require(flowRate >= _MINIMUM_FLOW_RATE, _ERR_STR_LOW_FLOW_RATE);\n\n        int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\n        int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasuryFee());\n        int96 contract2treasuryDelta = contractFlowRate - contract2creatorDelta;\n\n        (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\n        (, int96 contract2treasuryCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\n        newCtx = _updateFlows(\n            ctx,\n            contract2creatorCurrent + contract2creatorDelta,\n            contract2treasuryCurrent + contract2treasuryDelta\n        );\n    }\n\n    function _unsubscribe(bytes calldata ctx) private returns (bytes memory newCtx) {\n        address sender = _host.decodeCtx(ctx).msgSender;\n\n        //delete Unlock NFT key (Unlock NFT do not get burned)\n        IPublicLock lock = IPublicLock(unlockLock);\n        if (lock.getHasValidKey(sender)) {\n            lock.expireAndRefundFor(sender, 0);\n        }\n\n        _delSubscriber(sender);\n        \n        if (subscriberCount == 1) {\n            newCtx = _deleteFlows(ctx);\n        } else if (subscriberCount > 0) {\n            int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\n            int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasuryFee());\n            int96 contract2treasuryDelta = contractFlowRate - contract2creatorDelta;\n\n            (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\n            (, int96 contract2treasuryCurrent, , ) =\n                _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\n\n            newCtx = _updateFlows(\n                ctx,\n                contract2creatorCurrent + contract2creatorDelta,\n                contract2treasuryCurrent + contract2treasuryDelta\n            );\n        }\n    }\n\n    function grantKeys(address msgSender) internal {\n        IPublicLock lock = IPublicLock(unlockLock);\n        address[] memory _recipients = new address[](1);\n        uint[] memory _expirationTimestamps = new uint[](1);\n        address[] memory _keyManagers = new address[](1);\n        _recipients[0] = msgSender;\n        _expirationTimestamps[0] = 2236879077;\n        _keyManagers[0] = address(this);\n        //bool isManager = lock.isLockManager(address(this));\n        //bool isGranter = lock.isKeyGranter(address(this));\n        lock.grantKeys(_recipients, _expirationTimestamps, _keyManagers);\n    }\n\n    // -----------------------------------------\n    // Superfluid Callbacks\n    // -----------------------------------------\n\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32, /*agreementId*/\n        bytes calldata, /*agreementData*/\n        bytes calldata ctx\n    ) external view override onlyHost onlyExpected(superToken, agreementClass) returns (bytes memory cbdata) {\n        cbdata = new bytes(0);\n    }\n\n    function afterAgreementCreated(\n        ISuperToken, /* superToken */\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata, /*agreementData*/\n        bytes calldata cbdata,\n        bytes calldata ctx\n    ) external override onlyHost returns (bytes memory newCtx) {\n        return _subscribe(ctx, agreementClass, agreementId, cbdata);\n    }\n\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata, /*agreementData*/\n        bytes calldata /*ctx*/\n    ) external view override onlyHost onlyExpected(superToken, agreementClass) returns (bytes memory cbdata) {\n        cbdata = new bytes(0);\n    }\n\n    function afterAgreementUpdated(\n        ISuperToken, /* superToken */\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata, /*agreementData*/\n        bytes calldata cbdata,\n        bytes calldata ctx\n    ) external override onlyHost returns (bytes memory newCtx) {\n        return _updateSubscribe(ctx, agreementClass, agreementId, cbdata);\n    }\n\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32, /*agreementId*/\n        bytes calldata, /*agreementData*/\n        bytes calldata /*ctx*/\n    ) external view override onlyHost returns (bytes memory cbdata) {\n        // According to the app basic law, we should never revert in a termination callback\n        if (!_isSameToken(superToken) || !_isCFAv1(agreementClass)) return abi.encode(true);\n        return abi.encode(false);\n    }\n\n    function afterAgreementTerminated(\n        ISuperToken, /* superToken */\n        address, /* agreementClass */\n        bytes32, /* agreementId */\n        bytes calldata, /*agreementData*/\n        bytes calldata cbdata,\n        bytes calldata ctx\n    ) external override onlyHost returns (bytes memory newCtx) {\n        // According to the app basic law, we should never revert in a termination callback\n        bool shouldIgnore = abi.decode(cbdata, (bool));\n        if (shouldIgnore) return ctx;\n        return _unsubscribe(ctx);\n    }\n\n    function _isSameToken(ISuperToken superToken) private view returns (bool) {\n        return address(superToken) == address(_acceptedToken);\n    }\n\n    function _isCFAv1(address agreementClass) private view returns (bool) {\n        return\n            ISuperAgreement(agreementClass).agreementType() ==\n            keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    // -----------------------------------------\n    // Modifiers\n    // -----------------------------------------\n\n    modifier onlyHost() {\n        require(_msgSender() == address(_host), \"CreatonSuperApp: support only one host\");\n        _;\n    }\n\n    modifier onlyExpected(ISuperToken superToken, address agreementClass) {\n        require(_isSameToken(superToken), \"CreatonSuperApp: not accepted token\");\n        require(_isCFAv1(agreementClass), \"CreatonSuperApp: only CFAv1 supported\");\n        _;\n    }\n\n    modifier onlyCreator() {\n        require(_msgSender() == creator, \"Not the creator\");\n        _;\n    }\n}\n"
    },
    "src/creaton/ICreatonAdmin.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface ICreatonAdmin {\n\n    function treasury() external returns (address);\n\n    function treasuryFee() external returns (int96);\n\n    function nftFactory() external returns (address);\n\n    function registeredUsers(address) external returns (bool);\n\n    function getTrustedForwarder() external view returns (address);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    SuperAppDefinitions,\n    ContextDefinitions,\n    BatchOperation,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n/**\n * @title Host interface\n * @author Superfluid\n * NOTE:\n * This is the central contract of the system where super agreement, super app\n * and super token features are connected.\n *\n * The Superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Time\n     *\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\n     * > Neo: Then why can't I see what happens to her?\n     * > The Oracle: We can never see past the choices we don't understand.\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\n     *************************************************************************/\n\n    function getNow() external view returns (uint256);\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governance address of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n    /**\n     * @dev Governance replaced event\n     * @param oldGov Address of the old governance contract\n     * @param newGov Address of the new governance contract\n     */\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic Initial agreement class code\n     *\n     * Modifiers:\n     *  - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class registered event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type registered\n     * @param code Address of the new agreement\n     */\n    event AgreementClassRegistered(bytes32 agreementType, address code);\n\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * Modifiers:\n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class updated event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type updated\n     * @param code Address of the new agreement\n     */\n    event AgreementClassUpdated(bytes32 agreementType, address code);\n\n    /**\n    * @notice Check if the agreement type is whitelisted\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @notice Get agreement class\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @notice Create a new bitmask by adding a agreement class to it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @notice Create a new bitmask by removing a agreement class from it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n    /**\n     * @dev SuperToken factory updated event\n     * @param newFactory Address of the new factory\n     */\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\n\n    /**\n     * @notice Update the super token logic to the latest\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n    /**\n     * @dev SuperToken logic updated event\n     * @param code Address of the new SuperToken logic\n     */\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev Message sender declares it as a super app\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n    /**\n     * @dev App registered event\n     * @param app Address of jailed app\n     */\n    event AppRegistered(ISuperApp indexed app);\n\n    /**\n     * @dev Message sender declares it as a super app, using a registration key\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     * @param registrationKey The registration key issued by the governance\n     */\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\n\n    /**\n     * @dev Message sender declares app as a super app\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     * NOTE: only factory contracts authorized by governance can register super apps\n     */\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app level\n     * @param app Super app address\n     */\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\n     * @param targetApp The target super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app is allowed to call the target app as downstream app\n     * @param app Super app address\n     * @param targetApp The target super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app allowance and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory cbdata);\n\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory appCtx);\n\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appAllowanceGranted,\n        int256 appAllowanceUsed,\n        ISuperfluidToken appAllowanceToken\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory appCtx);\n\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 appAllowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function ctxUseAllowance(\n        bytes calldata ctx,\n        uint256 appAllowanceWantedMore,\n        int256 appAllowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n    /**\n     * @dev Jail event for the app\n     * @param app Address of jailed app\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param agreementClass The agreement address you are calling\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        returns(bytes memory returnedData);\n\n    /**\n     * @notice Call app action\n     * @dev Main use case is calling app action in a batch call via the host\n     * @param callData The contextual call data\n     *\n     * NOTE: See \"Contextless Call Proxies\" above for more about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev Context Struct\n     *\n     * NOTE on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // callback level\n        uint8 appLevel;\n        // type of call\n        uint8 callType;\n        // the system timestamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app allowance granted\n        uint256 appAllowanceGranted;\n        // app allowance wanted by the app callback\n        uint256 appAllowanceWanted;\n        // app allowance used, allowing negative values over a callback session\n        int256 appAllowanceUsed;\n        // app address\n        address appAddress;\n        // app allowance in super token\n        ISuperfluidToken appAllowanceToken;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes calldata ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation type. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations\n     */\n    function batchCall(Operation[] memory operations) external;\n\n    /**\n     * @dev Batch call function for trusted forwarders (EIP-2771)\n     * @param operations Array of batch operations\n     */\n    function forwardBatchCall(Operation[] memory operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage doesn't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev The superfluid context is valid.\n     modifier validCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
    },
    "src/creaton/unlock/IUnlock.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IUnlock\n{\n\n  /**\n  * @dev Create lock\n  * This deploys a lock for a creator. It also keeps track of the deployed lock.\n  * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\n  * @param _salt an identifier for the Lock, which is unique for the user.\n  * This may be implemented as a sequence ID or with RNG. It's used with `create2`\n  * to know the lock's address before the transaction is mined.\n  */\n  function createLock(\n    uint _expirationDuration,\n    address _tokenAddress,\n    uint _keyPrice,\n    uint _maxNumberOfKeys,\n    string calldata _lockName,\n    bytes12 _salt\n  ) external returns (address);\n\n    /**\n   * This function keeps track of the added GDP, as well as grants of discount tokens\n   * to the referrer, if applicable.\n   * The number of discount tokens granted is based on the value of the referal,\n   * the current growth rate and the lock's discount token distribution rate\n   * This function is invoked by a previously deployed lock only.\n   */\n  function recordKeyPurchase(\n    uint _value,\n    address _referrer // solhint-disable-line no-unused-vars\n  )\n    external;\n\n    function unlockVersion() external pure returns(uint16);\n\n}\n\ninterface  IPublicLock {\n\n    function updateLockSymbol(\n        string calldata _lockSymbol\n    ) external;\n\n    /**\n   * Allows a Lock manager to update the baseTokenURI for this Lock.\n   * @dev Throws if called by other than a Lock manager\n   * @param _baseTokenURI String representing the base of the URI for this lock.\n   */\n  function setBaseTokenURI(\n    string calldata _baseTokenURI\n  ) external;\n\n  /**\n   * @notice Allows a Lock manager to add or remove an event hook\n   */\n  function setEventHooks(\n    address _onKeyPurchaseHook,\n    address _onKeyCancelHook\n  ) external;\n\n  /**\n   * Allows a Lock manager to give a collection of users a key with no charge.\n   * Each key may be assigned a different expiration date.\n   * @dev Throws if called by other than a Lock manager\n   * @param _recipients An array of receiving addresses\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\n   */\n  function grantKeys(\n    address[] calldata _recipients,\n    uint[] calldata _expirationTimestamps,\n    address[] calldata _keyManagers\n  ) external;\n\n  /**\n   * @notice Find the tokenId for a given user\n   * @return The tokenId of the NFT, else returns 0\n   * @param _account The address of the key owner\n  */\n  function getTokenIdFor(\n    address _account\n  ) external view returns (uint);\n\n     /**\n   * Checks if the user has a non-expired key.\n   * @param _user The address of the key owner\n   */\n  function getHasValidKey(\n    address _user\n  ) external view returns (bool);\n\n  /**\n   * @dev allows the key manager to expire a given tokenId\n   * and send a refund to the keyOwner based on the amount of time remaining.\n   * @param _tokenId The id of the key to cancel.\n   */\n  function cancelAndRefund(uint _tokenId) external;\n\n  /**\n   * @dev Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key\n   * @param _keyOwner The key owner to whom we wish to send a refund to\n   * @param amount The amount to refund the key-owner\n   * @dev Throws if called by other than a Lock manager\n   * @dev Throws if _keyOwner does not have a valid key\n   */\n  function expireAndRefundFor(\n    address _keyOwner,\n    uint amount\n  ) external;\n\n  /**\n   * @dev Cancels a key managed by a different user and sends the funds to the keyOwner.\n   * @param _keyManager the key managed by this user will be canceled\n   * @param _v _r _s getCancelAndRefundApprovalHash signed by the _keyManager\n   * @param _tokenId The key to cancel\n   */\n  function cancelAndRefundFor(\n    address _keyManager,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s,\n    uint _tokenId\n  ) external;\n\n/**\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\n  * @param _keyOwner address of the user for whom we search the key\n  * @dev Returns 0 if the owner has never owned a key for this lock\n  */\n  function keyExpirationTimestampFor(\n    address _keyOwner\n  ) external view returns (uint timestamp);\n\n  function addKeyGranter(address account) external;\n\n  function addLockManager(address account) external;\n\n  function isKeyGranter(address account) external view returns (bool);\n\n  function isLockManager(address account) external view returns (bool);\n\n \n\n\n}"
    },
    "src/creaton/NFTFactory.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./Post.sol\";\n\ncontract NFTFactory {\n    constructor() {}\n\n    function createPostNFT(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI,\n        address minter\n    ) public returns (address) {\n        return address(new Post(name, symbol, baseTokenURI, minter));\n    }\n}\n"
    },
    "src/creaton/Post.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract Post is Context, AccessControlEnumerable, ERC721URIStorage, ERC721Burnable, ERC721Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenId;\n    string private _baseTokenURI;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI,\n        address minter\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, minter);\n        _setupRole(MINTER_ROLE, minter);\n        _setupRole(PAUSER_ROLE, minter);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function mint(address to, string memory _metadataURI) public returns (uint256) {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n        _mint(to, _tokenId.current());\n        _setTokenURI(_tokenId.current(), _metadataURI);\n        _tokenId.increment();\n        return (_tokenId.current() - 1);\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _burn(uint256 tokenId) internal virtual override(ERC721URIStorage, ERC721) {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage, ERC721) returns (string memory) {\n        return super.tokenURI(tokenId);\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n\n/**\n * @title Constant Flow Agreement interface\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @notice Get the maximum flow rate allowed with the deposit\n     * @dev The deposit is clipped and rounded down\n     * @param deposit Deposit amount used for creating the flow\n     * @return flowRate The maximum flow rate\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Get the deposit required for creating the flow\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\n     * @param flowRate Flow rate to be tested\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\n     * NOTE:\n     * - if calculated deposit (flowRate * liquidationPeriod) is less\n     *   than the minimum deposit, we use the minimum deposit otherwise\n     *   we use the calculated deposit\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Returns whether it is the patrician period based on host.getNow()\n     * @param account The account we are interested in\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\n     * @return timestamp The value of host.getNow()\n     */\n    function isPatricianPeriodNow(\n        ISuperfluidToken token,\n        address account)\n        public view virtual\n        returns (bool isPatricianPeriod, uint256 timestamp);\n\n    /**\n     * @dev Returns whether it is the patrician period based on timestamp\n     * @param account The account we are interested in\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\n     */\n    function isPatricianPeriod(\n        ISuperfluidToken token,\n        address account,\n        uint256 timestamp)\n        public view virtual\n        returns (bool isPatricianPeriod);\n\n    /**\n     * @notice Create a flow betwen ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * # App callbacks\n     *\n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - A deposit is taken as safety margin for the solvency agents\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Update the flow rate between ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * # App callbacks\n     *\n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Only the flow sender may update the flow rate\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system\n     * - Deposit amount will be adjusted accordingly\n     * - No new gas fee is charged\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver` of `token`\n     * @param token Super token address\n     * @param sender Flow receiver\n     * @param receiver Flow sender\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @notice Get flow data using agreementId\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The deposit amount of the flow\n     * @return owedDeposit The owed deposit amount of the flow\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return timestamp Timestamp of when a flow was last updated for account\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return flowRate Net flow rate\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     *\n     * # App callbacks\n     *\n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Both flow sender and receiver may delete the flow\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement\n     * - Gas fee may be returned to the sender\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n      * @dev Flow updated event\n      * @param token Super token address\n      * @param sender Flow sender address\n      * @param receiver Flow recipient address\n      * @param flowRate Flow rate in amount per second for this flow\n      * @param totalSenderFlowRate Total flow rate in amount per second for the sender\n      * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n      * @param userData The user provided data\n      */\n     event FlowUpdated(\n         ISuperfluidToken indexed token,\n         address indexed sender,\n         address indexed receiver,\n         int96 flowRate,\n         int256 totalSenderFlowRate,\n         int256 totalReceiverFlowRate,\n         bytes userData\n     );\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperApp,\n    SuperAppDefinitions\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\n\nabstract contract SuperAppBase is ISuperApp {\n\n    function beforeAgreementCreated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback - Before Agreement Created\");\n    }\n\n    function afterAgreementCreated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Created\");\n    }\n\n    function beforeAgreementUpdated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback - Before Agreement updated\");\n    }\n\n    function afterAgreementUpdated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Updated\");\n    }\n\n    function beforeAgreementTerminated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback -  Before Agreement Terminated\");\n    }\n\n    function afterAgreementTerminated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Terminated\");\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @title Superfluid governance interface\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * NOTE:\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function batchUpdateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken[] calldata tokens) external;\n    \n    /**\n     * @dev Set configuration as address value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        address value\n    ) external;\n    \n    /**\n     * @dev Set configuration as uint256 value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Clear configuration\n     */\n    function clearConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    ) external;\n\n    /**\n     * @dev Get configuration as address value\n     */\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /**\n     * @dev Get configuration as uint256 value\n     */\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * Note:\n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * NOTE\n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmount The amount the reward recepient account will receive\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     *\n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAccount Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * NOTE:\n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAccount will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the liquidatorAccount will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the rewardAccount will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * NOTE:\n     *\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * NOTE:\n     *\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * NOTE:\n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: SuperToken always uses 18 decimals.\n     *\n     * Note: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * For super token contracts, this value is 1 always\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `data` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n   /**\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n    * spend tokens of `sender`.\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n   ) external;\n\n   /**\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\n    * `account`.\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to received upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are upgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transfer from by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender  The account where the funds is sent from.\n    * @param recipient The recipient of thefunds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n/**\n * @title Super token factory interface\n * @author Superfluid\n */\ninterface ISuperTokenFactory {\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @dev Get the current super token logic used by the factory\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABE\n    }\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     *\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    /**\n      * @dev Super token logic created event\n      * @param tokenLogic Token logic address\n      */\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    /**\n      * @dev Super token created event\n      * @param token Newly created super token address\n      */\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    /**\n      * @dev Custom super token created event\n      * @param token Newly created custom super token address\n      */\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n/**\n * @title SuperApp interface\n * @author Superfluid\n * @dev Be aware of the app being jailed, when the word permitted is used.\n *\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * NOTE:\n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass\n    *          arbitary information to the after-hook callback.\n    *\n    * NOTE:\n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\n/**\n * @title Super app definitions library\n * @author Superfluid\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\n    }\n}\n\n/**\n * @title Context definitions library\n * @author Superfluid\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appLevel, uint8 callType)\n    {\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @title Batch operation library\n * @author Superfluid\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev Superfluid.callAgreement batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes calldata, bytes userdata)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev Superfluid.callAppAction batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\n/**\n * @title Superfluid governance configs library\n * @author Superfluid\n */\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\");\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY = \n        keccak256(\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\");\n\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.trustedForwarder\",\n            forwarder));\n    }\n\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\",\n            deployer,\n            registrationKey));\n    }\n\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.factory\",\n            factory));\n    }\n\n    function decodePPPConfig(uint256 pppConfig) internal pure returns (uint256 liquidationPeriod, uint256 patricianPeriod) {\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\n        patricianPeriod = pppConfig & type(uint32).max;\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\n/**\n * @title ERC20 token info interface\n * @author Superfluid\n * @dev ERC20 standard interface does not specify these functions, but\n *      often the token implementations have them.\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n/**\n * @title ERC20 token with token info interface\n * @author Superfluid\n * @dev Using abstract contract instead of interfaces because old solidity\n *      does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
    },
    "src/creaton/VotingSystem/VoteCreators.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// import \"hardhat-deploy/solc_0.7/proxy/Proxied.sol\";\n// import \"hardhat/console.sol\";\n// import \"@openzeppelin/contracts/access/OwnableBaseRelayRecipient.sol\";\n// import \"@openzeppelin/contracts/token/ERC1155/presets/ERC721PresetMinterPauserAutoId.sol\";\n\nimport {ISuperfluid, ISuperToken, ISuperAgreement, SuperAppDefinitions} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n//    ToDo Figure out if i need these\nimport {IConstantFlowAgreementV1} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\n\nimport {SuperAppBase} from \"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// import {Int96SafeMath} from \"../utils/Int96SafeMath.sol\";\n\n//Top 30 new ppl get stream open to them\n//Manually call fn, once a week\n// is  SuperAppBase Initializable, BaseRelayRecipient\ncontract VoteCreators is SuperAppBase {\n    // using Int96SafeMath for int96;\n    IERC20 public token;\n\n    function initialize(IERC20 _tokenAddress) public {\n        token = IERC20(_tokenAddress);\n    }\n\n    // Represents a single voter\n    struct Voter {\n        address vote;\n        bool voted;\n    }\n\n    struct Nominee {\n        uint256 voteCount;\n    }\n\n    // stores a `Voter` struct for each possible address.\n    mapping(address => Voter) public voters;\n\n    mapping(address => uint256) public voteCount;\n\n    //TODO create mapping for nominee and fix every method accoridingly\n    mapping(address => Nominee) public nominee;\n\n    mapping(address => IERC20) public recoverTokens;\n\n    // Nominee[30] public nominee;\n\n    //This makes sure a user has tokens avaiable in their wallet to vote with\n    modifier AbilityToVote(address _voter) {\n        uint256 balance = token.balanceOf(_voter);\n        require(balance > 0);\n        _;\n    }\n\n    // Give your vote to a user\n    function vote(address proposal) public AbilityToVote(msg.sender) returns (bool) {\n        // require(sender.voted == false);\n        Voter storage sender = voters[msg.sender];\n        //TODO Can calculate top vote within here, create a new fn\n        uint256 votesReceived = token.balanceOf(msg.sender);\n        voteCount[proposal] += votesReceived;\n        sender.vote = proposal;\n        sender.voted = true;\n        // topVote(voteCount);\n        return true;\n    }\n\n    function unVote(address proposal) public {\n        Voter storage sender = voters[msg.sender];\n        sender.vote = proposal;\n        voteCount[proposal] -= 1;\n        //TODO Can calculate top vote within here, create a new fn\n        // topVote(voteCount);\n        // recoverTokens(token);\n    }\n\n    //returns a new nominee list\n\n    // function topVote(uint256 newVote) public returns (uint256 newOrder) {\n    //     Nominee[30] memory newOrder;\n    //     uint256 count = 0;\n    //     // nominee.length - 1\n    //     for (uint256 i = 0; i < 29; i++) {\n    //         if (nominee[i].voteCount > nominee[i + 1].voteCount) {\n    //             newOrder[count] = nominee[i];\n    //             count += 1;\n    //         }\n    //     }\n    //     return newOrder[30];\n    // }\n\n    //Sets when a voting season will start\n    function VotingSeasonBegins(address proposal) internal {}\n\n    //Sets when a voting season will come to an end\n    function VotingSeasonEnds(address proposal) internal {\n        require(AnnounceWinner(proposal));\n        //set all voter.voted to false\n        //\n        //\n        VotingSeasonBegins(proposal);\n    }\n\n    ////\n    function AnnounceWinner(address proposal) public view returns (bool) {\n        // return proposals[proposal];\n    }\n\n    // /////\n    // function recoverTokens(address _token) external onlyCreator {\n    //     IERC20(_token).approve(address(this), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n    //     IERC20(_token).transfer(_msgSender(), IERC20(_token).balanceOf(address(this)));\n    // }\n\n    // -----------------------------------------\n    // Superfluid Logic\n    // -----------------------------------------\n    //Needed for announcewinner fn\n\n    // function _openFlows(\n    //     bytes calldata ctx,\n    //     int256 contract2creator,\n    //     int256 contract2treasury\n    // ) private returns (bytes memory newCtx) {\n    //     // open flow to creator\n    //     (newCtx, ) = _host.callAgreementWithContext(\n    //         _cfa,\n    //         abi.encodeWithSelector(_cfa.createFlow.selector, _acceptedToken, creator, contract2creator, new bytes(0)),\n    //         new bytes(0),\n    //         ctx\n    //     );\n\n    //     // open flow to treasury\n    //     (newCtx, ) = _host.callAgreementWithContext(\n    //         _cfa,\n    //         abi.encodeWithSelector(\n    //             _cfa.createFlow.selector,\n    //             _acceptedToken,\n    //             adminContract.treasury(),\n    //             contract2treasury,\n    //             new bytes(0)\n    //         ),\n    //         new bytes(0),\n    //         newCtx\n    //     );\n    // }\n\n    // function _updateFlows(\n    //     bytes calldata ctx,\n    //     int96 contract2creator,\n    //     int96 contract2treasury\n    // ) private returns (bytes memory newCtx) {\n    //     // update flow to creator\n    //     (newCtx, ) = _host.callAgreementWithContext(\n    //         _cfa,\n    //         abi.encodeWithSelector(_cfa.updateFlow.selector, _acceptedToken, creator, contract2creator, new bytes(0)),\n    //         new bytes(0),\n    //         ctx\n    //     );\n\n    //     // update flow to treasury\n    //     (newCtx, ) = _host.callAgreementWithContext(\n    //         _cfa,\n    //         abi.encodeWithSelector(\n    //             _cfa.updateFlow.selector,\n    //             _acceptedToken,\n    //             adminContract.treasury(),\n    //             contract2treasury,\n    //             new bytes(0)\n    //         ), // call data\n    //         new bytes(0), // user data\n    //         newCtx // ctx\n    //     );\n    // }\n\n    // function _deleteFlows(bytes calldata ctx) private returns (bytes memory newCtx) {\n    //     // delete flow to creator\n    //     (newCtx, ) = _host.callAgreementWithContext(\n    //         _cfa,\n    //         abi.encodeWithSelector(_cfa.deleteFlow.selector, _acceptedToken, address(this), creator, new bytes(0)),\n    //         new bytes(0),\n    //         ctx\n    //     );\n\n    //     // delete flow to treasury\n    //     (newCtx, ) = _host.callAgreementWithContext(\n    //         _cfa,\n    //         abi.encodeWithSelector(\n    //             _cfa.deleteFlow.selector,\n    //             _acceptedToken,\n    //             address(this),\n    //             adminContract.treasury(),\n    //             new bytes(0)\n    //         ), // call data\n    //         new bytes(0), // user data\n    //         newCtx // ctx\n    //     );\n    // }\n}\n"
    },
    "src/creaton/NFTLance/NFTLance.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../dependency/gsn/BaseRelayRecipient.sol\";\n\nimport \"./CreatorCollections.sol\";\nimport \"./FanCollectible.sol\";\n\ncontract NFTLance is Ownable, Pausable, BaseRelayRecipient {\n    mapping (address => address) public creatorsCollections;  // deployer(creator) -> CreatorCollections registry\n    address public fanCollectibleAddress;\n\n    event DeployedCreatorCollection(address creatorCollections, address fanCollectible, string fanCollectibleURI, address token);\n\n    function deployCreatorCollection(string memory _fanCollectibleURI, IERC20 _tokenAddress, address _trustedForwarder) public {\n        FanCollectible _fanCollectible = new FanCollectible(_fanCollectibleURI, _trustedForwarder);\n        CreatorCollections _creatorCollections = new CreatorCollections(_fanCollectible, _tokenAddress, _trustedForwarder);\n\n        fanCollectibleAddress = address(_fanCollectible);\n        _creatorCollections.transferOwnership(_msgSender());\n        _fanCollectible.transferMinter(address(_creatorCollections));\n        _fanCollectible.transferOwnership(_msgSender());\n\n        creatorsCollections[_msgSender()] = address(_creatorCollections);\n\n        trustedForwarder = _trustedForwarder;\n\n        emit DeployedCreatorCollection(address(_creatorCollections), address(_fanCollectible), _fanCollectibleURI, address(_tokenAddress));\n    }\n\n    function setTrustedForwarder(address _trustedForwarder) public onlyOwner {\n        trustedForwarder = _trustedForwarder;\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient)\n        returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, BaseRelayRecipient)\n        returns (bytes memory) {\n        return BaseRelayRecipient._msgData();\n    }\n}"
    },
    "src/creaton/NFTLance/CreatorCollections.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./FanCollectible.sol\";\nimport \"../MarketPoints.sol\";\n\nimport \"../../dependency/gsn/BaseRelayRecipient.sol\";\n\ncontract CreatorCollections is Ownable, Pausable, BaseRelayRecipient {\n    using SafeMath for uint256;\n    uint256 private creatonBalance;\n    uint256 constant CREATON_PERCENTAGE = 2;\n    uint256 constant ARTIST_PERCENTAGE = 100 - CREATON_PERCENTAGE;\n\n    address private newerVersionOfContract; // if this is anything but 0, then there is a newer contract, with, hopefully all of the same data.\n    IERC20 public token; // set to the address of USDC, probably, we don't check...\n    FanCollectible private collectible;\n\n    uint256 private _totalSupply;\n\n    mapping(uint256 => HoldingTokens) private heldBalances; //tokenID => quantity being held.\n    struct HoldingTokens {\n        uint256 quantityHeld;\n        uint256 catalog;\n    }\n    struct Card {\n        uint256[] ids; //Card IDs. would be singular, but each one needs to be unique.\n        // IDS can be generated on the fly!!! saving memory and most importantly, gas fees per call!\n        uint256 price; // Cost of minting a card in USDC\n        uint256 releaseTime; // When the card becomes available for minting\n        uint256 idPointOfNextEmpty;\n    }\n\n    struct Catalog {\n        uint256 feesCollected; // Tally of eth collected from cards that require an additional $ to be minted\n        address artist;\n        string title;\n        string description;\n        uint256 cardsInCatalog;\n        Card[] cardsArray;\n    }\n\n    mapping(address => uint256) public pendingWithdrawals;\n    mapping(uint256 => Catalog) public catalogs;\n    uint256 public catalogsCount;\n\n    MarketPoints public marketPoints;\n\n    event CatalogAdded(uint256 catalogId, string title, string description, address artist, uint256 periodStart);\n    event CardAdded(uint256 cardId, uint256 catalogId, uint256[] tokenIds, uint256 price, uint256 releaseTime);\n    event Purchased(address indexed user, uint256 catalogId, uint256 cardId, uint256 amount);\n    event FanCollectibleDataSet(uint256 catalogId, string cardId, uint256 fanId, string data);\n\n    modifier catalogExists(uint256 id) {\n        require(catalogs[id].artist != address(0), \"Catalog does not exists\");\n        _;\n    }\n\n    modifier cardExists(uint256 catalog, uint256 card) {\n        require(card < catalogs[catalog].cardsArray.length, \"card may not exist\");\n        _;\n    }\n\n    modifier onlyOwnerOrArtist(uint256 catalog) {\n        require(\n            catalogs[catalog].artist == _msgSender() || _msgSender() == owner(),\n            \"You Do Not Have Authorization To Change This\"\n        );\n        _;\n    }\n\n    constructor(\n        FanCollectible _collectibleAddress,\n        IERC20 _tokenAddress, \n        address _trustedForwarder\n    ) {\n        collectible = _collectibleAddress;\n        token = IERC20(_tokenAddress);\n        catalogsCount = 0;\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /**\n    @dev creates a catalog.\n    @param title the title of the catalog\n    @param description some catalog description\n    */\n    function createCatalog(\n        string memory title,\n        string memory description\n    ) public returns (uint256) {\n        uint256 id = catalogsCount;\n        require(catalogs[id].artist == address(0), \"Catalog exists\");\n\n        Catalog storage p = catalogs[id];\n\n        p.artist = _msgSender();\n        p.title = title;\n        p.description = description;\n\n        catalogsCount++;\n\n        emit CatalogAdded(id, title, description, _msgSender(), block.timestamp);\n        return id;\n    }\n\n    /**\n     * @dev creates a card (inside a FanCollectible) for the given catalog\n     * @param catalog the catalog id to add it to\n     * @param supply the supply of these to be made\n     * @param price the cost of each item in price\n     * @param releaseTime the time you can start buying these\n     */\n    function createCard(\n        uint256 catalog,\n        uint256 supply,\n        uint256 price,\n        uint256 releaseTime\n    ) public onlyOwnerOrArtist(catalog) catalogExists(catalog) {\n        uint256[] memory tokenIdsGenerated = new uint256[](supply);\n        for (uint256 x = 0; x < supply; x++) {\n            tokenIdsGenerated[x] = collectible.create(\"\", \"\"); //URI and Data seem important... and most likely are! well! HAVE FUN!\n            //so this generates all the token IDs that will be used, and makes each one unique.\n        }\n        catalogs[catalog].cardsArray.push(Card(tokenIdsGenerated, price, releaseTime, 0));\n        uint256 cardId = catalogs[catalog].cardsInCatalog;\n        catalogs[catalog].cardsInCatalog++;\n\n        emit CardAdded(cardId, catalog, tokenIdsGenerated, price, releaseTime);\n    }\n    \n    function purchase(uint256 _catalogID, uint256 _cardID)\n        public\n        whenNotPaused\n        cardExists(_catalogID, _cardID)\n        returns (uint256)\n    {\n        Catalog storage p = catalogs[_catalogID];\n        Card memory c = p.cardsArray[_cardID];\n        require(block.timestamp >= c.releaseTime, \"card not open\");\n\n        require(c.idPointOfNextEmpty < c.ids.length, \"Card Is Sold Out\");\n\n        _totalSupply = _totalSupply.add(c.price);\n\n        token.transferFrom(_msgSender(), address(this), c.price);\n\n        p.feesCollected = p.feesCollected.add(c.price);\n        \n        collectible.mint(_msgSender(), c.ids[c.idPointOfNextEmpty], \"\");\n\n        heldBalances[c.ids[c.idPointOfNextEmpty]].quantityHeld = c.price;\n        heldBalances[c.ids[c.idPointOfNextEmpty]].catalog = _catalogID;\n\n        c.idPointOfNextEmpty++;\n        catalogs[_catalogID].cardsArray[_cardID].idPointOfNextEmpty = c.idPointOfNextEmpty;\n\n        emit Purchased(_msgSender(), _catalogID, _cardID, c.price);\n\n        return c.ids[c.idPointOfNextEmpty - 1];\n    }\n\n    /**\n    @dev return the data for a FanCollectible and then get the money they have staked.\n    @param _catalog the catalog id\n    @param _fanID the id of the FanCollectible you want to get the data for.\n    @param _data the URI to the data for the FanCollectible.\n    */\n    function setFanCollectibleData(\n        uint256 _catalog,\n        string memory _cardId,\n        uint256 _fanID,\n        string calldata _data\n    ) public {\n        require(_msgSender() == catalogs[_catalog].artist, \"not the artist\");\n\n        pendingWithdrawals[_msgSender()] = pendingWithdrawals[_msgSender()].add(heldBalances[_fanID].quantityHeld);\n        heldBalances[_fanID].quantityHeld = 0;\n\n        collectible.finalizedByArtist(_fanID, _data);\n        //TODO: have an emit here that changes the data at the link of the fan collectible to this data.\n\n        emit FanCollectibleDataSet(_catalog, _cardId, _fanID, _data);\n    }\n\n    /**\n     * @dev called by the artist for them to get their money out of the contract!   \n     */\n    function withdrawFee() public {\n        uint256 amount = pendingWithdrawals[_msgSender()].mul(ARTIST_PERCENTAGE).div(100);\n        require(amount > 0, \"nothing to withdraw\");\n        creatonBalance = creatonBalance.add(pendingWithdrawals[_msgSender()].mul(CREATON_PERCENTAGE).div(100));\n        pendingWithdrawals[_msgSender()] = 0;\n        token.transfer(_msgSender(), amount);\n    }\n\n    function getCardReleaseTime(uint256 catalog, uint256 card) public view returns (uint256) {\n        return catalogs[catalog].cardsArray[card].releaseTime;\n    }\n\n    function getTotalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function getCardsArray(uint256 id) public view returns (Card[] memory) {\n        return catalogs[id].cardsArray;\n    }\n\n    /**\n    @dev returns the address of a newer version of this contract\n    @return newerVersionOfContract, the address of the newer contract.\n     */\n    function getNewerContract() public view returns (address) {\n        return newerVersionOfContract;\n    }\n\n    /**\n    @dev sets a new contract as the newerVersionOfContract, if theres a newer contract address, you should use that.\n    @param _newerContract the address of the newer version of this contract.  \n    */\n    function setNewerContract(address _newerContract, string calldata versionName) public onlyOwner {\n        //TODO: make this use an emit event to let the frontend team know theres a newer version of this contract.\n        newerVersionOfContract = _newerContract;\n    }\n\n    function setMarketPoints(MarketPoints _marketPoints) public onlyOwner {\n        marketPoints = _marketPoints;\n    }\n\n    function getCreatonCut(address recipient) public onlyOwner {\n        token.transfer(recipient, creatonBalance);\n        creatonBalance = 0;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _unpause();\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient)\n        returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, BaseRelayRecipient)\n        returns (bytes memory) {\n        return BaseRelayRecipient._msgData();\n    }\n}\n"
    },
    "src/creaton/NFTLance/FanCollectible.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../dependency/gsn/BaseRelayRecipient.sol\";\n\ncontract FanCollectible is ERC1155, Ownable, BaseRelayRecipient  {\n    uint256 private _currentTokenID = 0;\n    address private _minter; //I was wrong! this is actually *very* important, and needs to be the address of the controlling contract!\n    \n    enum states {\n        UNPURCHASED, \n        PURCHASED, \n        PURCHASED_AND_FINALIZED,\n        CONVERTED_TO_ZORA\n    }\n\n    mapping(uint256 => states) private stateOfCollectibles; //tokenID to state of collectible.\n    mapping(uint256 => string) private collectibleRequestData; //tokenID to data about collectible request.\n    mapping(uint256 => string) private collectibleURI; //tokenID URI\n\n    event MinterTransferred(address indexed previousMinter, address indexed newMinter);\n    event Minted(address to, uint256 id, bytes data);\n    event RequestDataSet(string cardID, uint256 indexed tokenID, string collectibleRequestData);\n\n    constructor(string memory _uri, address _trustedForwarder) ERC1155(_uri) {\n        _minter = msg.sender;\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the minter.\n     */\n    modifier onlyMinter() {\n        require(minter() == msg.sender, \"Mintable: caller is not the minter\");\n        _;\n    }\n\n    function minter() public view virtual returns (address) {\n        return _minter;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferMinter(address newMinter) public virtual onlyOwner {\n        require(newMinter != address(0), \"Minter: new minter is the zero address\");\n        emit MinterTransferred(_minter, newMinter);\n        _minter = newMinter;\n    }\n\n    /**\n     * @dev Mints some amount of tokens to an address\n     * @param _to          Address of the future owner of the token\n     * @param _id          Token ID to mint\n     * @param _data        Data to pass if receiver is contract\n     */\n    function mint(\n        address _to,\n        uint256 _id,\n        bytes memory _data\n    ) public onlyMinter() {\n        uint256 tokenId = _id;\n        require(stateOfCollectibles[_id] == states.UNPURCHASED, \"Max supply reached\");\n        _mint(_to, _id, 1, _data);\n        stateOfCollectibles[_id] = states.PURCHASED;\n\n        emit Minted(_to, _id, _data);\n    }\n\n    /**\n     * @dev Creates a new token type and assigns _initialSupply to an address\n     * @param _uri Optional URI for this token type\n     * @param _data Optional data to pass if receiver is contract\n     * @return tokenId The newly created token ID\n     */\n    function create(\n        string calldata _uri,\n        bytes calldata _data\n    ) external onlyMinter() returns (uint256 tokenId) {\n        uint256 _id = _getNextTokenID();\n        _incrementTokenTypeId();\n        stateOfCollectibles[_id] = states.UNPURCHASED;\n\n        if (bytes(_uri).length > 0) {\n            emit URI(_uri, _id);\n        }\n\n        return _id;\n    }\n\n    /**\n     * @dev calculates the next token ID based on value of _currentTokenID\n     * @return uint256 for the next token ID\n     */\n    function _getNextTokenID() private view returns (uint256) {\n        return _currentTokenID+1;\n    }\n\n    /**\n     * @dev increments the value of _currentTokenID\n     */\n    function _incrementTokenTypeId() private {\n        _currentTokenID++;\n    }\n\n    function getCurrentTokenID() public view returns (uint256) {\n        return _currentTokenID;\n    }\n\n    /**\n     * @dev sets the request data for a collectible\n     * @param cardId Card ID the token belongs to\n     * @param _id Token ID to set data for\n     * @param _request Data to set (graphQL on ceramic's meta data)\n    */\n    function setRequestData(string memory cardId, uint256 _id, string memory _request) public {\n        require(stateOfCollectibles[_id] != states.PURCHASED_AND_FINALIZED, \"Token has already been finalized\");\n        // require(stateOfCollectibles[_id] != states.UNPURCHASED, \"Token not purchased\");\n        require(balanceOf(_msgSender(), _id) >=1, \"Token not owned by sender\");\n\n        collectibleRequestData[_id] = _request;\n        emit RequestDataSet(cardId, _id, _request);\n    }\n\n    /**\n    @dev sets the data for a token after it has been approved by the artist\n    @param _id Token ID to set data for\n    @param _data the data link.\n    */\n    function finalizedByArtist(uint256 _id, string memory _data) onlyMinter() public {\n        require(stateOfCollectibles[_id] == states.PURCHASED, \"Token not purchased\");\n        stateOfCollectibles[_id] = states.PURCHASED_AND_FINALIZED;\n        collectibleURI[_id] = _data;\n    }\n\n    function uri(uint256 _tokenId) public view virtual override returns (string memory) {\n        return collectibleURI[_tokenId];\n    }\n\n    function versionRecipient() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient)\n        returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, BaseRelayRecipient)\n        returns (bytes memory) {\n        return BaseRelayRecipient._msgData();\n    }\n}\n"
    },
    "src/creaton/MarketPoints.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"hardhat/console.sol\";\n\ncontract MarketPoints is Ownable {\n    // using safeMath for uint256;\n\n    //keeping track of the points on the site, this is for internal uses mostly\n    mapping(address => uint256) private _siteWidePoints; //address of the user => points the user has for the entire site.\n    mapping(address => uint256) private _siteWideLevel; //address of the user => level the user has for the entire site.\n\n    mapping(address => mapping(address => int128)) private _userPoints; //address of the creator => address of the user => points the user has for the Creator.\n    mapping(address => mapping(address => int128)) private _userLevel; //address of the creator => address of the user => level the user has for the Creator.\n    \n    mapping(address => bytes32) private artistVectorPoints; //address of creator to the number of points it takes to get to that level\n    // Ok, so, this fixed point array is actually a vector, with the nth point representing artistVectorPoints[n](x^n) == points for level x\n\n    \n    IERC20 token;\n    constructor(IERC20 _tokenAddress){\n        token = _tokenAddress;\n    }\n\n    address NFTLanceAddress;\n    function setFanServiceAddress(address _NFTLanceAddress) public onlyOwner{\n        NFTLanceAddress = _NFTLanceAddress;\n    }\n    modifier onlyFanService{\n        require(msg.sender == NFTLanceAddress);\n        _;\n    }\n\n    /**\n     * @dev tips the artist the given amount and gives the user points.\n     * @param artist the address of the artist\n     * @param amount the amount the user would like to tip.\n     */\n    function tipArtist (address artist, uint256 amount) public {\n        if(token.transferFrom(_msgSender(), artist, amount)){\n            // console.log(uint256(_userPoints[artist][_msgSender()]));//useful for testing!\n            // console.log(uint256(uint128((amount/(5000000000000000)))));\n\n            //the amount tipped is converted to cents, then divided by 3, just kinda makes it feel more random.\n            //hard coded to improve performance.\n            _userPoints[artist][_msgSender()] += int128(uint128(amount/(3000000000000000)));\n        }\n    }\n\n    /**\n     * @dev calculates the level of the user. Warning, only accurate to within one level up!\n     * @param creator the address of the creator.\n     * @param user the address of the user.\n     * @return the level of the user.\n     */\n    function getLevel(address creator, address user) public view returns (int128){\n        int128 pointsForNextLevel = getPointsForLevel(creator, _userLevel[creator][user]+1);\n        if (pointsForNextLevel<=int128(_userPoints[creator][user])) {\n            return _userLevel[creator][user]+1;\n        }\n        return _userLevel[creator][user];\n    }\n\n    /**\n     * @dev returns the current level of the user, un calculated! use in conjunction with getLevel() to see if the user should level!\n     * @param creator the address of the creator.\n     * @param user the address of the user.\n     * @return the level of the user.\n     */\n    function getCurrentLevel(address creator, address user) public view returns (int128){\n        return _userLevel[creator][user];\n    }\n\n    function getCurrentPoints(address creator, address user) public view returns (int128){\n        return _userPoints[creator][user];\n    }\n\n    /**\n     * @dev calculates the amount of points it takes for a user to reach a certain level\n     * @param creator the creator address you would like to check\n     * @param level the level you would like to check\n     * @return the amount of points it takes to reach the level\n    */\n    function getPointsForLevel(address creator, int128 level) public view returns (int128){\n        int128 nextLevelModified = level;\n        //you cant explicitly convert from a byte to an int16, so we go through uint8 first\n        int128 pointsForLevel = int16(uint16(uint8(artistVectorPoints[creator][0]))<<8 | uint16(uint8(artistVectorPoints[creator][1])));\n\n        //yes, i could be a uint8, but pointers always run faster than custom sized types.\n        for (uint256 i = 2; i < 32; i+=2) {//you remove the first two bytes, so we start at 2, then increment by two to handle the int16s\n            // console.log(uint256(artistVectorPoints[creator][i+1]));\n            //you can only do one casting at a time, idk why.\n            int16 power = int16(uint16(uint8(artistVectorPoints[creator][i]))<<8 | uint16(uint8(artistVectorPoints[creator][i+1])));\n\n            pointsForLevel += power * nextLevelModified;\n            nextLevelModified*=level;//basically just raise it to another power.\n        }\n        // console.log(uint256(uint128(level)));\n        // console.log(uint256(uint128(pointsForLevel)));\n        // console.log();\n        return pointsForLevel;\n    }\n\n    /**\n     * @dev sets the leveling math values for an artist.\n     * @param levels the 32 uint8s, With the first byte representing x^0...\n     */\n    function setArtistLevels(bytes32 levels) public{\n        // console.log(uint128(levels));//only ever use this remembering that you have to convert the numbers back to hex!\n        artistVectorPoints[_msgSender()] = levels;\n    }\n\n    /**\n     * @dev level up, should only be used when leveling up.\n     * @param creator the address of the creator you would like to level up with\n     * @return true if the user leveled up!\n    */\n    function levelUp(address creator) public returns (bool){\n        //TODO: have this give a reward if the user levels up!\n        if (getPointsForLevel(creator, _userLevel[creator][_msgSender()]+1)<=int128(_userPoints[creator][_msgSender()])) {\n            _userLevel[creator][_msgSender()]++;\n            return true;\n        }\n        return false;\n    }\n\n    function canLevelUp(address creator, address user) public view returns (bool){\n        return getPointsForLevel(creator, _userLevel[creator][user]+1)<=int128(_userPoints[creator][user]);\n    }\n\n\n}\n\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "src/creaton/Rewards.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"hardhat/console.sol\";\n\ncontract Rewards is Ownable {\n  using SafeMath for uint256;\n    \n    mapping(address => uint256) private balances; //address => amount owed.\n    IERC20 public token;\n\n    constructor(\n        IERC20 _tokenAddress\n    ) public {\n        token = IERC20(_tokenAddress);\n    }\n\n    event UserRedeemed(address indexed user, uint256 amount);\n    event NewReward(address indexed user, uint256 amount);\n\n    function redeem(address user) public {\n        require(token.balanceOf(address(this)) > balances[user], \"Contract Needs More Funds\");\n        token.transfer(user, balances[user]);\n        emit UserRedeemed(user, balances[user]);\n        balances[user] = 0;\n    }\n    function setRewards(address user, uint256 amount)public onlyOwner {\n        //you don't pay this, since this is run Hundreds of times. Pay all at once.\n        balances[user] += amount;\n        emit NewReward(user, balances[user]);\n    }\n    function getRewards(address user) public view returns (uint256) {\n        return balances[user];\n    }\n\n}"
    },
    "src/creaton/RedeemCreate.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../dependency/sablier/interfaces/ISablier.sol\";\nimport \"hardhat/console.sol\";\n\n// \"dependency/sablier/ISablier.sol\"\n// \"creaton/RedeemCreate.sol\"\n\ncontract RedeemCreate{\n    ISablier sablier;\n    address create;\n    ERC20 protoTeam;\n    ERC20 protoAdvisor;\n    ERC20 protoAmbassador;\n    ERC20 ProtoPrivate;\n    ERC20 protoSeed;\n    uint256 days180 = 180*86400;\n\n    event streamStarted(address tokenType, uint256 amount, uint256 startTime, uint256 endTime, address recipient, uint256 streamId);\n\n    constructor(address sablierAddress, address _create, address _protoTeam, address _protoAdvisor, address _protoAmbassador, address _ProtoPrivate, address _protoSeed){\n        //ISablier(0xAC18EAB6592F5fF6F9aCf5E0DCE0Df8E49124C06)\n        sablier = ISablier(sablierAddress);\n        create = _create;\n        protoTeam = ERC20(_protoTeam);\n        protoAdvisor = ERC20(_protoAdvisor);\n        protoAmbassador = ERC20(_protoAmbassador);\n        ProtoPrivate = ERC20(_ProtoPrivate);\n        protoSeed = ERC20(_protoSeed);\n\n    }\n\n    function startTeamStream(uint256 amountPutIn) public returns (uint256 streamID){\n        //sender, amount, create Address, now, to two years from now\n        protoTeam.transferFrom(msg.sender, address(this), amountPutIn);\n\n\n        uint256 roundOver = amountPutIn%(86400*365*2);\n        ERC20(create).approve(address(sablier), amountPutIn);\n        uint256 streamID = sablier.createStream(msg.sender, amountPutIn - roundOver, create, block.timestamp + days180, block.timestamp + 86400*365*2 + days180);\n        console.log(streamID);\n        emit streamStarted(address(protoTeam), amountPutIn - roundOver, block.timestamp+days180, block.timestamp+86400*365*2+days180, msg.sender, streamID);\n\n        if (roundOver > 0){\n            uint256 overflowStream = sablier.createStream(msg.sender, roundOver, create, block.timestamp + 86400*365*2 + days180, block.timestamp + 86400*365*2 + days180+1);\n            console.log(overflowStream);\n        }\n        return streamID;\n    }\n\n    function startAdvisorStream(uint256 amountPutIn) public returns (uint256 streamID){\n        protoAdvisor.transferFrom(msg.sender, address(this), amountPutIn);\n\n        uint256 roundOver = amountPutIn%(86400*304);\n        ERC20(create).approve(address(sablier), amountPutIn);\n        uint256 streamID = sablier.createStream(msg.sender, amountPutIn - roundOver, create, block.timestamp + days180, block.timestamp + 86400*304 + days180);\n        //86400 for seconds in a day, 304 for 10 months\n        console.log(streamID);\n        emit streamStarted(address(protoAdvisor), amountPutIn - roundOver, block.timestamp+days180, block.timestamp+86400*304+days180, msg.sender, streamID);\n\n        if (roundOver > 0){\n            uint256 overflowStream = sablier.createStream(msg.sender, roundOver, create, block.timestamp+86400*304+days180, block.timestamp+86400*304+days180 + 1);\n            console.log(overflowStream);\n        }\n        return streamID;\n    }\n    \n    function startAmbassadorStream(uint256 amountPutIn) public returns (uint256 streamID){\n        protoAmbassador.transferFrom(msg.sender, address(this), amountPutIn);\n\n        uint256 roundOver = amountPutIn%(86400*304);\n        ERC20(create).approve(address(sablier), amountPutIn);\n        uint256 streamID = sablier.createStream(msg.sender, amountPutIn - roundOver, create, block.timestamp + 86400*30, block.timestamp + 86400*304 + 86400*30);\n        //86400 for seconds in a day, 304 for 10 months\n        console.log(streamID);\n        emit streamStarted(address(protoAmbassador), amountPutIn - roundOver, block.timestamp+86400*30, block.timestamp+86400*304+86400*30, msg.sender, streamID);\n\n        if (roundOver>0){\n            console.log(sablier.createStream(msg.sender, roundOver, create, block.timestamp + 86400*304, block.timestamp + 86400*304+1));\n        }\n\n        return streamID;\n    }\n\n    function startSeedStream(uint256 amountPutIn) public returns (uint256 streamID){\n        //sender, amount, create Address, now, to two years from now\n        protoSeed.transferFrom(msg.sender, address(this), amountPutIn);\n        uint256 roundOver = amountPutIn%(86400*243);\n\n        ERC20(create).approve(address(sablier), amountPutIn);\n        uint256 streamID = sablier.createStream(msg.sender, amountPutIn - roundOver, create, block.timestamp + 86400*30, block.timestamp + 86400*(243+30));\n        //86400 for seconds in a day\n        console.log(streamID);\n        emit streamStarted(address(protoSeed), amountPutIn - roundOver, block.timestamp+86400*30, block.timestamp+86400*(243+30), msg.sender, streamID);\n\n        if (roundOver>0){\n            emit streamStarted(\n                address(protoSeed),\n                roundOver,\n                block.timestamp + 86400*(243+30),\n                block.timestamp + 86400*(243+30)+1,\n                msg.sender, \n                sablier.createStream(\n                    msg.sender, \n                    roundOver, \n                    create, \n                    block.timestamp + 86400*(243+30), \n                    block.timestamp + 86400*(243+30)+1));\n        }\n        return streamID;\n    }\n\n    function startPrivateStream(uint256 amountPutIn) public returns (uint256 streamID){\n        //sender, amount, create Address, now, to two years from now\n        ProtoPrivate.transferFrom(msg.sender, address(this), amountPutIn);\n\n        ERC20(create).approve(address(sablier), amountPutIn);\n        uint256 streamID = sablier.createStream(msg.sender, amountPutIn, create, block.timestamp + 86400*30, block.timestamp + 86400*(121+30));\n        //86400 for seconds in a day, 152 for 4 months, starting one month from now.\n        console.log(streamID);\n        emit streamStarted(address(ProtoPrivate), amountPutIn, block.timestamp+86400*30, block.timestamp+86400*(121+30), msg.sender, streamID);\n        return streamID;\n    }\n}\n"
    },
    "src/dependency/sablier/interfaces/ISablier.sol": {
      "content": "pragma solidity >=0.5.17;\n// https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/interfaces/ISablier.sol\n//i know, i hate importing like this too, but it needed to be done.\n/**\n * @title ISablier\n * @author Sablier\n */\ninterface ISablier {\n    /**\n     * @notice Emits when a stream is successfully created.\n     */\n    event CreateStream(\n        uint256 indexed streamId,\n        address indexed sender,\n        address indexed recipient,\n        uint256 deposit,\n        address tokenAddress,\n        uint256 startTime,\n        uint256 stopTime\n    );\n\n    /**\n     * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\n     */\n    event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\n     */\n    event CancelStream(\n        uint256 indexed streamId,\n        address indexed sender,\n        address indexed recipient,\n        uint256 senderBalance,\n        uint256 recipientBalance\n    );\n\n    function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\n\n    function getStream(uint256 streamId)\n        external\n        view\n        returns (\n            address sender,\n            address recipient,\n            uint256 deposit,\n            address token,\n            uint256 startTime,\n            uint256 stopTime,\n            uint256 remainingBalance,\n            uint256 ratePerSecond\n        );\n\n    function createStream(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime)\n        external\n        returns (uint256 streamId);\n\n    function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\n\n    function cancelStream(uint256 streamId) external returns (bool);\n}"
    },
    "src/dependency/sablier/Sablier.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./CarefulMath.sol\";\n\nimport \"./interfaces/ISablier.sol\";\nimport \"./Types.sol\";\n\n/**\n * @title Sablier\n * @author Sablier\n * @notice Money streaming.\n */\ncontract Sablier is ISablier, ReentrancyGuard, CarefulMath {\n    // using SafeERC20 for IERC20;\n\n    /*** Storage Properties ***/\n\n    /**\n     * @notice Counter for new stream ids.\n     */\n    uint256 public nextStreamId;\n\n    /**\n     * @dev The stream objects identifiable by their unsigned integer ids.\n     */\n    mapping(uint256 => Types.Stream) private streams;\n\n    /*** Modifiers ***/\n\n    /**\n     * @dev Throws if the caller is not the sender of the recipient of the stream.\n     */\n    modifier onlySenderOrRecipient(uint256 streamId) {\n        require(\n            msg.sender == streams[streamId].sender || msg.sender == streams[streamId].recipient,\n            \"caller is not the sender or the recipient of the stream\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Throws if the provided id does not point to a valid stream.\n     */\n    modifier streamExists(uint256 streamId) {\n        require(streams[streamId].isEntity, \"stream does not exist\");\n        _;\n    }\n\n    /*** Contract Logic Starts Here */\n\n    constructor() public {\n        nextStreamId = 100000;\n    }\n\n    /*** View Functions ***/\n\n    /**\n     * @notice Returns the stream with all its properties.\n     * @dev Throws if the id does not point to a valid stream.\n     * @param streamId The id of the stream to query.\n     */\n    function getStream(uint256 streamId)\n        override\n        external\n        view\n        streamExists(streamId)\n        returns (\n            address sender,\n            address recipient,\n            uint256 deposit,\n            address tokenAddress,\n            uint256 startTime,\n            uint256 stopTime,\n            uint256 remainingBalance,\n            uint256 ratePerSecond\n        )\n    {\n        sender = streams[streamId].sender;\n        recipient = streams[streamId].recipient;\n        deposit = streams[streamId].deposit;\n        tokenAddress = streams[streamId].tokenAddress;\n        startTime = streams[streamId].startTime;\n        stopTime = streams[streamId].stopTime;\n        remainingBalance = streams[streamId].remainingBalance;\n        ratePerSecond = streams[streamId].ratePerSecond;\n    }\n\n    /**\n     * @notice Returns either the delta in seconds between `block.timestamp` and `startTime` or\n     *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\n     *  `startTime`, it returns 0.\n     * @dev Throws if the id does not point to a valid stream.\n     * @param streamId The id of the stream for which to query the delta.\n     */\n    function deltaOf(uint256 streamId) public view streamExists(streamId) returns (uint256 delta) {\n        Types.Stream memory stream = streams[streamId];\n        if (block.timestamp <= stream.startTime) return 0;\n        if (block.timestamp < stream.stopTime) return block.timestamp - stream.startTime;\n        return stream.stopTime - stream.startTime;\n    }\n\n    struct BalanceOfLocalVars {\n        MathError mathErr;\n        uint256 recipientBalance;\n        uint256 withdrawalAmount;\n        uint256 senderBalance;\n    }\n\n    /**\n     * @notice Returns the available funds for the given stream id and address.\n     * @dev Throws if the id does not point to a valid stream.\n     * @param streamId The id of the stream for which to query the balance.\n     * @param who The address for which to query the balance.\n     */\n    function balanceOf(uint256 streamId, address who) override public view streamExists(streamId) returns (uint256 balance) {\n        Types.Stream memory stream = streams[streamId];\n        BalanceOfLocalVars memory vars;\n\n        uint256 delta = deltaOf(streamId);\n        (vars.mathErr, vars.recipientBalance) = mulUInt(delta, stream.ratePerSecond);\n        require(vars.mathErr == MathError.NO_ERROR, \"recipient balance calculation error\");\n\n        /*\n         * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\n         * We have to subtract the total amount withdrawn from the amount of money that has been\n         * streamed until now.\n         */\n        if (stream.deposit > stream.remainingBalance) {\n            (vars.mathErr, vars.withdrawalAmount) = subUInt(stream.deposit, stream.remainingBalance);\n            assert(vars.mathErr == MathError.NO_ERROR);\n            (vars.mathErr, vars.recipientBalance) = subUInt(vars.recipientBalance, vars.withdrawalAmount);\n            /* `withdrawalAmount` cannot and should not be bigger than `recipientBalance`. */\n            assert(vars.mathErr == MathError.NO_ERROR);\n        }\n\n        if (who == stream.recipient) return vars.recipientBalance;\n        if (who == stream.sender) {\n            (vars.mathErr, vars.senderBalance) = subUInt(stream.remainingBalance, vars.recipientBalance);\n            /* `recipientBalance` cannot and should not be bigger than `remainingBalance`. */\n            assert(vars.mathErr == MathError.NO_ERROR);\n            return vars.senderBalance;\n        }\n        return 0;\n    }\n\n    /*** Public Effects & Interactions Functions ***/\n\n    struct CreateStreamLocalVars {\n        MathError mathErr;\n        uint256 duration;\n        uint256 ratePerSecond;\n    }\n\n    /**\n     * @notice Creates a new stream funded by `msg.sender` and paid towards `recipient`.\n     * @dev Throws if the recipient is the zero address, the contract itself or the caller.\n     *  Throws if the deposit is 0.\n     *  Throws if the start time is before `block.timestamp`.\n     *  Throws if the stop time is before the start time.\n     *  Throws if the duration calculation has a math error.\n     *  Throws if the deposit is smaller than the duration.\n     *  Throws if the deposit is not a multiple of the duration.\n     *  Throws if the rate calculation has a math error.\n     *  Throws if the next stream id calculation has a math error.\n     *  Throws if the contract is not allowed to transfer enough tokens.\n     *  Throws if there is a token transfer failure.\n     * @param recipient The address towards which the money is streamed.\n     * @param deposit The amount of money to be streamed.\n     * @param tokenAddress The ERC20 token to use as streaming currency.\n     * @param startTime The unix timestamp for when the stream starts.\n     * @param stopTime The unix timestamp for when the stream stops.\n     * @return The uint256 id of the newly created stream.\n     */\n    function createStream(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime)\n        public\n        override\n        returns (uint256)\n    {\n        require(recipient != address(0x00), \"stream to the zero address\");\n        require(recipient != address(this), \"stream to the contract itself\");\n        require(recipient != msg.sender, \"stream to the caller\");\n        require(deposit > 0, \"deposit is zero\");\n        require(startTime >= block.timestamp, \"start time before block.timestamp\");\n        require(stopTime > startTime, \"stop time before the start time\");\n\n        CreateStreamLocalVars memory vars;\n        (vars.mathErr, vars.duration) = subUInt(stopTime, startTime);\n        /* `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know `stopTime` is higher than `startTime`. */\n        assert(vars.mathErr == MathError.NO_ERROR);\n\n        /* Without this, the rate per second would be zero. */\n        require(deposit >= vars.duration, \"deposit smaller than time delta\");\n\n        /* This condition avoids dealing with remainders */\n        require(deposit % vars.duration == 0, \"deposit not multiple of time delta\");\n\n        (vars.mathErr, vars.ratePerSecond) = divUInt(deposit, vars.duration);\n        /* `divUInt` can only return MathError.DIVISION_BY_ZERO but we know `duration` is not zero. */\n        assert(vars.mathErr == MathError.NO_ERROR);\n\n        /* Create and store the stream object. */\n        uint256 streamId = nextStreamId;\n        streams[streamId] = Types.Stream({\n            remainingBalance: deposit,\n            deposit: deposit,\n            isEntity: true,\n            ratePerSecond: vars.ratePerSecond,\n            recipient: recipient,\n            sender: msg.sender,\n            startTime: startTime,\n            stopTime: stopTime,\n            tokenAddress: tokenAddress\n        });\n\n        /* Increment the next stream id. */\n        (vars.mathErr, nextStreamId) = addUInt(nextStreamId, uint256(1));\n        require(vars.mathErr == MathError.NO_ERROR, \"next stream id calculation error\");\n\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), deposit);\n        emit CreateStream(streamId, msg.sender, recipient, deposit, tokenAddress, startTime, stopTime);\n        return streamId;\n    }\n\n    /**\n     * @notice Withdraws from the contract to the recipient's account.\n     * @dev Throws if the id does not point to a valid stream.\n     *  Throws if the caller is not the sender or the recipient of the stream.\n     *  Throws if the amount exceeds the available balance.\n     *  Throws if there is a token transfer failure.\n     * @param streamId The id of the stream to withdraw tokens from.\n     * @param amount The amount of tokens to withdraw.\n     */\n    function withdrawFromStream(uint256 streamId, uint256 amount)\n        override\n        external\n        nonReentrant\n        streamExists(streamId)\n        onlySenderOrRecipient(streamId)\n        returns (bool)\n    {\n        require(amount > 0, \"amount is zero\");\n        Types.Stream memory stream = streams[streamId];\n\n        uint256 balance = balanceOf(streamId, stream.recipient);\n        require(balance >= amount, \"amount exceeds the available balance\");\n\n        MathError mathErr;\n        (mathErr, streams[streamId].remainingBalance) = subUInt(stream.remainingBalance, amount);\n        /**\n         * `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know that `remainingBalance` is at least\n         * as big as `amount`.\n         */\n        assert(mathErr == MathError.NO_ERROR);\n\n        if (streams[streamId].remainingBalance == 0) delete streams[streamId];\n\n        IERC20(stream.tokenAddress).transfer(stream.recipient, amount);\n        emit WithdrawFromStream(streamId, stream.recipient, amount);\n        return true;\n    }\n\n    /**\n     * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\n     * @dev Throws if the id does not point to a valid stream.\n     *  Throws if the caller is not the sender or the recipient of the stream.\n     *  Throws if there is a token transfer failure.\n     * @param streamId The id of the stream to cancel.\n     * @return bool true=success, otherwise false.\n     */\n    function cancelStream(uint256 streamId)\n        override\n        external\n        nonReentrant\n        streamExists(streamId)\n        onlySenderOrRecipient(streamId)\n        returns (bool)\n    {\n        Types.Stream memory stream = streams[streamId];\n        uint256 senderBalance = balanceOf(streamId, stream.sender);\n        uint256 recipientBalance = balanceOf(streamId, stream.recipient);\n\n        delete streams[streamId];\n\n        IERC20 token = IERC20(stream.tokenAddress);\n        if (recipientBalance > 0) token.transfer(stream.recipient, recipientBalance);\n        if (senderBalance > 0) token.transfer(stream.sender, senderBalance);\n\n        emit CancelStream(streamId, stream.sender, stream.recipient, senderBalance, recipientBalance);\n        return true;\n    }\n}"
    },
    "src/dependency/sablier/CarefulMath.sol": {
      "content": "pragma solidity >=0.5.10;\n//this is used by sablier, and i need to have that work for testing!!!\n/**\n  * @title Careful Math\n  * @author Compound\n  * @notice Derived from OpenZeppelin's SafeMath library\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n  */\ncontract CarefulMath {\n    /**\n     * @dev Possible error codes that we can return\n     */\n    enum MathError { NO_ERROR, DIVISION_BY_ZERO, INTEGER_OVERFLOW, INTEGER_UNDERFLOW }\n\n    /**\n    * @dev Multiplies two numbers, returns an error on overflow.\n    */\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n        if (a == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        uint256 c = a * b;\n\n        if (c / a != b) {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        } else {\n            return (MathError.NO_ERROR, c);\n        }\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n        if (b == 0) {\n            return (MathError.DIVISION_BY_ZERO, 0);\n        }\n\n        return (MathError.NO_ERROR, a / b);\n    }\n\n    /**\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n        if (b <= a) {\n            return (MathError.NO_ERROR, a - b);\n        } else {\n            return (MathError.INTEGER_UNDERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev Adds two numbers, returns an error on overflow.\n    */\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n        uint256 c = a + b;\n\n        if (c >= a) {\n            return (MathError.NO_ERROR, c);\n        } else {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev add a and b and then subtract c\n    */\n    function addThenSubUInt(uint256 a, uint256 b, uint256 c) internal pure returns (MathError, uint256) {\n        (MathError err0, uint256 sum) = addUInt(a, b);\n\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, 0);\n        }\n\n        return subUInt(sum, c);\n    }\n}"
    },
    "src/dependency/sablier/Types.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/**\n * @title Sablier Types\n * @author Sablier\n */\nlibrary Types {\n    struct Stream {\n        uint256 deposit;\n        uint256 ratePerSecond;\n        uint256 remainingBalance;\n        uint256 startTime;\n        uint256 stopTime;\n        address recipient;\n        address sender;\n        address tokenAddress;\n        bool isEntity;\n    }\n}"
    },
    "src/token/DummyErc721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract DummyErc721 is ERC721 {\n    constructor() ERC721(\"DummyErc721\", \"DUM721\") {\n    }\n\n    function mint(uint256 tokenId) public {\n        _safeMint(_msgSender(), tokenId);\n    }\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestPaymasterOwnerSignature.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./TestPaymasterEverythingAccepted.sol\";\n\ncontract TestPaymasterOwnerSignature is TestPaymasterEverythingAccepted {\n    using ECDSA for bytes32;\n\n    /**\n     * This demonstrates how dapps can provide an off-chain signatures to relayed transactions.\n     */\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    view\n    override\n    returns (bytes memory, bool) {\n        (signature, maxPossibleGas);\n        _verifyForwarder(relayRequest);\n\n        address signer =\n            keccak256(abi.encodePacked(\"I approve\", relayRequest.request.from))\n            .toEthSignedMessageHash()\n            .recover(approvalData);\n        require(signer == owner(), \"test: not approved\");\n        return (\"\",false);\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestPaymasterEverythingAccepted.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../forwarder/IForwarder.sol\";\nimport \"../BasePaymaster.sol\";\n\ncontract TestPaymasterEverythingAccepted is BasePaymaster {\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"2.2.3+opengsn.test-pea.ipaymaster\";\n    }\n\n    event SampleRecipientPreCall();\n    event SampleRecipientPostCall(bool success, uint actualCharge);\n\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    override\n    virtual\n    returns (bytes memory, bool) {\n        (signature);\n        _verifyForwarder(relayRequest);\n        (approvalData, maxPossibleGas);\n        emit SampleRecipientPreCall();\n        return (\"no revert here\",false);\n    }\n\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    external\n    override\n    virtual\n    {\n        (context, gasUseWithoutPost, relayData);\n        emit SampleRecipientPostCall(success, gasUseWithoutPost);\n    }\n\n    function deposit() public payable {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        relayHub.depositFor{value:msg.value}(address(this));\n    }\n\n    function withdrawAll(address payable destination) public {\n        uint256 amount = relayHub.balanceOf(address(this));\n        withdrawRelayHubDepositTo(amount, destination);\n    }\n}\n"
    },
    "src/dependency/gsn/BasePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./utils/GsnTypes.sol\";\nimport \"./interfaces/IPaymaster.sol\";\nimport \"./interfaces/IRelayHub.sol\";\nimport \"./utils/GsnEip712Library.sol\";\nimport \"./forwarder/IForwarder.sol\";\n\n/**\n * Abstract base class to be inherited by a concrete Paymaster\n * A subclass must implement:\n *  - preRelayedCall\n *  - postRelayedCall\n */\nabstract contract BasePaymaster is IPaymaster, Ownable {\n\n    IRelayHub internal relayHub;\n    IForwarder public override trustedForwarder;\n\n    function getHubAddr() public override view returns (address) {\n        return address(relayHub);\n    }\n\n    //overhead of forwarder verify+signature, plus hub overhead.\n    uint256 constant public FORWARDER_HUB_OVERHEAD = 50000;\n\n    //These parameters are documented in IPaymaster.GasAndDataLimits\n    uint256 constant public PRE_RELAYED_CALL_GAS_LIMIT = 100000;\n    uint256 constant public POST_RELAYED_CALL_GAS_LIMIT = 110000;\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET = PRE_RELAYED_CALL_GAS_LIMIT + FORWARDER_HUB_OVERHEAD;\n    uint256 constant public CALLDATA_SIZE_LIMIT = 10500;\n\n    function getGasAndDataLimits()\n    public\n    override\n    virtual\n    view\n    returns (\n        IPaymaster.GasAndDataLimits memory limits\n    ) {\n        return IPaymaster.GasAndDataLimits(\n            PAYMASTER_ACCEPTANCE_BUDGET,\n            PRE_RELAYED_CALL_GAS_LIMIT,\n            POST_RELAYED_CALL_GAS_LIMIT,\n            CALLDATA_SIZE_LIMIT\n        );\n    }\n\n    // this method must be called from preRelayedCall to validate that the forwarder\n    // is approved by the paymaster as well as by the recipient contract.\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\n    public\n    view\n    {\n        require(address(trustedForwarder) == relayRequest.relayData.forwarder, \"Forwarder is not trusted\");\n        GsnEip712Library.verifyForwarderTrusted(relayRequest);\n    }\n\n    /*\n     * modifier to be used by recipients as access control protection for preRelayedCall & postRelayedCall\n     */\n    modifier relayHubOnly() {\n        require(msg.sender == getHubAddr(), \"can only be called by RelayHub\");\n        _;\n    }\n\n    function setRelayHub(IRelayHub hub) public onlyOwner {\n        relayHub = hub;\n    }\n\n    function setTrustedForwarder(IForwarder forwarder) public onlyOwner {\n        trustedForwarder = forwarder;\n    }\n\n    /// check current deposit on relay hub.\n    function getRelayHubDeposit()\n    public\n    override\n    view\n    returns (uint) {\n        return relayHub.balanceOf(address(this));\n    }\n\n    // any money moved into the paymaster is transferred as a deposit.\n    // This way, we don't need to understand the RelayHub API in order to replenish\n    // the paymaster.\n    receive() external virtual payable {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        relayHub.depositFor{value:msg.value}(address(this));\n    }\n\n    /// withdraw deposit from relayHub\n    function withdrawRelayHubDepositTo(uint amount, address payable target) public onlyOwner {\n        relayHub.withdraw(amount, target);\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestPaymasterVariableGasLimits.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./TestPaymasterEverythingAccepted.sol\";\n\ncontract TestPaymasterVariableGasLimits is TestPaymasterEverythingAccepted {\n\n    string public override versionPaymaster = \"2.2.3+opengsn.test-vgl.ipaymaster\";\n\n    event SampleRecipientPreCallWithValues(\n        uint256 gasleft,\n        uint256 maxPossibleGas\n    );\n\n    event SampleRecipientPostCallWithValues(\n        uint256 gasleft,\n        uint256 gasUseWithoutPost\n    );\n\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    override\n    returns (bytes memory, bool) {\n        (signature, approvalData);\n        _verifyForwarder(relayRequest);\n        emit SampleRecipientPreCallWithValues(\n            gasleft(), maxPossibleGas);\n        return (\"\", false);\n    }\n\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    external\n    override\n    relayHubOnly\n    {\n        (context, success, gasUseWithoutPost, relayData);\n        emit SampleRecipientPostCallWithValues(gasleft(), gasUseWithoutPost);\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestPaymasterStoreContext.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./TestPaymasterEverythingAccepted.sol\";\n\ncontract TestPaymasterStoreContext is TestPaymasterEverythingAccepted {\n\n    event SampleRecipientPreCallWithValues(\n        address relay,\n        address from,\n        bytes encodedFunction,\n        uint256 baseRelayFee,\n        uint256 pctRelayFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        bytes approvalData,\n        uint256 maxPossibleGas\n    );\n\n    event SampleRecipientPostCallWithValues(\n        string context\n    );\n\n    /**\n     * This demonstrates how preRelayedCall can return 'context' data for reuse in postRelayedCall.\n     */\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    override\n    returns (bytes memory, bool) {\n        (signature, approvalData, maxPossibleGas);\n        _verifyForwarder(relayRequest);\n\n        emit SampleRecipientPreCallWithValues(\n            relayRequest.relayData.relayWorker,\n            relayRequest.request.from,\n            relayRequest.request.data,\n            relayRequest.relayData.baseRelayFee,\n            relayRequest.relayData.pctRelayFee,\n            relayRequest.relayData.gasPrice,\n            relayRequest.request.gas,\n            approvalData,\n            maxPossibleGas);\n        return (\"context passed from preRelayedCall to postRelayedCall\",false);\n    }\n\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    external\n    override\n    relayHubOnly\n    {\n        (context, success, gasUseWithoutPost, relayData);\n        emit SampleRecipientPostCallWithValues(string(context));\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestPaymasterPreconfiguredApproval.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./TestPaymasterEverythingAccepted.sol\";\n\ncontract TestPaymasterPreconfiguredApproval is TestPaymasterEverythingAccepted {\n\n    bytes public expectedApprovalData;\n\n    function setExpectedApprovalData(bytes memory val) public {\n        expectedApprovalData = val;\n    }\n\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    view\n    override\n    returns (bytes memory, bool) {\n        (relayRequest, signature, approvalData, maxPossibleGas);\n        _verifyForwarder(relayRequest);\n        require(keccak256(expectedApprovalData) == keccak256(approvalData),\n            string(abi.encodePacked(\n                \"test: unexpected approvalData: '\", approvalData, \"' instead of '\", expectedApprovalData, \"'\")));\n        return (\"\",false);\n    }\n}\n"
    },
    "src/metatx/CreatonPaymaster.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\nimport \"../dependency/gsn/forwarder/IForwarder.sol\";\nimport \"../dependency/gsn/BasePaymaster.sol\";\n\n//import \"./IMetatxStaking.sol\";\n\ncontract CreatonPaymaster is BasePaymaster {\n    address public creatonAdmin;\n    address public token;\n    address public stakingContract;\n    mapping(address => bool) public targets; // The target contracts we are willing to pay for\n\n    function addCreatorContract(address creatorContract) public onlyAdmin {\n        targets[creatorContract] = true;\n    }\n\n    function addContract(address _contract) public onlyOwner {\n        targets[_contract] = true;\n    }\n\n    function setAdmin(address _admin) public onlyOwner {\n        creatonAdmin = _admin;\n        targets[creatonAdmin] = true;\n    }\n\n    constructor() public {\n        //stakingContract = _stakingContract;\n        //targets[stakingContract] = true;\n    }\n\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    ) external virtual override returns (bytes memory context, bool) {\n        _verifyForwarder(relayRequest);\n        (signature, approvalData, maxPossibleGas);\n\n        //if (\n        //    IMetatxStaking(stakingContract).balanceOf(relayRequest.request.from) >=\n        //    IMetatxStaking(stakingContract).getMinStake()\n        //) {\n        require(targets[relayRequest.request.to], \"Creaton Paymaster: Destination contract not supported\");\n        return (new bytes(0), false);\n        //}\n\n        //        if (relayRequest.request.to == stakingContract){\n        //            bytes4 sig =\n        //            relayRequest.request.data[0] |\n        //            (bytes4(relayRequest.request.data[1]) >> 8) |\n        //            (bytes4(relayRequest.request.data[2]) >> 16) |\n        //            (bytes4(relayRequest.request.data[3]) >> 24);\n        //            require( sig == bytes4(keccak256(\"stake(uint256)\")), \"Creaton Paymaster: Signature mismatch\");\n        //            (address recipient, ,) = abi.decode(relayRequest.request.data[4:], (address,uint256,bytes));\n        //            require(recipient == stakingContract, \"Creaton Paymaster: Only free staking is supported\");\n        //            return (new bytes(0), false);\n        //        }\n\n        revert(\"Creaton Paymaster: No rules applicable\");\n    }\n\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    ) external virtual override {\n        (context, success, gasUseWithoutPost, relayData);\n    }\n\n    function versionPaymaster() external view virtual override returns (string memory) {\n        return \"2.2.3-matic\";\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == creatonAdmin, \"Not Admin\");\n        _;\n    }\n}\n"
    },
    "src/dependency/gsn/forwarder/Forwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./IForwarder.sol\";\n\ncontract Forwarder is IForwarder {\n    using ECDSA for bytes32;\n\n    string public constant GENERIC_PARAMS = \"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntil\";\n\n    string public constant EIP712_DOMAIN_TYPE = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n\n    mapping(bytes32 => bool) public typeHashes;\n    mapping(bytes32 => bool) public domains;\n\n    // Nonces of senders, used to prevent replay attacks\n    mapping(address => uint256) private nonces;\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    function getNonce(address from)\n    public view override\n    returns (uint256) {\n        return nonces[from];\n    }\n\n    constructor() {\n\n        string memory requestType = string(abi.encodePacked(\"ForwardRequest(\", GENERIC_PARAMS, \")\"));\n        registerRequestTypeInternal(requestType);\n    }\n\n    function verify(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    external override view {\n\n        _verifyNonce(req);\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n    }\n\n    function execute(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig\n    )\n    external payable\n    override\n    returns (bool success, bytes memory ret) {\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n        _verifyAndUpdateNonce(req);\n\n        require(req.validUntil == 0 || req.validUntil > block.number, \"FWD: request expired\");\n\n        uint gasForTransfer = 0;\n        if ( req.value != 0 ) {\n            gasForTransfer = 40000; //buffer in case we need to move eth after the transaction.\n        }\n        bytes memory callData = abi.encodePacked(req.data, req.from);\n        require(gasleft()*63/64 >= req.gas + gasForTransfer, \"FWD: insufficient gas\");\n        // solhint-disable-next-line avoid-low-level-calls\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(callData);\n        if ( req.value != 0 && address(this).balance>0 ) {\n            // can't fail: req.from signed (off-chain) the request, so it must be an EOA...\n            payable(req.from).transfer(address(this).balance);\n        }\n\n        return (success,ret);\n    }\n\n\n    function _verifyNonce(ForwardRequest calldata req) internal view {\n        require(nonces[req.from] == req.nonce, \"FWD: nonce mismatch\");\n    }\n\n    function _verifyAndUpdateNonce(ForwardRequest calldata req) internal {\n        require(nonces[req.from]++ == req.nonce, \"FWD: nonce mismatch\");\n    }\n\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\n\n        for (uint i = 0; i < bytes(typeName).length; i++) {\n            bytes1 c = bytes(typeName)[i];\n            require(c != \"(\" && c != \")\", \"FWD: invalid typename\");\n        }\n\n        string memory requestType = string(abi.encodePacked(typeName, \"(\", GENERIC_PARAMS, \",\", typeSuffix));\n        registerRequestTypeInternal(requestType);\n    }\n\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\n        uint256 chainId;\n        /* solhint-disable-next-line no-inline-assembly */\n        assembly { chainId := chainid() }\n\n        bytes memory domainValue = abi.encode(\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\n            keccak256(bytes(name)),\n            keccak256(bytes(version)),\n            chainId,\n            address(this));\n\n        bytes32 domainHash = keccak256(domainValue);\n\n        domains[domainHash] = true;\n        emit DomainRegistered(domainHash, domainValue);\n    }\n\n    function registerRequestTypeInternal(string memory requestType) internal {\n\n        bytes32 requestTypehash = keccak256(bytes(requestType));\n        typeHashes[requestTypehash] = true;\n        emit RequestTypeRegistered(requestTypehash, requestType);\n    }\n\n    function _verifySig(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    internal\n    view\n    {\n        require(domains[domainSeparator], \"FWD: unregistered domain sep.\");\n        require(typeHashes[requestTypeHash], \"FWD: unregistered typehash\");\n        bytes32 digest = keccak256(abi.encodePacked(\n                \"\\x19\\x01\", domainSeparator,\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\n            ));\n        require(digest.recover(sig) == req.from, \"FWD: signature mismatch\");\n    }\n\n    function _getEncoded(\n        ForwardRequest calldata req,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData\n    )\n    public\n    pure\n    returns (\n        bytes memory\n    ) {\n        // we use encodePacked since we append suffixData as-is, not as dynamic param.\n        // still, we must make sure all first params are encoded as abi.encode()\n        // would encode them - as 256-bit-wide params.\n        return abi.encodePacked(\n            requestTypeHash,\n            uint256(uint160(req.from)),\n            uint256(uint160(req.to)),\n            req.value,\n            req.gas,\n            req.nonce,\n            keccak256(req.data),\n            req.validUntil,\n            suffixData\n        );\n    }\n}\n"
    },
    "src/dependency/gsn/forwarder/test/TestForwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../Forwarder.sol\";\n\n// helper class for testing the forwarder.\ncontract TestForwarder {\n    function callExecute(Forwarder forwarder, Forwarder.ForwardRequest memory req,\n        bytes32 domainSeparator, bytes32 requestTypeHash, bytes memory suffixData, bytes memory sig) public payable {\n        (bool success, bytes memory error) = forwarder.execute{value:msg.value}(req, domainSeparator, requestTypeHash, suffixData, sig);\n        emit Result(success, success ? \"\" : this.decodeErrorMessage(error));\n    }\n\n    event Result(bool success, string error);\n\n    function decodeErrorMessage(bytes calldata ret) external pure returns (string memory message) {\n        //decode evert string: assume it has a standard Error(string) signature: simply skip the (selector,offset,length) fields\n        if ( ret.length>4+32+32 ) {\n            return abi.decode(ret[4:], (string));\n        }\n        //unknown buffer. return as-is\n        return string(ret);\n    }\n\n    function getChainId() public view returns (uint256 id){\n        /* solhint-disable-next-line no-inline-assembly */\n        assembly { id := chainid() }\n    }\n}\n"
    },
    "src/dependency/gsn/BatchForwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./forwarder/Forwarder.sol\";\nimport \"./BaseRelayRecipient.sol\";\nimport \"./utils/GsnUtils.sol\";\n\n/**\n * batch forwarder support calling a method sendBatch in the forwarder itself.\n * NOTE: the \"target\" of the request should be the BatchForwarder itself\n */\ncontract BatchForwarder is Forwarder, BaseRelayRecipient {\n\n    string public override versionRecipient = \"2.2.3+opengsn.batched.irelayrecipient\";\n\n    constructor() {\n        //needed for sendBatch\n        trustedForwarder = address(this);\n    }\n\n    function sendBatch(address[] calldata targets, bytes[] calldata encodedFunctions) external {\n        require(targets.length == encodedFunctions.length, \"BatchForwarder: wrong length\");\n        address sender = _msgSender();\n        for (uint i = 0; i < targets.length; i++) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory ret) = targets[i].call(abi.encodePacked(encodedFunctions[i], sender));\n            if (!success){\n                //re-throw the revert with the same revert reason.\n                GsnUtils.revertWithData(ret);\n            }\n        }\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestUtil.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\nimport \"../utils/GsnEip712Library.sol\";\nimport \"../utils/GsnUtils.sol\";\n\ncontract TestUtil {\n\n    function libRelayRequestName() public pure returns (string memory) {\n        return GsnEip712Library.RELAY_REQUEST_NAME;\n    }\n\n    function libRelayRequestType() public pure returns (string memory) {\n        return string(GsnEip712Library.RELAY_REQUEST_TYPE);\n    }\n\n    function libRelayRequestTypeHash() public pure returns (bytes32) {\n        return GsnEip712Library.RELAY_REQUEST_TYPEHASH;\n    }\n\n    function libRelayRequestSuffix() public pure returns (string memory) {\n        return GsnEip712Library.RELAY_REQUEST_SUFFIX;\n    }\n\n    //helpers for test to call the library funcs:\n    function callForwarderVerify(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature\n    )\n    external\n    view {\n        GsnEip712Library.verify(relayRequest, signature);\n    }\n\n    function callForwarderVerifyAndCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature\n    )\n    external\n    returns (\n        bool success,\n        bytes memory ret\n    ) {\n        bool forwarderSuccess;\n        (forwarderSuccess, success, ret) = GsnEip712Library.execute(relayRequest, signature);\n        if ( !forwarderSuccess) {\n            GsnUtils.revertWithData(ret);\n        }\n        emit Called(success, success == false ? ret : bytes(\"\"));\n    }\n\n    event Called(bool success, bytes error);\n\n    function splitRequest(\n        GsnTypes.RelayRequest calldata relayRequest\n    )\n    external\n    pure\n    returns (\n        bytes32 typeHash,\n        bytes memory suffixData\n    ) {\n        (suffixData) = GsnEip712Library.splitRequest(relayRequest);\n        typeHash = GsnEip712Library.RELAY_REQUEST_TYPEHASH;\n    }\n\n    function libDomainSeparator(address forwarder) public view returns (bytes32) {\n        return GsnEip712Library.domainSeparator(forwarder);\n    }\n\n    function libGetChainID() public view returns (uint256) {\n        return GsnEip712Library.getChainID();\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestRelayHubValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../utils/RelayHubValidator.sol\";\n\ncontract TestRelayHubValidator {\n\n    //for testing purposes, we must be called from a method with same param signature as RelayCall\n    function dummyRelayCall(\n        uint, //paymasterMaxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint //externalGasLimit\n    ) external pure {\n        RelayHubValidator.verifyTransactionPacking(relayRequest, signature, approvalData);\n    }\n\n    // helper method for verifyTransactionPacking\n    function dynamicParamSize(bytes calldata buf) external pure returns (uint) {\n        return RelayHubValidator.dynamicParamSize(buf);\n    }\n}\n"
    },
    "src/dependency/gsn/test/TestRelayWorkerContract.sol": {
      "content": "/* solhint-disable avoid-tx-origin */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../interfaces/IRelayHub.sol\";\n\ncontract TestRelayWorkerContract {\n\n    function relayCall(\n        IRelayHub hub,\n        uint maxAcceptanceBudget,\n        GsnTypes.RelayRequest memory relayRequest,\n        bytes memory signature,\n        uint externalGasLimit)\n    public\n    {\n        hub.relayCall{gas:externalGasLimit}(maxAcceptanceBudget, relayRequest, signature, \"\", externalGasLimit);\n    }\n}\n"
    },
    "src/dependency/gsn/Penalizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./utils/RLPReader.sol\";\nimport \"./utils/GsnUtils.sol\";\nimport \"./interfaces/IRelayHub.sol\";\nimport \"./interfaces/IPenalizer.sol\";\n\ncontract Penalizer is IPenalizer {\n\n    string public override versionPenalizer = \"2.2.3+opengsn.penalizer.ipenalizer\";\n\n    using ECDSA for bytes32;\n\n    uint256 public immutable override penalizeBlockDelay;\n    uint256 public immutable override penalizeBlockExpiration;\n\n    constructor(\n        uint256 _penalizeBlockDelay,\n        uint256 _penalizeBlockExpiration\n    ) {\n        penalizeBlockDelay = _penalizeBlockDelay;\n        penalizeBlockExpiration = _penalizeBlockExpiration;\n    }\n\n    function isTransactionType1(bytes calldata rawTransaction) public pure returns (bool) {\n        return (uint8(rawTransaction[0]) == 1);\n    }\n\n    function isTransactionTypeValid(bytes calldata rawTransaction) public pure returns(bool) {\n        uint8 transactionTypeByte = uint8(rawTransaction[0]);\n        return (transactionTypeByte >= 0xc0 && transactionTypeByte <= 0xfe);\n    }\n\n    function decodeTransaction(bytes calldata rawTransaction) public pure returns (Transaction memory transaction) {\n        if (isTransactionType1(rawTransaction)) {\n            (transaction.nonce,\n            transaction.gasPrice,\n            transaction.gasLimit,\n            transaction.to,\n            transaction.value,\n            transaction.data) = RLPReader.decodeTransactionType1(rawTransaction);\n        } else {\n            (transaction.nonce,\n            transaction.gasPrice,\n            transaction.gasLimit,\n            transaction.to,\n            transaction.value,\n            transaction.data) = RLPReader.decodeLegacyTransaction(rawTransaction);\n        }\n        return transaction;\n    }\n\n    mapping(bytes32 => uint) public commits;\n\n    /**\n     * any sender can call \"commit(keccak(encodedPenalizeFunction))\", to make sure\n     * no-one can front-run it to claim this penalization\n     */\n    function commit(bytes32 commitHash) external override {\n        uint256 readyBlockNumber = block.number + penalizeBlockDelay;\n        commits[commitHash] = readyBlockNumber;\n        emit CommitAdded(msg.sender, commitHash, readyBlockNumber);\n    }\n\n    modifier commitRevealOnly() {\n        bytes32 commitHash = keccak256(abi.encodePacked(keccak256(msg.data), msg.sender));\n        uint256 readyBlockNumber = commits[commitHash];\n        delete commits[commitHash];\n        // msg.sender can only be fake during off-chain view call, allowing Penalizer process to check transactions\n        if(msg.sender != address(0)) {\n            require(readyBlockNumber != 0, \"no commit\");\n            require(readyBlockNumber < block.number, \"reveal penalize too soon\");\n            require(readyBlockNumber + penalizeBlockExpiration > block.number, \"reveal penalize too late\");\n        }\n        _;\n    }\n\n    function penalizeRepeatedNonce(\n        bytes calldata unsignedTx1,\n        bytes calldata signature1,\n        bytes calldata unsignedTx2,\n        bytes calldata signature2,\n        IRelayHub hub,\n        uint256 randomValue\n    )\n    public\n    override\n    commitRevealOnly {\n        (randomValue);\n        _penalizeRepeatedNonce(unsignedTx1, signature1, unsignedTx2, signature2, hub);\n    }\n\n    function _penalizeRepeatedNonce(\n        bytes calldata unsignedTx1,\n        bytes calldata signature1,\n        bytes calldata unsignedTx2,\n        bytes calldata signature2,\n        IRelayHub hub\n    )\n    private\n    {\n        // If a relay attacked the system by signing multiple transactions with the same nonce\n        // (so only one is accepted), anyone can grab both transactions from the blockchain and submit them here.\n        // Check whether unsignedTx1 != unsignedTx2, that both are signed by the same address,\n        // and that unsignedTx1.nonce == unsignedTx2.nonce.\n        // If all conditions are met, relay is considered an \"offending relay\".\n        // The offending relay will be unregistered immediately, its stake will be forfeited and given\n        // to the address who reported it (msg.sender), thus incentivizing anyone to report offending relays.\n        // If reported via a relay, the forfeited stake is split between\n        // msg.sender (the relay used for reporting) and the address that reported it.\n\n        address addr1 = keccak256(unsignedTx1).recover(signature1);\n        address addr2 = keccak256(unsignedTx2).recover(signature2);\n\n        require(addr1 == addr2, \"Different signer\");\n        require(addr1 != address(0), \"ecrecover failed\");\n\n        Transaction memory decodedTx1 = decodeTransaction(unsignedTx1);\n        Transaction memory decodedTx2 = decodeTransaction(unsignedTx2);\n\n        // checking that the same nonce is used in both transaction, with both signed by the same address\n        // and the actual data is different\n        // note: we compare the hash of the tx to save gas over iterating both byte arrays\n        require(decodedTx1.nonce == decodedTx2.nonce, \"Different nonce\");\n\n        bytes memory dataToCheck1 =\n        abi.encodePacked(decodedTx1.data, decodedTx1.gasLimit, decodedTx1.to, decodedTx1.value);\n\n        bytes memory dataToCheck2 =\n        abi.encodePacked(decodedTx2.data, decodedTx2.gasLimit, decodedTx2.to, decodedTx2.value);\n\n        require(keccak256(dataToCheck1) != keccak256(dataToCheck2), \"tx is equal\");\n\n        penalize(addr1, hub);\n    }\n\n    function penalizeIllegalTransaction(\n        bytes calldata unsignedTx,\n        bytes calldata signature,\n        IRelayHub hub,\n        uint256 randomValue\n    )\n    public\n    override\n    commitRevealOnly {\n        (randomValue);\n        _penalizeIllegalTransaction(unsignedTx, signature, hub);\n    }\n\n    function _penalizeIllegalTransaction(\n        bytes calldata unsignedTx,\n        bytes calldata signature,\n        IRelayHub hub\n    )\n    private\n    {\n        if (isTransactionTypeValid(unsignedTx)) {\n            Transaction memory decodedTx = decodeTransaction(unsignedTx);\n            if (decodedTx.to == address(hub)) {\n                bytes4 selector = GsnUtils.getMethodSig(decodedTx.data);\n                bool isWrongMethodCall = selector != IRelayHub.relayCall.selector;\n                bool isGasLimitWrong = GsnUtils.getParam(decodedTx.data, 4) != decodedTx.gasLimit;\n                require(\n                    isWrongMethodCall || isGasLimitWrong,\n                    \"Legal relay transaction\");\n            }\n        }\n        address relay = keccak256(unsignedTx).recover(signature);\n        require(relay != address(0), \"ecrecover failed\");\n        penalize(relay, hub);\n    }\n\n    function penalize(address relayWorker, IRelayHub hub) private {\n        hub.penalize(relayWorker, payable(msg.sender));\n    }\n}\n"
    },
    "src/dependency/gsn/utils/RLPReader.sol": {
      "content": "// SPDX-License-Identifier:APACHE-2.0\n/*\n* Taken from https://github.com/hamdiallam/Solidity-RLP\n*/\n/* solhint-disable */\npragma solidity ^0.8.0;\n\nlibrary RLPReader {\n\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint len;\n        uint memPtr;\n    }\n\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    // helper function to decode rlp encoded legacy ethereum transaction\n    /*\n    * @param rawTransaction RLP encoded legacy ethereum transaction rlp([nonce, gasPrice, gasLimit, to, value, data]))\n    * @return tuple (nonce,gasPrice,gasLimit,to,value,data)\n    */\n\n    function decodeLegacyTransaction(bytes calldata rawTransaction) internal pure returns (uint, uint, uint, address, uint, bytes memory){\n        RLPReader.RLPItem[] memory values = rawTransaction.toRlpItem().toList(); // must convert to an rlpItem first!\n        return (values[0].toUint(), values[1].toUint(), values[2].toUint(), values[3].toAddress(), values[4].toUint(), values[5].toBytes());\n    }\n\n    /*\n    * @param rawTransaction format: 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, access_list]))\n    * @return tuple (nonce,gasPrice,gasLimit,to,value,data)\n    */\n    function decodeTransactionType1(bytes calldata rawTransaction) internal pure returns (uint, uint, uint, address, uint, bytes memory){\n        bytes memory payload = rawTransaction[1:rawTransaction.length];\n        RLPReader.RLPItem[] memory values = payload.toRlpItem().toList(); // must convert to an rlpItem first!\n        return (values[1].toUint(), values[2].toUint(), values[3].toUint(), values[4].toAddress(), values[5].toUint(), values[6].toBytes());\n    }\n\n    /*\n    * @param item RLP encoded bytes\n    */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        if (item.length == 0)\n            return RLPItem(0, 0);\n        uint memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n        return RLPItem(item.length, memPtr);\n    }\n    /*\n    * @param item RLP encoded list in bytes\n    */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {\n        require(isList(item), \"isList failed\");\n        uint items = numItems(item);\n        result = new RLPItem[](items);\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint dataLen;\n        for (uint i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n    }\n    /*\n    * Helpers\n    */\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        uint8 byte0;\n        uint memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n        if (byte0 < LIST_SHORT_START)\n            return false;\n        return true;\n    }\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) internal pure returns (uint) {\n        uint count = 0;\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr);\n            // skip over an item\n            count++;\n        }\n        return count;\n    }\n    // @return entire rlp item byte length\n    function _itemLength(uint memPtr) internal pure returns (uint len) {\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n        if (byte0 < STRING_SHORT_START)\n            return 1;\n        else if (byte0 < STRING_LONG_START)\n            return byte0 - STRING_SHORT_START + 1;\n        else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n            /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                len := add(dataLen, add(byteLen, 1))\n            }\n        }\n        else if (byte0 < LIST_LONG_START) {\n            return byte0 - LIST_SHORT_START + 1;\n        }\n        else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                len := add(dataLen, add(byteLen, 1))\n            }\n        }\n    }\n    // @return number of bytes until the data\n    function _payloadOffset(uint memPtr) internal pure returns (uint) {\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n        if (byte0 < STRING_SHORT_START)\n            return 0;\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\n            return 1;\n        else if (byte0 < LIST_SHORT_START)  // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        else\n            return byte0 - (LIST_LONG_START - 1) + 1;\n    }\n    /** RLPItem conversions into data types **/\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        uint ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1, \"Invalid RLPItem. Booleans are encoded in 1 byte\");\n        uint result;\n        uint memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n        return result == 0 ? false : true;\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix according to RLP spec\n        require(item.len <= 21, \"Invalid RLPItem. Addresses are encoded in 20 bytes or less\");\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint) {\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset;\n        uint memPtr = item.memPtr + offset;\n        uint result;\n        assembly {\n            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location\n        }\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset;\n        // data length\n        bytes memory result = new bytes(len);\n        uint destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n        copy(item.memPtr + offset, destPtr, len);\n        return result;\n    }\n    /*\n    * @param src Pointer to source\n    * @param dest Pointer to destination\n    * @param len Amount of memory to copy from the source\n    */\n    function copy(uint src, uint dest, uint len) internal pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint mask = 256 ** (WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    },
    "src/dependency/gsn/interfaces/IPenalizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\n\nimport \"./IRelayHub.sol\";\n\ninterface IPenalizer {\n\n    event CommitAdded(address indexed sender, bytes32 indexed commitHash, uint256 readyBlockNumber);\n\n    struct Transaction {\n        uint256 nonce;\n        uint256 gasPrice;\n        uint256 gasLimit;\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    function commit(bytes32 commitHash) external;\n\n    function penalizeRepeatedNonce(\n        bytes calldata unsignedTx1,\n        bytes calldata signature1,\n        bytes calldata unsignedTx2,\n        bytes calldata signature2,\n        IRelayHub hub,\n        uint256 randomValue\n    ) external;\n\n    function penalizeIllegalTransaction(\n        bytes calldata unsignedTx,\n        bytes calldata signature,\n        IRelayHub hub,\n        uint256 randomValue\n    ) external;\n\n    function versionPenalizer() external view returns (string memory);\n    function penalizeBlockDelay() external view returns (uint256);\n    function penalizeBlockExpiration() external view returns (uint256);\n}\n"
    },
    "src/dependency/gsn/test/TestRecipient.sol": {
      "content": "/* solhint-disable avoid-tx-origin */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../utils/GsnUtils.sol\";\nimport \"../BaseRelayRecipient.sol\";\nimport \"./TestPaymasterConfigurableMisbehavior.sol\";\n\ncontract TestRecipient is BaseRelayRecipient {\n\n    string public override versionRecipient = \"2.2.3+opengsn.test.irelayrecipient\";\n\n    constructor(address forwarder) {\n        setTrustedForwarder(forwarder);\n    }\n\n    function getTrustedForwarder() public view returns(address) {\n        return trustedForwarder;\n    }\n\n    function setTrustedForwarder(address forwarder) internal {\n        trustedForwarder = forwarder;\n    }\n\n    event Reverting(string message);\n\n    function testRevert() public {\n        require(address(this) == address(0), \"always fail\");\n        emit Reverting(\"if you see this revert failed...\");\n    }\n\n    address payable public paymaster;\n\n    function setWithdrawDuringRelayedCall(address payable _paymaster) public {\n        paymaster = _paymaster;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    event SampleRecipientEmitted(string message, address realSender, address msgSender, address origin, uint256 msgValue, uint256 gasLeft, uint256 balance);\n\n    function emitMessage(string memory message) public payable returns (string memory) {\n        uint256 gasLeft = gasleft();\n        if (paymaster != address(0)) {\n            withdrawAllBalance();\n        }\n\n        emit SampleRecipientEmitted(message, _msgSender(), msg.sender, tx.origin, msg.value, gasLeft, address(this).balance);\n        return \"emitMessage return value\";\n    }\n\n    function withdrawAllBalance() public {\n        TestPaymasterConfigurableMisbehavior(paymaster).withdrawAllBalance();\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function dontEmitMessage(string calldata message) public {}\n\n    function emitMessageNoParams() public {\n        emit SampleRecipientEmitted(\"Method with no parameters\", _msgSender(), msg.sender, tx.origin, 0, gasleft(), address(this).balance);\n    }\n\n    //return (or revert) with a string in the given length\n    function checkReturnValues(uint len, bool doRevert) public view returns (string memory) {\n        (this);\n        string memory mesg = \"this is a long message that we are going to return a small part from. we don't use a loop since we want a fixed gas usage of the method itself.\";\n        require( bytes(mesg).length>=len, \"invalid len: too large\");\n\n        /* solhint-disable no-inline-assembly */\n        //cut the msg at that length\n        assembly { mstore(mesg, len) }\n        require(!doRevert, mesg);\n        return mesg;\n    }\n\n    //function with no return value (also test revert with no msg.\n    function checkNoReturnValues(bool doRevert) public view {\n        (this);\n        /* solhint-disable reason-string*/\n        require(!doRevert);\n    }\n\n}\n"
    },
    "src/dependency/gsn/test/TestPaymasterConfigurableMisbehavior.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./TestPaymasterEverythingAccepted.sol\";\n\ncontract TestPaymasterConfigurableMisbehavior is TestPaymasterEverythingAccepted {\n\n    bool public withdrawDuringPostRelayedCall;\n    bool public withdrawDuringPreRelayedCall;\n    bool public returnInvalidErrorCode;\n    bool public revertPostRelayCall;\n    bool public outOfGasPre;\n    bool public revertPreRelayCall;\n    bool public revertPreRelayCallOnEvenBlocks;\n    bool public greedyAcceptanceBudget;\n    bool public expensiveGasLimits;\n\n    function setWithdrawDuringPostRelayedCall(bool val) public {\n        withdrawDuringPostRelayedCall = val;\n    }\n    function setWithdrawDuringPreRelayedCall(bool val) public {\n        withdrawDuringPreRelayedCall = val;\n    }\n    function setReturnInvalidErrorCode(bool val) public {\n        returnInvalidErrorCode = val;\n    }\n    function setRevertPostRelayCall(bool val) public {\n        revertPostRelayCall = val;\n    }\n    function setRevertPreRelayCall(bool val) public {\n        revertPreRelayCall = val;\n    }\n    function setRevertPreRelayCallOnEvenBlocks(bool val) public {\n        revertPreRelayCallOnEvenBlocks = val;\n    }\n    function setOutOfGasPre(bool val) public {\n        outOfGasPre = val;\n    }\n\n    function setGreedyAcceptanceBudget(bool val) public {\n        greedyAcceptanceBudget = val;\n    }\n    function setExpensiveGasLimits(bool val) public {\n        expensiveGasLimits = val;\n    }\n\n    // solhint-disable reason-string\n    // contains comments that are checked in tests\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    override\n    relayHubOnly\n    returns (bytes memory, bool) {\n        (signature, approvalData, maxPossibleGas);\n        if (outOfGasPre) {\n            uint i = 0;\n            while (true) {\n                i++;\n            }\n        }\n\n        require(!returnInvalidErrorCode, \"invalid code\");\n\n        if (withdrawDuringPreRelayedCall) {\n            withdrawAllBalance();\n        }\n        if (revertPreRelayCall) {\n            revert(\"You asked me to revert, remember?\");\n        }\n        if (revertPreRelayCallOnEvenBlocks && block.number % 2 == 0) {\n            revert(\"You asked me to revert on even blocks, remember?\");\n        }\n        _verifyForwarder(relayRequest);\n        return (\"\", trustRecipientRevert);\n    }\n\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    external\n    override\n    relayHubOnly\n    {\n        (context, success, gasUseWithoutPost, relayData);\n        if (withdrawDuringPostRelayedCall) {\n            withdrawAllBalance();\n        }\n        if (revertPostRelayCall) {\n            revert(\"You asked me to revert, remember?\");\n        }\n    }\n\n    /// leaving withdrawal public and unprotected\n    function withdrawAllBalance() public returns (uint256) {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        uint256 balance = relayHub.balanceOf(address(this));\n        relayHub.withdraw(balance, payable(address(this)));\n        return balance;\n    }\n\n    IPaymaster.GasAndDataLimits private limits = super.getGasAndDataLimits();\n\n    function getGasAndDataLimits()\n    public override view\n    returns (IPaymaster.GasAndDataLimits memory) {\n\n        if (expensiveGasLimits) {\n            uint sum;\n            //memory access is 700gas, so we waste ~50000\n            for ( int i=0; i<60000; i+=700 ) {\n                sum  = sum + limits.acceptanceBudget;\n            }\n        }\n        if (greedyAcceptanceBudget) {\n            return IPaymaster.GasAndDataLimits(limits.acceptanceBudget * 9, limits.preRelayedCallGasLimit, limits.postRelayedCallGasLimit,\n            limits.calldataSizeLimit);\n        }\n        return limits;\n    }\n\n    bool private trustRecipientRevert;\n\n    function setGasLimits(uint acceptanceBudget, uint preRelayedCallGasLimit, uint postRelayedCallGasLimit) public {\n        limits = IPaymaster.GasAndDataLimits(\n            acceptanceBudget,\n            preRelayedCallGasLimit,\n            postRelayedCallGasLimit,\n            limits.calldataSizeLimit\n        );\n    }\n\n    function setTrustRecipientRevert(bool on) public {\n        trustRecipientRevert = on;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external override payable {}\n}\n"
    },
    "src/creaton/RedeemingTokens/ProtoCreateSeed.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ProtoCreateSeed is ERC20, Ownable {\n    //only exists to be converted into Create for the team.\n    constructor() ERC20(\"Proto Create Seed\", \"PCS\") {\n        _mint(msg.sender, 9000000*(10**18));\n    }\n}\n"
    },
    "src/creaton/RedeemingTokens/ProtoCreatePrivate.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ProtoCreatePrivate is ERC20, Ownable {\n    //only exists to be converted into Create for the team.\n    constructor() ERC20(\"Proto Create Private\", \"PCP\") {\n        _mint(msg.sender, 25000000*(10**18));\n    }\n}\n"
    },
    "src/creaton/RedeemingTokens/ProtoCreateAmbassador.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n//ALSO USED FOR MARKETING!!!\ncontract ProtoCreateAmbassador is ERC20, Ownable {\n    //only exists to be converted into Create for the Ambassador.\n    constructor() ERC20(\"Proto Create Ambassador\", \"PCA\") {\n        _mint(msg.sender, 5000000*(10**18));\n    }\n}\n"
    },
    "src/creaton/RedeemingTokens/ProtoCreateAdvisor.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n//ALSO USED FOR MARKETING!!!\ncontract ProtoCreateAdvisor is ERC20, Ownable {\n    //only exists to be converted into Create for the Advisors.\n    constructor() ERC20(\"Proto Create Advisor\", \"PCA\") {\n        _mint(msg.sender, 5000000*(10**18));\n    }\n}\n"
    },
    "src/creaton/NFTLance/TestingToken.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestingToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20(\"Testing Token\", \"TT\") {\n        _mint(msg.sender, initialSupply);\n    }\n    function faucet() public {\n        _mint(msg.sender, 1000 * 1e18);\n    }\n    function fund(uint256 amount) public {\n        _mint(msg.sender, amount);\n    }\n}\n"
    },
    "src/dependency/gsn/test/PayableWithEmit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\nimport \"../BaseRelayRecipient.sol\";\n\n//make sure that \"payable\" function that uses _msgSender() still works\n// (its not required to use _msgSender(), since the default function\n// will never be called through GSN, but still, if someone uses it,\n// it should work)\ncontract PayableWithEmit is BaseRelayRecipient {\n    string public override versionRecipient = \"2.2.3+opengsn.payablewithemit.irelayrecipient\";\n\n    event Received(address sender, uint256 value, uint256 gasleft);\n\n    receive() external payable {\n        emit Received(_msgSender(), msg.value, gasleft());\n    }\n\n    //helper: send value to another contract\n    function doSend(address payable target) public payable {\n        uint256 before = gasleft();\n        // solhint-disable-next-line check-send-result\n        bool success = target.send(msg.value);\n        uint256 gasAfter = gasleft();\n        emit GasUsed(before - gasAfter, success);\n    }\n\n    event GasUsed(uint256 gasUsed, bool success);\n}\n"
    },
    "src/dependency/gsn/forwarder/test/TestForwarderTarget.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../../BaseRelayRecipient.sol\";\n\ncontract TestForwarderTarget is BaseRelayRecipient {\n\n    string public override versionRecipient = \"2.2.3+opengsn.test.recipient\";\n\n    constructor(address forwarder) {\n        trustedForwarder = forwarder;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    event TestForwarderMessage(string message, bytes realMsgData, address realSender, address msgSender, address origin);\n\n    function emitMessage(string memory message) public {\n\n        // solhint-disable-next-line avoid-tx-origin\n        emit TestForwarderMessage(message, _msgData(), _msgSender(), msg.sender, tx.origin);\n    }\n\n    function publicMsgSender() public view returns (address) {\n        return _msgSender();\n    }\n\n    function publicMsgData() public view returns (bytes memory) {\n        return _msgData();\n    }\n\n    function mustReceiveEth(uint value) public payable {\n        require( msg.value == value, \"didn't receive value\");\n    }\n\n    event Reverting(string message);\n\n    function testRevert() public {\n        require(address(this) == address(0), \"always fail\");\n        emit Reverting(\"if you see this revert failed...\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}