{
  "address": "0x395f8a74A09096DbCf27B2d052d5a36CDAe508CC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hide",
          "type": "bool"
        }
      ],
      "name": "HidePost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "jsonData",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum CreatorV1.Type",
          "name": "contentType",
          "type": "uint8"
        }
      ],
      "name": "NewPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "PostContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum CreatorV1.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "SubscriberEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "cbdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ctx",
          "type": "bytes"
        }
      ],
      "name": "afterAgreementCreated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "newCtx",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "cbdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ctx",
          "type": "bytes"
        }
      ],
      "name": "afterAgreementTerminated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "newCtx",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "cbdata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ctx",
          "type": "bytes"
        }
      ],
      "name": "afterAgreementUpdated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "newCtx",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ctx",
          "type": "bytes"
        }
      ],
      "name": "beforeAgreementCreated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "cbdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "beforeAgreementTerminated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "cbdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "beforeAgreementUpdated",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "cbdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hide",
          "type": "bool"
        }
      ],
      "name": "hidePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "host",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cfa",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acceptedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarderAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "payedUpfront",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int96",
          "name": "num",
          "type": "int96"
        },
        {
          "internalType": "int96",
          "name": "percent",
          "type": "int96"
        }
      ],
      "name": "percentage",
      "outputs": [
        {
          "internalType": "int96",
          "name": "",
          "type": "int96"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscribers",
      "outputs": [
        {
          "internalType": "enum CreatorV1.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionPrice",
      "outputs": [
        {
          "internalType": "int96",
          "name": "",
          "type": "int96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "name": "updateTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "ctx",
          "type": "bytes"
        }
      ],
      "name": "upfrontFee",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "newCtx",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dataJSON",
          "type": "string"
        },
        {
          "internalType": "enum CreatorV1.Type",
          "name": "contentType",
          "type": "uint8"
        }
      ],
      "name": "upload",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7d05ae722b243138438c7085a5215a5e9eb1a24ccc049629547f14c6c9668e9e",
  "receipt": {
    "to": null,
    "from": "0xE6C9Ea928c0BA8fF32ab877D8F89C6cD1c47c515",
    "contractAddress": "0x395f8a74A09096DbCf27B2d052d5a36CDAe508CC",
    "transactionIndex": 109,
    "gasUsed": "3703131",
    "logsBloom": "0x
    "blockHash": "0x924914053fe06888e7c47e0201f3ecedd9a18a062c9ba8278ff6f91c351c16f9",
    "transactionHash": "0x7d05ae722b243138438c7085a5215a5e9eb1a24ccc049629547f14c6c9668e9e",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 27989905,
        "transactionHash": "0x7d05ae722b243138438c7085a5215a5e9eb1a24ccc049629547f14c6c9668e9e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e6c9ea928c0ba8ff32ab877d8f89c6cd1c47c515",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000027c00459dc5298e000000000000000000000000000000000000000000000005e33dac77ea689843000000000000000000000000000000000000000000000ade287a8c79570633b1000000000000000000000000000000000000000000000005e0c1ac324ca36eb5000000000000000000000000000000000000000000000ade2af68cbef4cb5d3f",
        "logIndex": 470,
        "blockHash": "0x924914053fe06888e7c47e0201f3ecedd9a18a062c9ba8278ff6f91c351c16f9"
      }
    ],
    "blockNumber": 27989905,
    "cumulativeGasUsed": "19397823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "cf3f33dedda7ba3e5d2a941f3416e616",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hide\",\"type\":\"bool\"}],\"name\":\"HidePost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"jsonData\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum CreatorV1.Type\",\"name\":\"contentType\",\"type\":\"uint8\"}],\"name\":\"NewPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"PostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CreatorV1.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SubscriberEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hide\",\"type\":\"bool\"}],\"name\":\"hidePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cfa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarderAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payedUpfront\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int96\",\"name\":\"num\",\"type\":\"int96\"},{\"internalType\":\"int96\",\"name\":\"percent\",\"type\":\"int96\"}],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"\",\"type\":\"int96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"enum CreatorV1.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPrice\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"updateTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"upfrontFee\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dataJSON\",\"type\":\"string\"},{\"internalType\":\"enum CreatorV1.Type\",\"name\":\"contentType\",\"type\":\"uint8\"}],\"name\":\"upload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"upfrontFee(bytes)\":{\"details\":\"Take entrance fee from the user and issue a ticket\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/creaton/CreatorV1.sol\":\"CreatorV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa2695a4c7b192f34b98a3875dfce54c8c6c4976b898a5598b1ce0355ce2e6c56\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xe4e0b7e3f0265ffaa565d26acd2d45f2633f19127ed625e5a05a9f201a87a667\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperApp,\\n    SuperAppDefinitions\\n} from \\\"../interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nabstract contract SuperAppBase is ISuperApp {\\n\\n    function beforeAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement Created\\\");\\n    }\\n\\n    function afterAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Created\\\");\\n    }\\n\\n    function beforeAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement updated\\\");\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Updated\\\");\\n    }\\n\\n    function beforeAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback -  Before Agreement Terminated\\\");\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Terminated\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0x54003e523c7ed6d3e8b5aa3f7c80617d8ee1155554f31a1bf6e3fc3eeb634fd4\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @title Constant Flow Agreement interface\\n * @author Superfluid\\n */\\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    /**\\n     * @notice Get the maximum flow rate allowed with the deposit\\n     * @dev The deposit is clipped and rounded down\\n     * @param deposit Deposit amount used for creating the flow\\n     * @return flowRate The maximum flow rate\\n     */\\n    function getMaximumFlowRateFromDeposit(\\n        ISuperfluidToken token,\\n        uint256 deposit)\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @notice Get the deposit required for creating the flow\\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\\n     * @param flowRate Flow rate to be tested\\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\\n     * NOTE:\\n     * - if calculated deposit (flowRate * liquidationPeriod) is less\\n     *   than the minimum deposit, we use the minimum deposit otherwise\\n     *   we use the calculated deposit\\n     */\\n    function getDepositRequiredForFlowRate(\\n        ISuperfluidToken token,\\n        int96 flowRate)\\n        external view virtual\\n        returns (uint256 deposit);\\n\\n    /**\\n     * @dev Returns whether it is the patrician period based on host.getNow()\\n     * @param account The account we are interested in\\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\\n     * @return timestamp The value of host.getNow()\\n     */\\n    function isPatricianPeriodNow(\\n        ISuperfluidToken token,\\n        address account)\\n        public view virtual\\n        returns (bool isPatricianPeriod, uint256 timestamp);\\n\\n    /**\\n     * @dev Returns whether it is the patrician period based on timestamp\\n     * @param account The account we are interested in\\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\\n     */\\n    function isPatricianPeriod(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 timestamp)\\n        public view virtual\\n        returns (bool isPatricianPeriod);\\n\\n    /**\\n     * @notice Create a flow betwen ctx.msgSender and receiver\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param receiver Flow receiver address\\n     * @param flowRate New flow rate in amount per second\\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementCreated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - A deposit is taken as safety margin for the solvency agents\\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\\n     */\\n    function createFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n    /**\\n     * @notice Update the flow rate between ctx.msgSender and receiver\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param receiver Flow receiver address\\n     * @param flowRate New flow rate in amount per second\\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementUpdated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Only the flow sender may update the flow rate\\n     * - Even if the flow rate is zero, the flow is not deleted\\n     * from the system\\n     * - Deposit amount will be adjusted accordingly\\n     * - No new gas fee is charged\\n     */\\n    function updateFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n\\n    /**\\n     * @dev Get the flow data between `sender` and `receiver` of `token`\\n     * @param token Super token address\\n     * @param sender Flow receiver\\n     * @param receiver Flow sender\\n     * @return timestamp Timestamp of when the flow is updated\\n     * @return flowRate The flow rate\\n     * @return deposit The amount of deposit the flow\\n     * @return owedDeposit The amount of owed deposit of the flow\\n     */\\n    function getFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @notice Get flow data using agreementId\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param agreementId The agreement ID\\n     * @return timestamp Timestamp of when the flow is updated\\n     * @return flowRate The flow rate\\n     * @return deposit The deposit amount of the flow\\n     * @return owedDeposit The owed deposit amount of the flow\\n     */\\n    function getFlowByID(\\n       ISuperfluidToken token,\\n       bytes32 agreementId\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get the aggregated flow info of the account\\n     * @param token Super token address\\n     * @param account Account for the query\\n     * @return timestamp Timestamp of when a flow was last updated for account\\n     * @return flowRate The net flow rate of token for account\\n     * @return deposit The sum of all deposits for account's flows\\n     * @return owedDeposit The sum of all owed deposits for account's flows\\n     */\\n    function getAccountFlowInfo(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @dev Get the net flow rate of the account\\n     * @param token Super token address\\n     * @param account Account for the query\\n     * @return flowRate Net flow rate\\n     */\\n    function getNetFlow(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @notice Delete the flow between sender and receiver\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\\n     * @param receiver Flow receiver address\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementTerminated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Both flow sender and receiver may delete the flow\\n     * - If Sender account is insolvent or in critical state, a solvency agent may\\n     *   also terminate the agreement\\n     * - Gas fee may be returned to the sender\\n     */\\n    function deleteFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n     /**\\n      * @dev Flow updated event\\n      * @param token Super token address\\n      * @param sender Flow sender address\\n      * @param receiver Flow recipient address\\n      * @param flowRate Flow rate in amount per second for this flow\\n      * @param totalSenderFlowRate Total flow rate in amount per second for the sender\\n      * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\\n      * @param userData The user provided data\\n      */\\n     event FlowUpdated(\\n         ISuperfluidToken indexed token,\\n         address indexed sender,\\n         address indexed receiver,\\n         int96 flowRate,\\n         int256 totalSenderFlowRate,\\n         int256 totalReceiverFlowRate,\\n         bytes userData\\n     );\\n\\n}\\n\",\"keccak256\":\"0x5885d4630de3f671ca803ef003771bed0f88a57e0eefb4f4ed684db5ec1553c6\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\n/**\\n * @title Super app definitions library\\n * @author Superfluid\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n\\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\\n    }\\n}\\n\\n/**\\n * @title Context definitions library\\n * @author Superfluid\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @title Batch operation library\\n * @author Superfluid\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev Superfluid.callAgreement batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev Superfluid.callAppAction batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\n/**\\n * @title Superfluid governance configs library\\n * @author Superfluid\\n */\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\\\");\\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY = \\n        keccak256(\\\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\\\");\\n\\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.trustedForwarder\\\",\\n            forwarder));\\n    }\\n\\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\\\",\\n            deployer,\\n            registrationKey));\\n    }\\n\\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.factory\\\",\\n            factory));\\n    }\\n\\n    function decodePPPConfig(uint256 pppConfig) internal pure returns (uint256 liquidationPeriod, uint256 patricianPeriod) {\\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\\n        patricianPeriod = pppConfig & type(uint32).max;\\n    }\\n}\\n\",\"keccak256\":\"0x2e92713e66eb26b3593bda5e6f8ff7f33c8de7b58de749e60a181dd88150e20d\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Super agreement interface\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Get the type of the agreement class\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class\\n     * @param account Account the state belongs to\\n     * @param time Time used for the calculation\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\\n     * @return deposit Account deposit amount of this agreement\\n     * @return owedDeposit Account owed deposit amount of this agreement\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xc3a6a907245116bcecc70fe4b207454012e8ce4fa190228fb8bbe39e0b1bc5cf\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n/**\\n * @title SuperApp interface\\n * @author Superfluid\\n * @dev Be aware of the app being jailed, when the word permitted is used.\\n *\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0x57f4203168992c940eb6b8c7cc75f854cb36a1f9323b3f39ddc5e4fbe819c043\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /**\\n     * @dev Initialize the contract\\n     */\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     *         zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     *         allowance mechanism. `amount` is then deducted from the caller's\\n     *         allowance.\\n     *\\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     *         means all token operations (creation, movement and destruction) must have\\n     *         amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\\n     *      the corresponding functions will be called with `data` and empty\\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n   /**\\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\\n    * spend tokens of `sender`.\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfTransferFrom(\\n        address sender,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n   ) external;\\n\\n   /**\\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\\n    * `account`.\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfApproveFor(\\n        address account,\\n        address spender,\\n        uint256 amount\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account where tokens are upgraded to\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0x3cb0b7216007b942f7611d7b3d983c0df9408fdd4fd6b799c33fc9033e0abf8b\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n/**\\n * @title Super token factory interface\\n * @author Superfluid\\n */\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    /**\\n      * @dev Super token logic created event\\n      * @param tokenLogic Token logic address\\n      */\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    /**\\n      * @dev Super token created event\\n      * @param token Newly created super token address\\n      */\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n    /**\\n      * @dev Custom super token created event\\n      * @param token Newly created custom super token address\\n      */\\n    event CustomSuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x68a466c978557e47bd7385b1d7d78f1c8fb07462a870efc5a791008e33a4f535\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n/**\\n * @title Host interface\\n * @author Superfluid\\n * NOTE:\\n * This is the central contract of the system where super agreement, super app\\n * and super token features are connected.\\n *\\n * The Superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Time\\n     *\\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\\n     * > Neo: Then why can't I see what happens to her?\\n     * > The Oracle: We can never see past the choices we don't understand.\\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\\n     *************************************************************************/\\n\\n    function getNow() external view returns (uint256);\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governance address of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n    /**\\n     * @dev Governance replaced event\\n     * @param oldGov Address of the old governance contract\\n     * @param newGov Address of the new governance contract\\n     */\\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic Initial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n    /**\\n     * @notice Agreement class registered event\\n     * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n     * @param agreementType The agreement type registered\\n     * @param code Address of the new agreement\\n     */\\n    event AgreementClassRegistered(bytes32 agreementType, address code);\\n\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n    /**\\n     * @notice Agreement class updated event\\n     * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n     * @param agreementType The agreement type updated\\n     * @param code Address of the new agreement\\n     */\\n    event AgreementClassUpdated(bytes32 agreementType, address code);\\n\\n    /**\\n    * @notice Check if the agreement type is whitelisted\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @notice Get agreement class\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @notice Create a new bitmask by adding a agreement class to it\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @notice Create a new bitmask by removing a agreement class from it\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n    /**\\n     * @dev SuperToken factory updated event\\n     * @param newFactory Address of the new factory\\n     */\\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\\n\\n    /**\\n     * @notice Update the super token logic to the latest\\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n    /**\\n     * @dev SuperToken logic updated event\\n     * @param code Address of the new SuperToken logic\\n     */\\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     * `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n    /**\\n     * @dev App registered event\\n     * @param app Address of jailed app\\n     */\\n    event AppRegistered(ISuperApp indexed app);\\n\\n    /**\\n     * @dev Message sender declares it as a super app, using a registration key\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     * `SuperAppDefinitions`\\n     * @param registrationKey The registration key issued by the governance\\n     */\\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\\n\\n    /**\\n     * @dev Message sender declares app as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     * `SuperAppDefinitions`\\n     * NOTE: only factory contracts authorized by governance can register super apps\\n     */\\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The target super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app is allowed to call the target app as downstream app\\n     * @param app Super app address\\n     * @param targetApp The target super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed,\\n        ISuperfluidToken appAllowanceToken\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 appAllowanceWantedMore,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n    /**\\n     * @dev Jail event for the app\\n     * @param app Address of jailed app\\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param agreementClass The agreement address you are calling\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @notice Call app action\\n     * @dev Main use case is calling app action in a batch call via the host\\n     * @param callData The contextual call data\\n     *\\n     * NOTE: See \\\"Contextless Call Proxies\\\" above for more about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Context Struct\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n        // app address\\n        address appAddress;\\n        // app allowance in super token\\n        ISuperfluidToken appAllowanceToken;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation type. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function for trusted forwarders (EIP-2771)\\n     * @param operations Array of batch operations\\n     */\\n    function forwardBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage doesn't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0xb47488f67a2669e8166364ed471a1dd16039b155b6a87192c3be53ad25f3b0f7\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @title Superfluid governance interface\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function batchUpdateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken[] calldata tokens) external;\\n    \\n    /**\\n     * @dev Set configuration as address value\\n     */\\n    function setConfig(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key,\\n        address value\\n    ) external;\\n    \\n    /**\\n     * @dev Set configuration as uint256 value\\n     */\\n    function setConfig(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev Clear configuration\\n     */\\n    function clearConfig(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key\\n    ) external;\\n\\n    /**\\n     * @dev Get configuration as address value\\n     */\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /**\\n     * @dev Get configuration as uint256 value\\n     */\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x2166f766b7f61f9bb1376b0948efa0d0c0046b93dc301e51ce495203b145189b\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid token interface\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**\\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\\n     *\\n     * Note:\\n     * - version: 1\\n     * - liquidationType key:\\n     *    - 0 = reward account receives reward (PIC period)\\n     *    - 1 = liquidator account receives reward (Pleb period)\\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\\n     */\\n    struct LiquidationTypeData {\\n        uint256 version;\\n        uint8 liquidationType;\\n    }\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @notice Calculate the realtime balance given the current host.getNow() value\\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\\n     * @param account for the query\\n     * @return availableBalance Real-time balance\\n     * @return deposit Account deposit\\n     * @return owedDeposit Account owed Deposit\\n     */\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @notice Check if account is critical\\n    * @dev A critical account is when availableBalance < 0\\n    * @param account The account to check\\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\\n    * @return isCritical Whether the account is critical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @notice Check if account is critical now (current host.getNow())\\n    * @dev A critical account is when availableBalance < 0\\n    * @param account The account to check\\n    * @return isCritical Whether the account is critical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @notice Check if account is solvent\\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\\n     * @param account The account to check\\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @notice Check if account is solvent now\\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\\n     * @param account The account to check\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @notice Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n    /**\\n     * @dev Agreement created event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n    /**\\n     * @dev Agreement updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n    /**\\n     * @dev Agreement terminated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of an agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @notice Settle balance from an account by the agreement\\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Make liquidation payouts (v2)\\n     * @param id Agreement ID\\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAmount The amount the reward recepient account will receive\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     *\\n     * - If a bailout is required (bailoutAmount > 0)\\n     *   - the actual reward (single deposit) goes to the executor,\\n     *   - while the reward account becomes the bailout account\\n     *   - total bailout include: bailout amount + reward amount\\n     *   - the targetAccount will be bailed out\\n     * - If a bailout is not required\\n     *   - the targetAccount will pay the rewardAmount\\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayoutsV2\\n    (\\n        bytes32 id,\\n        bytes memory liquidationTypeData,\\n        address liquidatorAccount,\\n        bool useDefaultRewardAccount,\\n        address targetAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta\\n    ) external;\\n    /**\\n     * @dev Agreement liquidation event v2 (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAccount Account that collects the reward or bails out insolvent accounts\\n     * @param rewardAmount The amount the reward recipient account balance should change by\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if the agreement is liquidated during the PIC period\\n     *   - the rewardAccount will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\\n     *   - the liquidatorAccount will get the rewardAmount (remaining deposit)\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the targetAccount is insolvent\\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\\n     *   - the rewardAccount will pay for both the rewardAmount and bailoutAmount\\n     *   - the targetAccount will receive the bailoutAmount\\n     */\\n    event AgreementLiquidatedV2(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed liquidatorAccount,\\n        address indexed targetAccount,\\n        address rewardAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta,\\n        bytes liquidationTypeData\\n    );\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n    /**************************************************************************\\n     * DEPRECATED\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     *\\n     * NOTE:\\n     *\\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     *\\n     * NOTE:\\n     *\\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param bondAccount Account that collect the reward or bailout accounts\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of liquidation bailouot\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if bailout is equal to 0, then\\n     *   - the bondAccount will get the rewardAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount.\\n     * - if bailout is larger than 0, then\\n     *   - the liquidatorAccount will get the rewardAmouont,\\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\\n     */\\n    event AgreementLiquidatedBy(\\n        address liquidatorAccount,\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed bondAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    );\\n}\\n\",\"keccak256\":\"0x9189eaba9e856cc4932ea29eeaf4e89a09448dde13860591691ec122856fdc75\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n/**\\n * @title ERC20 token with token info interface\\n * @author Superfluid\\n * @dev Using abstract contract instead of interfaces because old solidity\\n *      does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x66708dae3fcd06e6fc0a46f2959fc2d1e6b9361f28598337339d26af8eb8c0f9\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\n/**\\n * @title ERC20 token info interface\\n * @author Superfluid\\n * @dev ERC20 standard interface does not specify these functions, but\\n *      often the token implementations have them.\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70e573644a0ff271c0ccef526809e9d9ab4950ec58755ca84e833cde3b8f3df0\",\"license\":\"AGPLv3\"},\"src/creaton/CreatorV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./ICreatonAdmin.sol\\\";\\nimport \\\"./NFTFactory.sol\\\";\\nimport \\\"./Post.sol\\\";\\nimport \\\"../dependency/gsn/BaseRelayRecipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperAgreement,\\n    SuperAppDefinitions\\n} from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nimport {\\n    IConstantFlowAgreementV1\\n} from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\n\\nimport {SuperAppBase} from \\\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\\\";\\n\\nimport { IUnlock, IPublicLock } from \\\"./unlock/IUnlock.sol\\\";\\n\\ncontract CreatorV1 is SuperAppBase, Initializable, BaseRelayRecipient {\\n    // -----------------------------------------\\n    // Errors\\n    // -----------------------------------------\\n\\n    string private constant _ERR_STR_LOW_FLOW_RATE = \\\"Superfluid: flow rate not enough\\\";\\n    string private constant _ERR_STR_NO_UPFRONT = \\\"Creaton: pay monthly amount upfront first\\\";\\n\\n    // -----------------------------------------\\n    // Structures\\n    // -----------------------------------------\\n\\n    enum Status {unSubscribed, subscribed}\\n    enum Type {free, encrypted}\\n\\n    event SubscriberEvent(address user, Status status);\\n    event NewPost(uint256 tokenId, string jsonData, Type contentType);\\n    event PostContract(address nftContract);\\n    event HidePost(uint256 tokenId, bool hide);\\n\\n    struct Subscriber {\\n        Status status;\\n    }\\n\\n    // -----------------------------------------\\n    // Storage\\n    // -----------------------------------------\\n\\n    ISuperfluid private _host; // host\\n    IConstantFlowAgreementV1 private _cfa; // the stored constant flow agreement class address\\n    ISuperToken private _acceptedToken; // accepted token\\n\\n    address public admin;\\n    address public creator;\\n    ICreatonAdmin adminContract;\\n    NFTFactory nftFactory;\\n    IUnlock unlockProtocol;\\n    address public unlockLock;\\n\\n    string public description;\\n    int96 public subscriptionPrice;\\n    int96 private _MINIMUM_FLOW_RATE;\\n    mapping(address => Subscriber) public subscribers;\\n    uint256 subscriberCount; // subscribers in subscribed/pendingSubscribe state\\n    address public postNFT;\\n    mapping(uint256 => Type) post2tier;\\n    uint256 uIntSubscriptionPrice;\\n    mapping(address => bool) public payedUpfront;\\n\\n    // -----------------------------------------\\n    // Initializer\\n    // -----------------------------------------\\n\\n    function initialize(\\n        address host,\\n        address cfa,\\n        address acceptedToken,\\n        address _creator,\\n        string memory _description,\\n        uint256 _subscriptionPrice,\\n        string memory nftName,\\n        string memory nftSymbol,\\n        address _trustedForwarder\\n    ) public payable initializer {\\n        admin = _msgSender();\\n\\n        assert(address(host) != address(0));\\n        assert(address(cfa) != address(0));\\n        assert(address(acceptedToken) != address(0));\\n\\n        _host = ISuperfluid(host);\\n        _cfa = IConstantFlowAgreementV1(cfa);\\n        _acceptedToken = ISuperToken(acceptedToken);\\n        trustedForwarder = _trustedForwarder;\\n        //uint256 configWord = SuperAppDefinitions.APP_LEVEL_FINAL;\\n        //_host.registerApp(configWord);\\n\\n        creator = _creator;\\n        description = _description;\\n        uIntSubscriptionPrice = _subscriptionPrice * 1e18;\\n        subscriptionPrice = int96(uint96(_subscriptionPrice));\\n        _MINIMUM_FLOW_RATE = (subscriptionPrice * 1e18) / (3600 * 24 * 30);\\n\\n        adminContract = ICreatonAdmin(admin);\\n        nftFactory = NFTFactory(adminContract.nftFactory());\\n        createPostNFT(nftName, nftSymbol);\\n\\n        unlockProtocol = IUnlock(0xE8E5cd156f89F7bdB267EabD5C43Af3d5AF2A78f); //Polygon v10\\n\\n        uint256 version = unlockProtocol.unlockVersion();\\n        bytes12 salt = bytes12(keccak256(abi.encodePacked(_MINIMUM_FLOW_RATE, _acceptedToken)));\\n        IPublicLock lock = IPublicLock(unlockProtocol.createLock(315360000, address(acceptedToken), 0, 10000000, nftName, salt));\\n        lock.addLockManager(_msgSender());\\n        lock.addKeyGranter(_msgSender());\\n        lock.setEventHooks(address(this), address(this));\\n        //lock.setBaseTokenURI(\\\"https://api.backer.vip/keys/\\\");\\n        lock.updateLockSymbol(nftSymbol); // TODO: change?\\n        unlockLock = address(lock);\\n        // TODO: config the lock: symbol, image, callbacks, etc. -- need Lock interface\\n        //Tier memory tier = Tier(address(lock), flowRate, token, multiplier, name, metadata, true);\\n\\n        //Creator subscribes to themselves\\n        _addSubscriber(creator);\\n        grantKeys(creator);\\n    }\\n\\n    // -----------------------------------------\\n    // Logic\\n    // -----------------------------------------\\n\\n    receive() external payable {}\\n\\n    function withdrawEth() public onlyCreator {\\n        (bool success, ) = _msgSender().call{value: (address(this).balance)}(\\\"Not admin\\\");\\n        require(success, \\\"No balance\\\");\\n    }\\n\\n    function recoverTokens(address _token) external onlyCreator {\\n        IERC20(_token).approve(address(this), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        IERC20(_token).transfer(_msgSender(), IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    function changeStatus(address _address, Status status) private {\\n        subscribers[_address].status = status;\\n        emit SubscriberEvent(_address, status);\\n    }\\n\\n    function getSubscriberCount() public view returns (uint256) {\\n        return subscriberCount;\\n    }\\n\\n    function createPostNFT(string memory name, string memory symbol) internal {\\n        require(postNFT == address(0));\\n        postNFT = nftFactory.createPostNFT(name, symbol, \\\"\\\", address(this));\\n        emit PostContract(postNFT);\\n    }\\n\\n    function upload(\\n        string memory _metadataURI,\\n        string memory _dataJSON,\\n        Type contentType\\n    ) external onlyCreator {\\n        require(postNFT != address(0));\\n        require(contentType == Type.free || contentType == Type.encrypted);\\n        uint256 tokenId = Post(postNFT).mint(creator, _metadataURI);\\n        post2tier[tokenId] = contentType;\\n        emit NewPost(tokenId, _dataJSON, contentType);\\n    }\\n\\n    function hidePost(uint256 tokenId, bool hide) external onlyCreator {\\n        emit HidePost(tokenId, hide);\\n    }\\n\\n    // -----------------------------------------\\n    // utility\\n    // -----------------------------------------\\n\\n    function percentage(int96 num, int96 percent) public pure returns (int96) {\\n        return (num * percent) / 100;\\n    }\\n\\n    function versionRecipient() external view virtual override returns (string memory) {\\n        return \\\"2.2.3-matic\\\";\\n    }\\n\\n    function isTrustedForwarderAdmin(address forwarder) public view returns (bool) {\\n        return forwarder == adminContract.getTrustedForwarder();\\n    }\\n\\n    function updateTrustedForwarder(address _trustedForwarder) public onlyCreator {\\n        trustedForwarder = _trustedForwarder;\\n    }\\n\\n    /// @dev Take entrance fee from the user and issue a ticket\\n    function upfrontFee(bytes calldata ctx) external onlyHost returns (bytes memory newCtx) {\\n        // msg sender is encoded in the Context\\n        address sender = _host.decodeCtx(ctx).msgSender;\\n        _acceptedToken.transferFrom(sender, creator, uIntSubscriptionPrice);\\n        payedUpfront[sender] = true;\\n        return ctx;\\n    }\\n\\n    // -----------------------------------------\\n    // Superfluid Logic\\n    // -----------------------------------------\\n\\n    function _openFlows(\\n        bytes calldata ctx,\\n        int96 contract2creator,\\n        int96 contract2treasury\\n    ) private returns (bytes memory newCtx) {\\n        // open flow to creator\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(_cfa.createFlow.selector, _acceptedToken, creator, contract2creator, new bytes(0)),\\n            new bytes(0),\\n            ctx\\n        );\\n\\n        // open flow to treasury\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.createFlow.selector,\\n                _acceptedToken,\\n                adminContract.treasury(),\\n                contract2treasury,\\n                new bytes(0)\\n            ),\\n            new bytes(0),\\n            newCtx\\n        );\\n    }\\n\\n    function _updateFlows(\\n        bytes calldata ctx,\\n        int96 contract2creator,\\n        int96 contract2treasury\\n    ) private returns (bytes memory newCtx) {\\n        // update flow to creator\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(_cfa.updateFlow.selector, _acceptedToken, creator, contract2creator, new bytes(0)),\\n            new bytes(0),\\n            ctx\\n        );\\n\\n        // update flow to treasury\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.updateFlow.selector,\\n                _acceptedToken,\\n                adminContract.treasury(),\\n                contract2treasury,\\n                new bytes(0)\\n            ), // call data\\n            new bytes(0), // user data\\n            newCtx // ctx\\n        );\\n    }\\n\\n    function _deleteFlows(bytes calldata ctx) private returns (bytes memory newCtx) {\\n        // delete flow to creator\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(_cfa.deleteFlow.selector, _acceptedToken, address(this), creator, new bytes(0)),\\n            new bytes(0),\\n            ctx\\n        );\\n\\n        // delete flow to treasury\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.deleteFlow.selector,\\n                _acceptedToken,\\n                address(this),\\n                adminContract.treasury(),\\n                new bytes(0)\\n            ), // call data\\n            new bytes(0), // user data\\n            newCtx // ctx\\n        );\\n    }\\n\\n    function _addSubscriber(address _address) private {\\n        subscriberCount += 1;\\n        changeStatus(_address, Status.subscribed);\\n    }\\n\\n    function _delSubscriber(address _address) private {\\n        subscriberCount -= 1;\\n        changeStatus(_address, Status.unSubscribed);\\n        delete subscribers[_address];\\n    }\\n\\n    function _subscribe(\\n        bytes calldata ctx,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata cbdata\\n    ) private returns (bytes memory newCtx) {\\n        (, int96 flowRate, , ) = IConstantFlowAgreementV1(agreementClass).getFlowByID(_acceptedToken, agreementId);\\n        require(flowRate >= _MINIMUM_FLOW_RATE, _ERR_STR_LOW_FLOW_RATE);\\n        ISuperfluid.Context memory context = _host.decodeCtx(ctx); // should give userData\\n        require(payedUpfront[context.msgSender] == true, _ERR_STR_NO_UPFRONT);\\n\\n        int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\\n        int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasuryFee());\\n        int96 contract2treasuryDelta = contractFlowRate - contract2creatorDelta;\\n\\n        //Grant Unlock NFT and key to subscriber\\n        grantKeys(context.msgSender);\\n\\n        if (subscriberCount == 1) {\\n            //creator are subscribed to themselves already\\n            newCtx = _openFlows(ctx, contract2creatorDelta, contract2treasuryDelta);\\n        } else if (subscriberCount > 1) {\\n            (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\\n            (, int96 contract2treasuryCurrent, , ) =\\n                _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\\n            newCtx = _updateFlows(\\n                ctx,\\n                contract2creatorCurrent + contract2creatorDelta,\\n                contract2treasuryCurrent + contract2treasuryDelta\\n            );\\n        }\\n\\n        payedUpfront[context.msgSender] = false;\\n\\n        _addSubscriber(context.msgSender);\\n    }\\n\\n    function _updateSubscribe(\\n        bytes calldata ctx,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata cbdata\\n    ) private returns (bytes memory newCtx) {\\n        (, int96 flowRate, , ) = IConstantFlowAgreementV1(agreementClass).getFlowByID(_acceptedToken, agreementId);\\n        require(flowRate >= _MINIMUM_FLOW_RATE, _ERR_STR_LOW_FLOW_RATE);\\n\\n        int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\\n        int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasuryFee());\\n        int96 contract2treasuryDelta = contractFlowRate - contract2creatorDelta;\\n\\n        (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\\n        (, int96 contract2treasuryCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\\n        newCtx = _updateFlows(\\n            ctx,\\n            contract2creatorCurrent + contract2creatorDelta,\\n            contract2treasuryCurrent + contract2treasuryDelta\\n        );\\n    }\\n\\n    function _unsubscribe(bytes calldata ctx) private returns (bytes memory newCtx) {\\n        address sender = _host.decodeCtx(ctx).msgSender;\\n\\n        //delete Unlock NFT key (Unlock NFT do not get burned)\\n        IPublicLock lock = IPublicLock(unlockLock);\\n        if (lock.getHasValidKey(sender)) {\\n            lock.expireAndRefundFor(sender, 0);\\n        }\\n\\n        _delSubscriber(sender);\\n        \\n        if (subscriberCount == 1) {\\n            newCtx = _deleteFlows(ctx);\\n        } else if (subscriberCount > 0) {\\n            int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\\n            int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasuryFee());\\n            int96 contract2treasuryDelta = contractFlowRate - contract2creatorDelta;\\n\\n            (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\\n            (, int96 contract2treasuryCurrent, , ) =\\n                _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\\n\\n            newCtx = _updateFlows(\\n                ctx,\\n                contract2creatorCurrent + contract2creatorDelta,\\n                contract2treasuryCurrent + contract2treasuryDelta\\n            );\\n        }\\n    }\\n\\n    function grantKeys(address msgSender) internal {\\n        IPublicLock lock = IPublicLock(unlockLock);\\n        address[] memory _recipients = new address[](1);\\n        uint[] memory _expirationTimestamps = new uint[](1);\\n        address[] memory _keyManagers = new address[](1);\\n        _recipients[0] = msgSender;\\n        _expirationTimestamps[0] = 2236879077;\\n        _keyManagers[0] = address(this);\\n        //bool isManager = lock.isLockManager(address(this));\\n        //bool isGranter = lock.isKeyGranter(address(this));\\n        lock.grantKeys(_recipients, _expirationTimestamps, _keyManagers);\\n    }\\n\\n    // -----------------------------------------\\n    // Superfluid Callbacks\\n    // -----------------------------------------\\n\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32, /*agreementId*/\\n        bytes calldata, /*agreementData*/\\n        bytes calldata ctx\\n    ) external view override onlyHost onlyExpected(superToken, agreementClass) returns (bytes memory cbdata) {\\n        cbdata = new bytes(0);\\n    }\\n\\n    function afterAgreementCreated(\\n        ISuperToken, /* superToken */\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata, /*agreementData*/\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    ) external override onlyHost returns (bytes memory newCtx) {\\n        return _subscribe(ctx, agreementClass, agreementId, cbdata);\\n    }\\n\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata, /*agreementData*/\\n        bytes calldata /*ctx*/\\n    ) external view override onlyHost onlyExpected(superToken, agreementClass) returns (bytes memory cbdata) {\\n        cbdata = new bytes(0);\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken, /* superToken */\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata, /*agreementData*/\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    ) external override onlyHost returns (bytes memory newCtx) {\\n        return _updateSubscribe(ctx, agreementClass, agreementId, cbdata);\\n    }\\n\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32, /*agreementId*/\\n        bytes calldata, /*agreementData*/\\n        bytes calldata /*ctx*/\\n    ) external view override onlyHost returns (bytes memory cbdata) {\\n        // According to the app basic law, we should never revert in a termination callback\\n        if (!_isSameToken(superToken) || !_isCFAv1(agreementClass)) return abi.encode(true);\\n        return abi.encode(false);\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken, /* superToken */\\n        address, /* agreementClass */\\n        bytes32, /* agreementId */\\n        bytes calldata, /*agreementData*/\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    ) external override onlyHost returns (bytes memory newCtx) {\\n        // According to the app basic law, we should never revert in a termination callback\\n        bool shouldIgnore = abi.decode(cbdata, (bool));\\n        if (shouldIgnore) return ctx;\\n        return _unsubscribe(ctx);\\n    }\\n\\n    function _isSameToken(ISuperToken superToken) private view returns (bool) {\\n        return address(superToken) == address(_acceptedToken);\\n    }\\n\\n    function _isCFAv1(address agreementClass) private view returns (bool) {\\n        return\\n            ISuperAgreement(agreementClass).agreementType() ==\\n            keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    // -----------------------------------------\\n    // Modifiers\\n    // -----------------------------------------\\n\\n    modifier onlyHost() {\\n        require(_msgSender() == address(_host), \\\"CreatonSuperApp: support only one host\\\");\\n        _;\\n    }\\n\\n    modifier onlyExpected(ISuperToken superToken, address agreementClass) {\\n        require(_isSameToken(superToken), \\\"CreatonSuperApp: not accepted token\\\");\\n        require(_isCFAv1(agreementClass), \\\"CreatonSuperApp: only CFAv1 supported\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreator() {\\n        require(_msgSender() == creator, \\\"Not the creator\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2f966ce12d41828e37a26aab39731bbce72eb750e508c57d797e5184d7562b51\",\"license\":\"MIT\"},\"src/creaton/ICreatonAdmin.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ICreatonAdmin {\\n\\n    function treasury() external returns (address);\\n\\n    function treasuryFee() external returns (int96);\\n\\n    function nftFactory() external returns (address);\\n\\n    function registeredUsers(address) external returns (bool);\\n\\n    function getTrustedForwarder() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x69ad125172cdff62e2f0bd912beffa338ae9cc74434695e03e82d9d98b762f56\"},\"src/creaton/NFTFactory.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./Post.sol\\\";\\n\\ncontract NFTFactory {\\n    constructor() {}\\n\\n    function createPostNFT(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address minter\\n    ) public returns (address) {\\n        return address(new Post(name, symbol, baseTokenURI, minter));\\n    }\\n}\\n\",\"keccak256\":\"0xa00a64a1be8856cde9433a535e0f412b8424e5532f3707e74982499d921cd950\"},\"src/creaton/Post.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract Post is Context, AccessControlEnumerable, ERC721URIStorage, ERC721Burnable, ERC721Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenId;\\n    string private _baseTokenURI;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address minter\\n    ) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, minter);\\n        _setupRole(MINTER_ROLE, minter);\\n        _setupRole(PAUSER_ROLE, minter);\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function mint(address to, string memory _metadataURI) public returns (uint256) {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n        _mint(to, _tokenId.current());\\n        _setTokenURI(_tokenId.current(), _metadataURI);\\n        _tokenId.increment();\\n        return (_tokenId.current() - 1);\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual override(ERC721URIStorage, ERC721) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage, ERC721) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7de5abd108203a99faa3955e26703c50caae1f200ca9a03ad413bd846a0ab10e\"},\"src/creaton/unlock/IUnlock.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUnlock\\r\\n{\\r\\n\\r\\n  /**\\r\\n  * @dev Create lock\\r\\n  * This deploys a lock for a creator. It also keeps track of the deployed lock.\\r\\n  * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\r\\n  * @param _salt an identifier for the Lock, which is unique for the user.\\r\\n  * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\r\\n  * to know the lock's address before the transaction is mined.\\r\\n  */\\r\\n  function createLock(\\r\\n    uint _expirationDuration,\\r\\n    address _tokenAddress,\\r\\n    uint _keyPrice,\\r\\n    uint _maxNumberOfKeys,\\r\\n    string calldata _lockName,\\r\\n    bytes12 _salt\\r\\n  ) external returns (address);\\r\\n\\r\\n    /**\\r\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\r\\n   * to the referrer, if applicable.\\r\\n   * The number of discount tokens granted is based on the value of the referal,\\r\\n   * the current growth rate and the lock's discount token distribution rate\\r\\n   * This function is invoked by a previously deployed lock only.\\r\\n   */\\r\\n  function recordKeyPurchase(\\r\\n    uint _value,\\r\\n    address _referrer // solhint-disable-line no-unused-vars\\r\\n  )\\r\\n    external;\\r\\n\\r\\n    function unlockVersion() external pure returns(uint16);\\r\\n\\r\\n}\\r\\n\\r\\ninterface  IPublicLock {\\r\\n\\r\\n    function updateLockSymbol(\\r\\n        string calldata _lockSymbol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n   * Allows a Lock manager to update the baseTokenURI for this Lock.\\r\\n   * @dev Throws if called by other than a Lock manager\\r\\n   * @param _baseTokenURI String representing the base of the URI for this lock.\\r\\n   */\\r\\n  function setBaseTokenURI(\\r\\n    string calldata _baseTokenURI\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a Lock manager to add or remove an event hook\\r\\n   */\\r\\n  function setEventHooks(\\r\\n    address _onKeyPurchaseHook,\\r\\n    address _onKeyCancelHook\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\r\\n   * Each key may be assigned a different expiration date.\\r\\n   * @dev Throws if called by other than a Lock manager\\r\\n   * @param _recipients An array of receiving addresses\\r\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\r\\n   */\\r\\n  function grantKeys(\\r\\n    address[] calldata _recipients,\\r\\n    uint[] calldata _expirationTimestamps,\\r\\n    address[] calldata _keyManagers\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Find the tokenId for a given user\\r\\n   * @return The tokenId of the NFT, else returns 0\\r\\n   * @param _account The address of the key owner\\r\\n  */\\r\\n  function getTokenIdFor(\\r\\n    address _account\\r\\n  ) external view returns (uint);\\r\\n\\r\\n     /**\\r\\n   * Checks if the user has a non-expired key.\\r\\n   * @param _user The address of the key owner\\r\\n   */\\r\\n  function getHasValidKey(\\r\\n    address _user\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev allows the key manager to expire a given tokenId\\r\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\r\\n   * @param _tokenId The id of the key to cancel.\\r\\n   */\\r\\n  function cancelAndRefund(uint _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key\\r\\n   * @param _keyOwner The key owner to whom we wish to send a refund to\\r\\n   * @param amount The amount to refund the key-owner\\r\\n   * @dev Throws if called by other than a Lock manager\\r\\n   * @dev Throws if _keyOwner does not have a valid key\\r\\n   */\\r\\n  function expireAndRefundFor(\\r\\n    address _keyOwner,\\r\\n    uint amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Cancels a key managed by a different user and sends the funds to the keyOwner.\\r\\n   * @param _keyManager the key managed by this user will be canceled\\r\\n   * @param _v _r _s getCancelAndRefundApprovalHash signed by the _keyManager\\r\\n   * @param _tokenId The key to cancel\\r\\n   */\\r\\n  function cancelAndRefundFor(\\r\\n    address _keyManager,\\r\\n    uint8 _v,\\r\\n    bytes32 _r,\\r\\n    bytes32 _s,\\r\\n    uint _tokenId\\r\\n  ) external;\\r\\n\\r\\n/**\\r\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\r\\n  * @param _keyOwner address of the user for whom we search the key\\r\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\r\\n  */\\r\\n  function keyExpirationTimestampFor(\\r\\n    address _keyOwner\\r\\n  ) external view returns (uint timestamp);\\r\\n\\r\\n  function addKeyGranter(address account) external;\\r\\n\\r\\n  function addLockManager(address account) external;\\r\\n\\r\\n  function isKeyGranter(address account) external view returns (bool);\\r\\n\\r\\n  function isLockManager(address account) external view returns (bool);\\r\\n\\r\\n \\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xcf421fd08c54f02749c71c9300a49e6ed060151e394ad682695672f0c174bc83\"},\"src/dependency/gsn/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.7.6;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public view override returns (bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal view virtual override returns (bytes memory ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28815e97e5fad876f63ae0add30a976caaa1257f1f662d796bda2508f577a4a9\",\"license\":\"GPL-3.0-only\"},\"src/dependency/gsn/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa1598b160b74fd1fd0e79dda3af829bf6ad3e496b843a26c5ba6940c87c7b256\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614236806100206000396000f3fe6080604052600436106101b05760003560e01c80638576b2e1116100ec578063c0e8e38c1161008a578063d86ed3e511610064578063d86ed3e51461050d578063ee1cc8561461052d578063f851a4401461054d578063f90b03111461056d57600080fd5b8063c0e8e38c1461049d578063cbd5497c146104cd578063d6507191146104ed57600080fd5b806388f9c946116100c657806388f9c9461461043c578063a0ef91df1461045c578063a4190f4c14610471578063bdc8e54c1461048457600080fd5b80638576b2e1146103fc578063884d1f401461029957806388c3c65b1461041c57600080fd5b8063486ff0cd116101595780635745ae28116101335780635745ae28146103645780635f9e7d77146103a15780637284e416146103c15780637da0a877146103d657600080fd5b8063486ff0cd146102b957806353c11f99146102ff578063572b6c051461031f57600080fd5b806317e703ab1161018a57806317e703ab1461024e578063230dbd291461026c57806330d9c9151461029957600080fd5b806302d05d3f146101bc578063123ff984146101f957806316114acd1461022c57600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506005546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b506102196102143660046133cb565b61058d565b604051600b9190910b81526020016101f0565b34801561023857600080fd5b5061024c610247366004613429565b6105ac565b005b34801561025a57600080fd5b50600d546040519081526020016101f0565b34801561027857600080fd5b5061028c61028736600461348f565b6107a4565b6040516101f091906135b6565b3480156102a557600080fd5b5061028c6102b43660046135c9565b61083e565b3480156102c557600080fd5b5060408051808201909152600b81527f322e322e332d6d61746963000000000000000000000000000000000000000000602082015261028c565b34801561030b57600080fd5b5061028c61031a36600461348f565b6109de565b34801561032b57600080fd5b5061035461033a366004613429565b6000546201000090046001600160a01b0390811691161490565b60405190151581526020016101f0565b34801561037057600080fd5b5061039461037f366004613429565b600c6020526000908152604090205460ff1681565b6040516101f0919061369c565b3480156103ad57600080fd5b5061028c6103bc3660046135c9565b610ac9565b3480156103cd57600080fd5b5061028c610bb8565b3480156103e257600080fd5b506000546101dc906201000090046001600160a01b031681565b34801561040857600080fd5b506009546101dc906001600160a01b031681565b34801561042857600080fd5b50610354610437366004613429565b610c46565b34801561044857600080fd5b50600e546101dc906001600160a01b031681565b34801561046857600080fd5b5061024c610ce8565b61024c61047f36600461379e565b610e1e565b34801561049057600080fd5b50600b8054610219910b81565b3480156104a957600080fd5b506103546104b8366004613429565b60116020526000908152604090205460ff1681565b3480156104d957600080fd5b5061024c6104e8366004613884565b611593565b3480156104f957600080fd5b5061024c61050836600461390e565b611746565b34801561051957600080fd5b5061028c61052836600461348f565b6117e1565b34801561053957600080fd5b5061028c610548366004613933565b61186b565b34801561055957600080fd5b506004546101dc906001600160a01b031681565b34801561057957600080fd5b5061024c610588366004613429565b611a63565b6000606461059b838561398b565b6105a59190613a2a565b9392505050565b6005546001600160a01b03166105c0611aff565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b60448201526064015b60405180910390fd5b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815230600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af1158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190613a7b565b50806001600160a01b031663a9059cbb6106b0611aff565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107319190613a98565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190613a7b565b5050565b6001546060906001600160a01b03166107bb611aff565b6001600160a01b0316146108205760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b61082e83838b8b8989611b57565b90505b9998505050505050505050565b6001546060906001600160a01b0316610855611aff565b6001600160a01b0316146108ba5760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b87876108d4826003546001600160a01b0391821691161490565b6109465760405162461bcd60e51b815260206004820152602360248201527f43726561746f6e53757065724170703a206e6f7420616363657074656420746f60448201527f6b656e00000000000000000000000000000000000000000000000000000000006064820152608401610604565b61094f81611f28565b6109c15760405162461bcd60e51b815260206004820152602560248201527f43726561746f6e53757065724170703a206f6e6c79204346417631207375707060448201527f6f727465640000000000000000000000000000000000000000000000000000006064820152608401610604565b505060408051600081526020810190915298975050505050505050565b6001546060906001600160a01b03166109f5611aff565b6001600160a01b031614610a5a5760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b6000610a6885870187613ab1565b90508015610ab05783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506108319350505050565b610aba8484611fb4565b9b9a5050505050505050505050565b6001546060906001600160a01b0316610ae0611aff565b6001600160a01b031614610b455760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b6003546001600160a01b038981169116141580610b685750610b6687611f28565b155b15610b8f576040805160016020820152016040516020818303038152906040529050610bad565b60408051600060208201520160405160208183030381529060405290505b979650505050505050565b600a8054610bc590613ace565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190613ace565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b505050505081565b600654604080517fce1b815f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ce1b815f9160048083019260209291908290030181865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190613b13565b6001600160a01b0316826001600160a01b0316149050919050565b6005546001600160a01b0316610cfc611aff565b6001600160a01b031614610d445760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b6000610d4e611aff565b6001600160a01b031647604051610d88907f4e6f742061646d696e0000000000000000000000000000000000000000000000815260090190565b60006040518083038185875af1925050503d8060008114610dc5576040519150601f19603f3d011682016040523d82523d6000602084013e610dca565b606091505b5050905080610e1b5760405162461bcd60e51b815260206004820152600a60248201527f4e6f2062616c616e6365000000000000000000000000000000000000000000006044820152606401610604565b50565b600054610100900460ff16610e395760005460ff1615610e3d565b303b155b610eaf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610604565b600054610100900460ff16158015610eee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610ef6611aff565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558a16610f2d57610f2d613b30565b6001600160a01b038916610f4357610f43613b30565b6001600160a01b038816610f5957610f59613b30565b6001805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038d8116919091179092556002805482168c84161790556003805482168b8416179055600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000086851602179055600580549091169189169190911790558551610ff490600a906020890190613323565b5061100785670de0b6b3a7640000613b46565b601055600b80546bffffffffffffffffffffffff19166bffffffffffffffffffffffff87161780825562278d009161104991900b670de0b6b3a764000061398b565b6110539190613a2a565b600b80546bffffffffffffffffffffffff929092166c01000000000000000000000000027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff909216919091179055600480546006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169182179055604080517fd63843cd0000000000000000000000000000000000000000000000000000000081529051919263d63843cd92828201926020929082900301816000875af1158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190613b13565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905561117f8484612403565b6008805473ffffffffffffffffffffffffffffffffffffffff191673e8e5cd156f89f7bdb267eabd5c43af3d5af2a78f908117909155604080517f4220bd46000000000000000000000000000000000000000000000000000000008152905160009291634220bd469160048083019260209291908290030181865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190613b65565b600b54600354604080516c0100000000000000000000000090930460a01b602084015260609190911b6bffffffffffffffffffffffff1916602c83015261ffff9290921692506000910160408051601f198184030181529082905280516020909101206008547f42d921060000000000000000000000000000000000000000000000000000000083529092506000916001600160a01b03909116906342d92106906112f0906312cc0300908f90869062989680908e908a90600401613b89565b6020604051808303816000875af115801561130f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113339190613b13565b9050806001600160a01b031663d250348561134c611aff565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561138d57600080fd5b505af11580156113a1573d6000803e3d6000fd5b50505050806001600160a01b031663564aa99d6113bc611aff565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b50506040517fad0e0a4d000000000000000000000000000000000000000000000000000000008152306004820181905260248201526001600160a01b038416925063ad0e0a4d9150604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b50506040517f782a4ade0000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063782a4ade91506114d39089906004016135b6565b600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50506009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03858116919091179091556005546115409350169050612505565b600554611555906001600160a01b0316612529565b505050801561158757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050505050505050565b6005546001600160a01b03166115a7611aff565b6001600160a01b0316146115ef5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b600e546001600160a01b031661160457600080fd5b600081600181111561161857611618613668565b14806116355750600181600181111561163357611633613668565b145b61163e57600080fd5b600e546005546040517fd0def5210000000000000000000000000000000000000000000000000000000081526000926001600160a01b039081169263d0def5219261169192909116908890600401613be7565b6020604051808303816000875af11580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190613a98565b6000818152600f602052604090208054919250839160ff19166001838181111561170057611700613668565b02179055507f56e18d3f05fcdacbb5f30945553714915803451f602499a7a4d9d278428490ed81848460405161173893929190613c11565b60405180910390a150505050565b6005546001600160a01b031661175a611aff565b6001600160a01b0316146117a25760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b6040805183815282151560208201527f3ceedf4498307ee012e3abe446727a5c95bf2b49b0123daeb2b9040112d50e3c91015b60405180910390a15050565b6001546060906001600160a01b03166117f8611aff565b6001600160a01b03161461185d5760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b61082e83838b8b898961269d565b6001546060906001600160a01b0316611882611aff565b6001600160a01b0316146118e75760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b600154604051631fb6491d60e11b81526000916001600160a01b031690633f6c923a9061191a9087908790600401613c6e565b600060405180830381865afa158015611937573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261195f9190810190613cf0565b606001516003546005546010546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0380861660048301529283166024820152604481019190915292935016906323b872dd906064016020604051808303816000875af11580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a039190613a7b565b506001600160a01b038116600090815260116020908152604091829020805460ff191660011790558151601f8601829004820281018201909252848252859085908190840183828082843760009201919091525092979650505050505050565b6005546001600160a01b0316611a77611aff565b6001600160a01b031614611abf5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600060143610801590611b2257506000546201000090046001600160a01b031633145b15611b5257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018590526060916000919087169063aabd266890604401608060405180830381865afa158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190613df7565b5050915050600b600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f75676881525090611c5d5760405162461bcd60e51b815260040161060491906135b6565b5060025460035460405163e8e7e2d160e01b81526001600160a01b039182166004820152306024820152600092919091169063e8e7e2d190604401602060405180830381865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd99190613e35565b90506000611d5a82600660009054906101000a90046001600160a01b03166001600160a01b031663cc32d1766040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102149190613e35565b90506000611d688284613e52565b600254600354600554604051631cd43d1160e31b81526001600160a01b039283166004820152306024820152908216604482015292935060009291169063e6a1e88890606401608060405180830381865afa158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def9190613df7565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b391600480830192602092919082900301818b875af1158015611e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7a9190613b13565b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606401608060405180830381865afa158015611ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef29190613df7565b5050915050611f178d8d8685611f089190613eac565b611f128786613eac565b612b7f565b9d9c50505050505050505050505050565b60007fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3826001600160a01b0316637730599e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fad9190613a98565b1492915050565b600154604051631fb6491d60e11b81526060916000916001600160a01b0390911690633f6c923a90611fec9087908790600401613c6e565b600060405180830381865afa158015612009573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120319190810190613cf0565b606001516009546040517f6d8ea5b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301529293509116908190636d8ea5b490602401602060405180830381865afa15801561209c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c09190613a7b565b15612141576040517f97aa390a0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600060248301528216906397aa390a90604401600060405180830381600087803b15801561212857600080fd5b505af115801561213c573d6000803e3d6000fd5b505050505b61214a82612e26565b600d546001036121655761215e8585612e6b565b92506123fb565b600d54156123fb5760025460035460405163e8e7e2d160e01b81526001600160a01b039182166004820152306024820152600092919091169063e8e7e2d190604401602060405180830381865afa1580156121c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e89190613e35565b9050600061224582600660009054906101000a90046001600160a01b03166001600160a01b031663cc32d1766040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611d36573d6000803e3d6000fd5b905060006122538284613e52565b600254600354600554604051631cd43d1160e31b81526001600160a01b039283166004820152306024820152908216604482015292935060009291169063e6a1e88890606401608060405180830381865afa1580156122b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122da9190613df7565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b391600480830192602092919082900301818b875af1158015612341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123659190613b13565b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606401608060405180830381865afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190613df7565b50509150506123f38a8a8685611f089190613eac565b975050505050505b505092915050565b600e546001600160a01b03161561241957600080fd5b6007546040517ff99120900000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063f99120909061246690859085903090600401613f05565b6020604051808303816000875af1158015612485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a99190613b13565b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040519081527fbb5744448f3e46ab592cb9d22d7bce54500691e81b837c6f1ae8f1bb842eae32906020016117d5565b6001600d60008282546125189190613f56565b90915550610e1b9050816001613111565b6009546040805160018082528183019092526001600160a01b0390921691600091602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905084836000815181106125b4576125b4613f6e565b60200260200101906001600160a01b031690816001600160a01b03168152505063855410e5826000815181106125ec576125ec613f6e565b602002602001018181525050308160008151811061260c5761260c613f6e565b6001600160a01b0392831660209182029290920101526040517f81a3c943000000000000000000000000000000000000000000000000000000008152908516906381a3c9439061266490869086908690600401613fc8565b600060405180830381600087803b15801561267e57600080fd5b505af1158015612692573d6000803e3d6000fd5b505050505050505050565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018590526060916000919087169063aabd266890604401608060405180830381865afa15801561270d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127319190613df7565b5050915050600b600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f756768815250906127a35760405162461bcd60e51b815260040161060491906135b6565b50600154604051631fb6491d60e11b81526000916001600160a01b031690633f6c923a906127d7908c908c90600401613c6e565b600060405180830381865afa1580156127f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261281c9190810190613cf0565b6060808201516001600160a01b0316600090815260116020908152604091829020548251938401909252602980845293945060ff909116151560011492906141d8908301399061287f5760405162461bcd60e51b815260040161060491906135b6565b5060025460035460405163e8e7e2d160e01b81526001600160a01b039182166004820152306024820152600092919091169063e8e7e2d190604401602060405180830381865afa1580156128d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fb9190613e35565b9050600061295882600660009054906101000a90046001600160a01b03166001600160a01b031663cc32d1766040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611d36573d6000803e3d6000fd5b905060006129668284613e52565b90506129758460600151612529565b600d546001036129925761298b8c8c848461317b565b9550612b41565b6001600d541115612b4157600254600354600554604051631cd43d1160e31b81526001600160a01b0392831660048201523060248201529082166044820152600092919091169063e6a1e88890606401608060405180830381865afa1580156129ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a239190613df7565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b391600480830192602092919082900301818b875af1158015612a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aae9190613b13565b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606401608060405180830381865afa158015612b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b269190613df7565b5050915050612b3c8e8e8685611f089190613eac565b975050505b6060840180516001600160a01b03166000908152601160205260409020805460ff1916905551612b7090612505565b50505050509695505050505050565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f50209a620000000000000000000000000000000000000000000000000000000093612bec9392831692909116908a9060448101614032565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b9093169052612c5792918a8a60248301614071565b6000604051808303816000875af1158015612c76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c9e91908101906140ba565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f50209a62000000000000000000000000000000000000000000000000000000009481169316916361d027b391600480830192602092919082900301816000875af1158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4b9190613b13565b604080516000815260208101909152612d6b929190899060448101614032565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b9093169052612dd59291866024820161411e565b6000604051808303816000875af1158015612df4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e1c91908101906140ba565b5095945050505050565b6001600d6000828254612e399190614166565b90915550612e4a9050816000613111565b6001600160a01b03166000908152600c60205260409020805460ff19169055565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937fb4b333c60000000000000000000000000000000000000000000000000000000093612ed69392831692309216906044810161417d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b9093169052612f419291888860248301614071565b6000604051808303816000875af1158015612f60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f8891908101906140ba565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947fb4b333c6000000000000000000000000000000000000000000000000000000009481169330939116916361d027b39160048082019260209290919082900301816000875af1158015613015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130399190613b13565b604080516000815260208101909152613058939291906044810161417d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b90931690526130c29291866024820161411e565b6000604051808303816000875af11580156130e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261310991908101906140ba565b509392505050565b6001600160a01b0382166000908152600c60205260409020805482919060ff19166001838181111561314557613145613668565b02179055507f9317988e6950186e710d8f8d1e8528bd7d8d541282cf3dffbcc6d40ed9a3bcd782826040516117d59291906141b1565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f62fc305e00000000000000000000000000000000000000000000000000000000936131e89392831692909116908a9060448101614032565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b909316905261325392918a8a60248301614071565b6000604051808303816000875af1158015613272573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261329a91908101906140ba565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f62fc305e000000000000000000000000000000000000000000000000000000009481169316916361d027b391600480830192602092919082900301816000875af1158015612d27573d6000803e3d6000fd5b82805461332f90613ace565b90600052602060002090601f0160209004810192826133515760008555613397565b82601f1061336a57805160ff1916838001178555613397565b82800160010185558215613397579182015b8281111561339757825182559160200191906001019061337c565b506133a39291506133a7565b5090565b5b808211156133a357600081556001016133a8565b80600b0b8114610e1b57600080fd5b600080604083850312156133de57600080fd5b82356133e9816133bc565b915060208301356133f9816133bc565b809150509250929050565b6001600160a01b0381168114610e1b57600080fd5b803561342481613404565b919050565b60006020828403121561343b57600080fd5b81356105a581613404565b60008083601f84011261345857600080fd5b50813567ffffffffffffffff81111561347057600080fd5b60208301915083602082850101111561348857600080fd5b9250929050565b600080600080600080600080600060c08a8c0312156134ad57600080fd5b89356134b881613404565b985060208a01356134c881613404565b975060408a0135965060608a013567ffffffffffffffff808211156134ec57600080fd5b6134f88d838e01613446565b909850965060808c013591508082111561351157600080fd5b61351d8d838e01613446565b909650945060a08c013591508082111561353657600080fd5b506135438c828d01613446565b915080935050809150509295985092959850929598565b60005b8381101561357557818101518382015260200161355d565b83811115613584576000848401525b50505050565b600081518084526135a281602086016020860161355a565b601f01601f19169290920160200192915050565b6020815260006105a5602083018461358a565b600080600080600080600060a0888a0312156135e457600080fd5b87356135ef81613404565b965060208801356135ff81613404565b955060408801359450606088013567ffffffffffffffff8082111561362357600080fd5b61362f8b838c01613446565b909650945060808a013591508082111561364857600080fd5b506136558a828b01613446565b989b979a50959850939692959293505050565b634e487b7160e01b600052602160045260246000fd5b60028110610e1b57634e487b7160e01b600052602160045260246000fd5b602081016136a98361367e565b91905290565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156136e9576136e96136af565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613718576137186136af565b604052919050565b600067ffffffffffffffff82111561373a5761373a6136af565b50601f01601f191660200190565b600082601f83011261375957600080fd5b813561376c61376782613720565b6136ef565b81815284602083860101111561378157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060006101208a8c0312156137bd57600080fd5b6137c68a613419565b98506137d460208b01613419565b97506137e260408b01613419565b96506137f060608b01613419565b955060808a013567ffffffffffffffff8082111561380d57600080fd5b6138198d838e01613748565b965060a08c0135955060c08c013591508082111561383657600080fd5b6138428d838e01613748565b945060e08c013591508082111561385857600080fd5b506138658c828d01613748565b9250506138756101008b01613419565b90509295985092959850929598565b60008060006060848603121561389957600080fd5b833567ffffffffffffffff808211156138b157600080fd5b6138bd87838801613748565b945060208601359150808211156138d357600080fd5b506138e086828701613748565b9250506040840135600281106138f557600080fd5b809150509250925092565b8015158114610e1b57600080fd5b6000806040838503121561392157600080fd5b8235915060208301356133f981613900565b6000806020838503121561394657600080fd5b823567ffffffffffffffff81111561395d57600080fd5b61396985828601613446565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600081600b0b83600b0b6b7fffffffffffffffffffffff6000821360008413838304851182821616156139c0576139c0613975565b6b7fffffffffffffffffffffff1960008512868205861281841616156139e8576139e8613975565b60008712925085820587128484161615613a0457613a04613975565b85850587128184161615613a1a57613a1a613975565b5050509290910295945050505050565b600081600b0b83600b0b80613a4f57634e487b7160e01b600052601260045260246000fd5b60001981146b7fffffffffffffffffffffff1983141615613a7257613a72613975565b90059392505050565b600060208284031215613a8d57600080fd5b81516105a581613900565b600060208284031215613aaa57600080fd5b5051919050565b600060208284031215613ac357600080fd5b81356105a581613900565b600181811c90821680613ae257607f821691505b602082108103613b0257634e487b7160e01b600052602260045260246000fd5b50919050565b805161342481613404565b600060208284031215613b2557600080fd5b81516105a581613404565b634e487b7160e01b600052600160045260246000fd5b6000816000190483118215151615613b6057613b60613975565b500290565b600060208284031215613b7757600080fd5b815161ffff811681146105a557600080fd5b8681526001600160a01b038616602082015284604082015283606082015260c060808201526000613bbd60c083018561358a565b905073ffffffffffffffffffffffffffffffffffffffff19831660a0830152979650505050505050565b6001600160a01b0383168152604060208201526000613c09604083018461358a565b949350505050565b838152606060208201526000613c2a606083018561358a565b9050613c358361367e565b826040830152949350505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b602081526000613c09602083018486613c43565b805160ff8116811461342457600080fd5b80516001600160e01b03198116811461342457600080fd5b600082601f830112613cbc57600080fd5b8151613cca61376782613720565b818152846020838601011115613cdf57600080fd5b613c0982602083016020870161355a565b600060208284031215613d0257600080fd5b815167ffffffffffffffff80821115613d1a57600080fd5b908301906101608286031215613d2f57600080fd5b613d376136c5565b613d4083613c82565b8152613d4e60208401613c82565b602082015260408301516040820152613d6960608401613b08565b6060820152613d7a60808401613c93565b608082015260a083015182811115613d9157600080fd5b613d9d87828601613cab565b60a08301525060c083015160c082015260e083015160e0820152610100915081830151828201526101209150613dd4828401613b08565b828201526101409150613de8828401613b08565b91810191909152949350505050565b60008060008060808587031215613e0d57600080fd5b845193506020850151613e1f816133bc565b6040860151606090960151949790965092505050565b600060208284031215613e4757600080fd5b81516105a5816133bc565b600081600b0b83600b0b60008112816b7fffffffffffffffffffffff1901831281151615613e8257613e82613975565b816b7fffffffffffffffffffffff018313811615613ea257613ea2613975565b5090039392505050565b600081600b0b83600b0b60008212826b7fffffffffffffffffffffff03821381151615613edb57613edb613975565b826b7fffffffffffffffffffffff19038212811615613efc57613efc613975565b50019392505050565b608081526000613f18608083018661358a565b8281036020840152613f2a818661358a565b9050828103604084015260008152602081019150506001600160a01b0383166060830152949350505050565b60008219821115613f6957613f69613975565b500190565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015613fbd5781516001600160a01b031687529582019590820190600101613f98565b509495945050505050565b606081526000613fdb6060830186613f84565b82810360208481019190915285518083528682019282019060005b8181101561401257845183529383019391830191600101613ff6565b505084810360408601526140268187613f84565b98975050505050505050565b60006001600160a01b03808716835280861660208401525083600b0b604083015260806060830152614067608083018461358a565b9695505050505050565b6001600160a01b0386168152608060208201526000614093608083018761358a565b82810360408401526140a5818761358a565b90508281036060840152614026818587613c43565b600080604083850312156140cd57600080fd5b825167ffffffffffffffff808211156140e557600080fd5b6140f186838701613cab565b9350602085015191508082111561410757600080fd5b5061411485828601613cab565b9150509250929050565b6001600160a01b0385168152608060208201526000614140608083018661358a565b8281036040840152614152818661358a565b90508281036060840152610bad818561358a565b60008282101561417857614178613975565b500390565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152614067608083018461358a565b6001600160a01b0383168152604081016141ca8361367e565b826020830152939250505056fe43726561746f6e3a20706179206d6f6e74686c7920616d6f756e7420757066726f6e74206669727374a2646970667358221220851145d5b1bcc5ee37dc0f6dd3f179bc6baf3109b77361c3d8147a65b56abd4764736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c80638576b2e1116100ec578063c0e8e38c1161008a578063d86ed3e511610064578063d86ed3e51461050d578063ee1cc8561461052d578063f851a4401461054d578063f90b03111461056d57600080fd5b8063c0e8e38c1461049d578063cbd5497c146104cd578063d6507191146104ed57600080fd5b806388f9c946116100c657806388f9c9461461043c578063a0ef91df1461045c578063a4190f4c14610471578063bdc8e54c1461048457600080fd5b80638576b2e1146103fc578063884d1f401461029957806388c3c65b1461041c57600080fd5b8063486ff0cd116101595780635745ae28116101335780635745ae28146103645780635f9e7d77146103a15780637284e416146103c15780637da0a877146103d657600080fd5b8063486ff0cd146102b957806353c11f99146102ff578063572b6c051461031f57600080fd5b806317e703ab1161018a57806317e703ab1461024e578063230dbd291461026c57806330d9c9151461029957600080fd5b806302d05d3f146101bc578063123ff984146101f957806316114acd1461022c57600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506005546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b506102196102143660046133cb565b61058d565b604051600b9190910b81526020016101f0565b34801561023857600080fd5b5061024c610247366004613429565b6105ac565b005b34801561025a57600080fd5b50600d546040519081526020016101f0565b34801561027857600080fd5b5061028c61028736600461348f565b6107a4565b6040516101f091906135b6565b3480156102a557600080fd5b5061028c6102b43660046135c9565b61083e565b3480156102c557600080fd5b5060408051808201909152600b81527f322e322e332d6d61746963000000000000000000000000000000000000000000602082015261028c565b34801561030b57600080fd5b5061028c61031a36600461348f565b6109de565b34801561032b57600080fd5b5061035461033a366004613429565b6000546201000090046001600160a01b0390811691161490565b60405190151581526020016101f0565b34801561037057600080fd5b5061039461037f366004613429565b600c6020526000908152604090205460ff1681565b6040516101f0919061369c565b3480156103ad57600080fd5b5061028c6103bc3660046135c9565b610ac9565b3480156103cd57600080fd5b5061028c610bb8565b3480156103e257600080fd5b506000546101dc906201000090046001600160a01b031681565b34801561040857600080fd5b506009546101dc906001600160a01b031681565b34801561042857600080fd5b50610354610437366004613429565b610c46565b34801561044857600080fd5b50600e546101dc906001600160a01b031681565b34801561046857600080fd5b5061024c610ce8565b61024c61047f36600461379e565b610e1e565b34801561049057600080fd5b50600b8054610219910b81565b3480156104a957600080fd5b506103546104b8366004613429565b60116020526000908152604090205460ff1681565b3480156104d957600080fd5b5061024c6104e8366004613884565b611593565b3480156104f957600080fd5b5061024c61050836600461390e565b611746565b34801561051957600080fd5b5061028c61052836600461348f565b6117e1565b34801561053957600080fd5b5061028c610548366004613933565b61186b565b34801561055957600080fd5b506004546101dc906001600160a01b031681565b34801561057957600080fd5b5061024c610588366004613429565b611a63565b6000606461059b838561398b565b6105a59190613a2a565b9392505050565b6005546001600160a01b03166105c0611aff565b6001600160a01b03161461060d5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b60448201526064015b60405180910390fd5b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815230600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af1158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190613a7b565b50806001600160a01b031663a9059cbb6106b0611aff565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107319190613a98565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190613a7b565b5050565b6001546060906001600160a01b03166107bb611aff565b6001600160a01b0316146108205760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b61082e83838b8b8989611b57565b90505b9998505050505050505050565b6001546060906001600160a01b0316610855611aff565b6001600160a01b0316146108ba5760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b87876108d4826003546001600160a01b0391821691161490565b6109465760405162461bcd60e51b815260206004820152602360248201527f43726561746f6e53757065724170703a206e6f7420616363657074656420746f60448201527f6b656e00000000000000000000000000000000000000000000000000000000006064820152608401610604565b61094f81611f28565b6109c15760405162461bcd60e51b815260206004820152602560248201527f43726561746f6e53757065724170703a206f6e6c79204346417631207375707060448201527f6f727465640000000000000000000000000000000000000000000000000000006064820152608401610604565b505060408051600081526020810190915298975050505050505050565b6001546060906001600160a01b03166109f5611aff565b6001600160a01b031614610a5a5760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b6000610a6885870187613ab1565b90508015610ab05783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506108319350505050565b610aba8484611fb4565b9b9a5050505050505050505050565b6001546060906001600160a01b0316610ae0611aff565b6001600160a01b031614610b455760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b6003546001600160a01b038981169116141580610b685750610b6687611f28565b155b15610b8f576040805160016020820152016040516020818303038152906040529050610bad565b60408051600060208201520160405160208183030381529060405290505b979650505050505050565b600a8054610bc590613ace565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190613ace565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b505050505081565b600654604080517fce1b815f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ce1b815f9160048083019260209291908290030181865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190613b13565b6001600160a01b0316826001600160a01b0316149050919050565b6005546001600160a01b0316610cfc611aff565b6001600160a01b031614610d445760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b6000610d4e611aff565b6001600160a01b031647604051610d88907f4e6f742061646d696e0000000000000000000000000000000000000000000000815260090190565b60006040518083038185875af1925050503d8060008114610dc5576040519150601f19603f3d011682016040523d82523d6000602084013e610dca565b606091505b5050905080610e1b5760405162461bcd60e51b815260206004820152600a60248201527f4e6f2062616c616e6365000000000000000000000000000000000000000000006044820152606401610604565b50565b600054610100900460ff16610e395760005460ff1615610e3d565b303b155b610eaf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610604565b600054610100900460ff16158015610eee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610ef6611aff565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558a16610f2d57610f2d613b30565b6001600160a01b038916610f4357610f43613b30565b6001600160a01b038816610f5957610f59613b30565b6001805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038d8116919091179092556002805482168c84161790556003805482168b8416179055600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000086851602179055600580549091169189169190911790558551610ff490600a906020890190613323565b5061100785670de0b6b3a7640000613b46565b601055600b80546bffffffffffffffffffffffff19166bffffffffffffffffffffffff87161780825562278d009161104991900b670de0b6b3a764000061398b565b6110539190613a2a565b600b80546bffffffffffffffffffffffff929092166c01000000000000000000000000027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff909216919091179055600480546006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169182179055604080517fd63843cd0000000000000000000000000000000000000000000000000000000081529051919263d63843cd92828201926020929082900301816000875af1158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190613b13565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905561117f8484612403565b6008805473ffffffffffffffffffffffffffffffffffffffff191673e8e5cd156f89f7bdb267eabd5c43af3d5af2a78f908117909155604080517f4220bd46000000000000000000000000000000000000000000000000000000008152905160009291634220bd469160048083019260209291908290030181865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190613b65565b600b54600354604080516c0100000000000000000000000090930460a01b602084015260609190911b6bffffffffffffffffffffffff1916602c83015261ffff9290921692506000910160408051601f198184030181529082905280516020909101206008547f42d921060000000000000000000000000000000000000000000000000000000083529092506000916001600160a01b03909116906342d92106906112f0906312cc0300908f90869062989680908e908a90600401613b89565b6020604051808303816000875af115801561130f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113339190613b13565b9050806001600160a01b031663d250348561134c611aff565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561138d57600080fd5b505af11580156113a1573d6000803e3d6000fd5b50505050806001600160a01b031663564aa99d6113bc611aff565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b50506040517fad0e0a4d000000000000000000000000000000000000000000000000000000008152306004820181905260248201526001600160a01b038416925063ad0e0a4d9150604401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b50506040517f782a4ade0000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063782a4ade91506114d39089906004016135b6565b600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50506009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03858116919091179091556005546115409350169050612505565b600554611555906001600160a01b0316612529565b505050801561158757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050505050505050565b6005546001600160a01b03166115a7611aff565b6001600160a01b0316146115ef5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b600e546001600160a01b031661160457600080fd5b600081600181111561161857611618613668565b14806116355750600181600181111561163357611633613668565b145b61163e57600080fd5b600e546005546040517fd0def5210000000000000000000000000000000000000000000000000000000081526000926001600160a01b039081169263d0def5219261169192909116908890600401613be7565b6020604051808303816000875af11580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190613a98565b6000818152600f602052604090208054919250839160ff19166001838181111561170057611700613668565b02179055507f56e18d3f05fcdacbb5f30945553714915803451f602499a7a4d9d278428490ed81848460405161173893929190613c11565b60405180910390a150505050565b6005546001600160a01b031661175a611aff565b6001600160a01b0316146117a25760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b6040805183815282151560208201527f3ceedf4498307ee012e3abe446727a5c95bf2b49b0123daeb2b9040112d50e3c91015b60405180910390a15050565b6001546060906001600160a01b03166117f8611aff565b6001600160a01b03161461185d5760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b61082e83838b8b898961269d565b6001546060906001600160a01b0316611882611aff565b6001600160a01b0316146118e75760405162461bcd60e51b815260206004820152602660248201527f43726561746f6e53757065724170703a20737570706f7274206f6e6c79206f6e60448201526519481a1bdcdd60d21b6064820152608401610604565b600154604051631fb6491d60e11b81526000916001600160a01b031690633f6c923a9061191a9087908790600401613c6e565b600060405180830381865afa158015611937573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261195f9190810190613cf0565b606001516003546005546010546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0380861660048301529283166024820152604481019190915292935016906323b872dd906064016020604051808303816000875af11580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a039190613a7b565b506001600160a01b038116600090815260116020908152604091829020805460ff191660011790558151601f8601829004820281018201909252848252859085908190840183828082843760009201919091525092979650505050505050565b6005546001600160a01b0316611a77611aff565b6001600160a01b031614611abf5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a34329031b932b0ba37b960891b6044820152606401610604565b600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600060143610801590611b2257506000546201000090046001600160a01b031633145b15611b5257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018590526060916000919087169063aabd266890604401608060405180830381865afa158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190613df7565b5050915050600b600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f75676881525090611c5d5760405162461bcd60e51b815260040161060491906135b6565b5060025460035460405163e8e7e2d160e01b81526001600160a01b039182166004820152306024820152600092919091169063e8e7e2d190604401602060405180830381865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd99190613e35565b90506000611d5a82600660009054906101000a90046001600160a01b03166001600160a01b031663cc32d1766040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102149190613e35565b90506000611d688284613e52565b600254600354600554604051631cd43d1160e31b81526001600160a01b039283166004820152306024820152908216604482015292935060009291169063e6a1e88890606401608060405180830381865afa158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def9190613df7565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b391600480830192602092919082900301818b875af1158015611e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7a9190613b13565b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606401608060405180830381865afa158015611ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef29190613df7565b5050915050611f178d8d8685611f089190613eac565b611f128786613eac565b612b7f565b9d9c50505050505050505050505050565b60007fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3826001600160a01b0316637730599e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fad9190613a98565b1492915050565b600154604051631fb6491d60e11b81526060916000916001600160a01b0390911690633f6c923a90611fec9087908790600401613c6e565b600060405180830381865afa158015612009573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120319190810190613cf0565b606001516009546040517f6d8ea5b40000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301529293509116908190636d8ea5b490602401602060405180830381865afa15801561209c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c09190613a7b565b15612141576040517f97aa390a0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600060248301528216906397aa390a90604401600060405180830381600087803b15801561212857600080fd5b505af115801561213c573d6000803e3d6000fd5b505050505b61214a82612e26565b600d546001036121655761215e8585612e6b565b92506123fb565b600d54156123fb5760025460035460405163e8e7e2d160e01b81526001600160a01b039182166004820152306024820152600092919091169063e8e7e2d190604401602060405180830381865afa1580156121c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e89190613e35565b9050600061224582600660009054906101000a90046001600160a01b03166001600160a01b031663cc32d1766040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611d36573d6000803e3d6000fd5b905060006122538284613e52565b600254600354600554604051631cd43d1160e31b81526001600160a01b039283166004820152306024820152908216604482015292935060009291169063e6a1e88890606401608060405180830381865afa1580156122b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122da9190613df7565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b391600480830192602092919082900301818b875af1158015612341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123659190613b13565b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606401608060405180830381865afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190613df7565b50509150506123f38a8a8685611f089190613eac565b975050505050505b505092915050565b600e546001600160a01b03161561241957600080fd5b6007546040517ff99120900000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063f99120909061246690859085903090600401613f05565b6020604051808303816000875af1158015612485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a99190613b13565b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691821790556040519081527fbb5744448f3e46ab592cb9d22d7bce54500691e81b837c6f1ae8f1bb842eae32906020016117d5565b6001600d60008282546125189190613f56565b90915550610e1b9050816001613111565b6009546040805160018082528183019092526001600160a01b0390921691600091602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905084836000815181106125b4576125b4613f6e565b60200260200101906001600160a01b031690816001600160a01b03168152505063855410e5826000815181106125ec576125ec613f6e565b602002602001018181525050308160008151811061260c5761260c613f6e565b6001600160a01b0392831660209182029290920101526040517f81a3c943000000000000000000000000000000000000000000000000000000008152908516906381a3c9439061266490869086908690600401613fc8565b600060405180830381600087803b15801561267e57600080fd5b505af1158015612692573d6000803e3d6000fd5b505050505050505050565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018590526060916000919087169063aabd266890604401608060405180830381865afa15801561270d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127319190613df7565b5050915050600b600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f756768815250906127a35760405162461bcd60e51b815260040161060491906135b6565b50600154604051631fb6491d60e11b81526000916001600160a01b031690633f6c923a906127d7908c908c90600401613c6e565b600060405180830381865afa1580156127f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261281c9190810190613cf0565b6060808201516001600160a01b0316600090815260116020908152604091829020548251938401909252602980845293945060ff909116151560011492906141d8908301399061287f5760405162461bcd60e51b815260040161060491906135b6565b5060025460035460405163e8e7e2d160e01b81526001600160a01b039182166004820152306024820152600092919091169063e8e7e2d190604401602060405180830381865afa1580156128d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fb9190613e35565b9050600061295882600660009054906101000a90046001600160a01b03166001600160a01b031663cc32d1766040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611d36573d6000803e3d6000fd5b905060006129668284613e52565b90506129758460600151612529565b600d546001036129925761298b8c8c848461317b565b9550612b41565b6001600d541115612b4157600254600354600554604051631cd43d1160e31b81526001600160a01b0392831660048201523060248201529082166044820152600092919091169063e6a1e88890606401608060405180830381865afa1580156129ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a239190613df7565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b391600480830192602092919082900301818b875af1158015612a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aae9190613b13565b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606401608060405180830381865afa158015612b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b269190613df7565b5050915050612b3c8e8e8685611f089190613eac565b975050505b6060840180516001600160a01b03166000908152601160205260409020805460ff1916905551612b7090612505565b50505050509695505050505050565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f50209a620000000000000000000000000000000000000000000000000000000093612bec9392831692909116908a9060448101614032565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b9093169052612c5792918a8a60248301614071565b6000604051808303816000875af1158015612c76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c9e91908101906140ba565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f50209a62000000000000000000000000000000000000000000000000000000009481169316916361d027b391600480830192602092919082900301816000875af1158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4b9190613b13565b604080516000815260208101909152612d6b929190899060448101614032565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b9093169052612dd59291866024820161411e565b6000604051808303816000875af1158015612df4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e1c91908101906140ba565b5095945050505050565b6001600d6000828254612e399190614166565b90915550612e4a9050816000613111565b6001600160a01b03166000908152600c60205260409020805460ff19169055565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937fb4b333c60000000000000000000000000000000000000000000000000000000093612ed69392831692309216906044810161417d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b9093169052612f419291888860248301614071565b6000604051808303816000875af1158015612f60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f8891908101906140ba565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947fb4b333c6000000000000000000000000000000000000000000000000000000009481169330939116916361d027b39160048082019260209290919082900301816000875af1158015613015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130399190613b13565b604080516000815260208101909152613058939291906044810161417d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b90931690526130c29291866024820161411e565b6000604051808303816000875af11580156130e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261310991908101906140ba565b509392505050565b6001600160a01b0382166000908152600c60205260409020805482919060ff19166001838181111561314557613145613668565b02179055507f9317988e6950186e710d8f8d1e8528bd7d8d541282cf3dffbcc6d40ed9a3bcd782826040516117d59291906141b1565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f62fc305e00000000000000000000000000000000000000000000000000000000936131e89392831692909116908a9060448101614032565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199586161790528151600081529081019182905260e086901b909316905261325392918a8a60248301614071565b6000604051808303816000875af1158015613272573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261329a91908101906140ba565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f62fc305e000000000000000000000000000000000000000000000000000000009481169316916361d027b391600480830192602092919082900301816000875af1158015612d27573d6000803e3d6000fd5b82805461332f90613ace565b90600052602060002090601f0160209004810192826133515760008555613397565b82601f1061336a57805160ff1916838001178555613397565b82800160010185558215613397579182015b8281111561339757825182559160200191906001019061337c565b506133a39291506133a7565b5090565b5b808211156133a357600081556001016133a8565b80600b0b8114610e1b57600080fd5b600080604083850312156133de57600080fd5b82356133e9816133bc565b915060208301356133f9816133bc565b809150509250929050565b6001600160a01b0381168114610e1b57600080fd5b803561342481613404565b919050565b60006020828403121561343b57600080fd5b81356105a581613404565b60008083601f84011261345857600080fd5b50813567ffffffffffffffff81111561347057600080fd5b60208301915083602082850101111561348857600080fd5b9250929050565b600080600080600080600080600060c08a8c0312156134ad57600080fd5b89356134b881613404565b985060208a01356134c881613404565b975060408a0135965060608a013567ffffffffffffffff808211156134ec57600080fd5b6134f88d838e01613446565b909850965060808c013591508082111561351157600080fd5b61351d8d838e01613446565b909650945060a08c013591508082111561353657600080fd5b506135438c828d01613446565b915080935050809150509295985092959850929598565b60005b8381101561357557818101518382015260200161355d565b83811115613584576000848401525b50505050565b600081518084526135a281602086016020860161355a565b601f01601f19169290920160200192915050565b6020815260006105a5602083018461358a565b600080600080600080600060a0888a0312156135e457600080fd5b87356135ef81613404565b965060208801356135ff81613404565b955060408801359450606088013567ffffffffffffffff8082111561362357600080fd5b61362f8b838c01613446565b909650945060808a013591508082111561364857600080fd5b506136558a828b01613446565b989b979a50959850939692959293505050565b634e487b7160e01b600052602160045260246000fd5b60028110610e1b57634e487b7160e01b600052602160045260246000fd5b602081016136a98361367e565b91905290565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156136e9576136e96136af565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613718576137186136af565b604052919050565b600067ffffffffffffffff82111561373a5761373a6136af565b50601f01601f191660200190565b600082601f83011261375957600080fd5b813561376c61376782613720565b6136ef565b81815284602083860101111561378157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060006101208a8c0312156137bd57600080fd5b6137c68a613419565b98506137d460208b01613419565b97506137e260408b01613419565b96506137f060608b01613419565b955060808a013567ffffffffffffffff8082111561380d57600080fd5b6138198d838e01613748565b965060a08c0135955060c08c013591508082111561383657600080fd5b6138428d838e01613748565b945060e08c013591508082111561385857600080fd5b506138658c828d01613748565b9250506138756101008b01613419565b90509295985092959850929598565b60008060006060848603121561389957600080fd5b833567ffffffffffffffff808211156138b157600080fd5b6138bd87838801613748565b945060208601359150808211156138d357600080fd5b506138e086828701613748565b9250506040840135600281106138f557600080fd5b809150509250925092565b8015158114610e1b57600080fd5b6000806040838503121561392157600080fd5b8235915060208301356133f981613900565b6000806020838503121561394657600080fd5b823567ffffffffffffffff81111561395d57600080fd5b61396985828601613446565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600081600b0b83600b0b6b7fffffffffffffffffffffff6000821360008413838304851182821616156139c0576139c0613975565b6b7fffffffffffffffffffffff1960008512868205861281841616156139e8576139e8613975565b60008712925085820587128484161615613a0457613a04613975565b85850587128184161615613a1a57613a1a613975565b5050509290910295945050505050565b600081600b0b83600b0b80613a4f57634e487b7160e01b600052601260045260246000fd5b60001981146b7fffffffffffffffffffffff1983141615613a7257613a72613975565b90059392505050565b600060208284031215613a8d57600080fd5b81516105a581613900565b600060208284031215613aaa57600080fd5b5051919050565b600060208284031215613ac357600080fd5b81356105a581613900565b600181811c90821680613ae257607f821691505b602082108103613b0257634e487b7160e01b600052602260045260246000fd5b50919050565b805161342481613404565b600060208284031215613b2557600080fd5b81516105a581613404565b634e487b7160e01b600052600160045260246000fd5b6000816000190483118215151615613b6057613b60613975565b500290565b600060208284031215613b7757600080fd5b815161ffff811681146105a557600080fd5b8681526001600160a01b038616602082015284604082015283606082015260c060808201526000613bbd60c083018561358a565b905073ffffffffffffffffffffffffffffffffffffffff19831660a0830152979650505050505050565b6001600160a01b0383168152604060208201526000613c09604083018461358a565b949350505050565b838152606060208201526000613c2a606083018561358a565b9050613c358361367e565b826040830152949350505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b602081526000613c09602083018486613c43565b805160ff8116811461342457600080fd5b80516001600160e01b03198116811461342457600080fd5b600082601f830112613cbc57600080fd5b8151613cca61376782613720565b818152846020838601011115613cdf57600080fd5b613c0982602083016020870161355a565b600060208284031215613d0257600080fd5b815167ffffffffffffffff80821115613d1a57600080fd5b908301906101608286031215613d2f57600080fd5b613d376136c5565b613d4083613c82565b8152613d4e60208401613c82565b602082015260408301516040820152613d6960608401613b08565b6060820152613d7a60808401613c93565b608082015260a083015182811115613d9157600080fd5b613d9d87828601613cab565b60a08301525060c083015160c082015260e083015160e0820152610100915081830151828201526101209150613dd4828401613b08565b828201526101409150613de8828401613b08565b91810191909152949350505050565b60008060008060808587031215613e0d57600080fd5b845193506020850151613e1f816133bc565b6040860151606090960151949790965092505050565b600060208284031215613e4757600080fd5b81516105a5816133bc565b600081600b0b83600b0b60008112816b7fffffffffffffffffffffff1901831281151615613e8257613e82613975565b816b7fffffffffffffffffffffff018313811615613ea257613ea2613975565b5090039392505050565b600081600b0b83600b0b60008212826b7fffffffffffffffffffffff03821381151615613edb57613edb613975565b826b7fffffffffffffffffffffff19038212811615613efc57613efc613975565b50019392505050565b608081526000613f18608083018661358a565b8281036020840152613f2a818661358a565b9050828103604084015260008152602081019150506001600160a01b0383166060830152949350505050565b60008219821115613f6957613f69613975565b500190565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015613fbd5781516001600160a01b031687529582019590820190600101613f98565b509495945050505050565b606081526000613fdb6060830186613f84565b82810360208481019190915285518083528682019282019060005b8181101561401257845183529383019391830191600101613ff6565b505084810360408601526140268187613f84565b98975050505050505050565b60006001600160a01b03808716835280861660208401525083600b0b604083015260806060830152614067608083018461358a565b9695505050505050565b6001600160a01b0386168152608060208201526000614093608083018761358a565b82810360408401526140a5818761358a565b90508281036060840152614026818587613c43565b600080604083850312156140cd57600080fd5b825167ffffffffffffffff808211156140e557600080fd5b6140f186838701613cab565b9350602085015191508082111561410757600080fd5b5061411485828601613cab565b9150509250929050565b6001600160a01b0385168152608060208201526000614140608083018661358a565b8281036040840152614152818661358a565b90508281036060840152610bad818561358a565b60008282101561417857614178613975565b500390565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152614067608083018461358a565b6001600160a01b0383168152604081016141ca8361367e565b826020830152939250505056fe43726561746f6e3a20706179206d6f6e74686c7920616d6f756e7420757066726f6e74206669727374a2646970667358221220851145d5b1bcc5ee37dc0f6dd3f179bc6baf3109b77361c3d8147a65b56abd4764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "upfrontFee(bytes)": {
        "details": "Take entrance fee from the user and issue a ticket"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1243,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1246,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26981,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "trustedForwarder",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21540,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "_host",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISuperfluid)10485"
      },
      {
        "astId": 21543,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "_cfa",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IConstantFlowAgreementV1)9036"
      },
      {
        "astId": 21546,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "_acceptedToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISuperToken)9929"
      },
      {
        "astId": 21548,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 21550,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "creator",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21553,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "adminContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ICreatonAdmin)23547"
      },
      {
        "astId": 21556,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "nftFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(NFTFactory)23965"
      },
      {
        "astId": 21559,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "unlockProtocol",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IUnlock)26670"
      },
      {
        "astId": 21561,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "unlockLock",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 21563,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "description",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 21565,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "subscriptionPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_int96"
      },
      {
        "astId": 21567,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "_MINIMUM_FLOW_RATE",
        "offset": 12,
        "slot": "11",
        "type": "t_int96"
      },
      {
        "astId": 21572,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "subscribers",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(Subscriber)21537_storage)"
      },
      {
        "astId": 21574,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "subscriberCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 21576,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "postNFT",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 21581,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "post2tier",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_enum(Type)21507)"
      },
      {
        "astId": 21583,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "uIntSubscriptionPrice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 21587,
        "contract": "src/creaton/CreatorV1.sol:CreatorV1",
        "label": "payedUpfront",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConstantFlowAgreementV1)9036": {
        "encoding": "inplace",
        "label": "contract IConstantFlowAgreementV1",
        "numberOfBytes": "20"
      },
      "t_contract(ICreatonAdmin)23547": {
        "encoding": "inplace",
        "label": "contract ICreatonAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(ISuperToken)9929": {
        "encoding": "inplace",
        "label": "contract ISuperToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISuperfluid)10485": {
        "encoding": "inplace",
        "label": "contract ISuperfluid",
        "numberOfBytes": "20"
      },
      "t_contract(IUnlock)26670": {
        "encoding": "inplace",
        "label": "contract IUnlock",
        "numberOfBytes": "20"
      },
      "t_contract(NFTFactory)23965": {
        "encoding": "inplace",
        "label": "contract NFTFactory",
        "numberOfBytes": "20"
      },
      "t_enum(Status)21504": {
        "encoding": "inplace",
        "label": "enum CreatorV1.Status",
        "numberOfBytes": "1"
      },
      "t_enum(Type)21507": {
        "encoding": "inplace",
        "label": "enum CreatorV1.Type",
        "numberOfBytes": "1"
      },
      "t_int96": {
        "encoding": "inplace",
        "label": "int96",
        "numberOfBytes": "12"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Subscriber)21537_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CreatorV1.Subscriber)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscriber)21537_storage"
      },
      "t_mapping(t_uint256,t_enum(Type)21507)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum CreatorV1.Type)",
        "numberOfBytes": "32",
        "value": "t_enum(Type)21507"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Subscriber)21537_storage": {
        "encoding": "inplace",
        "label": "struct CreatorV1.Subscriber",
        "members": [
          {
            "astId": 21536,
            "contract": "src/creaton/CreatorV1.sol:CreatorV1",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)21504"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}