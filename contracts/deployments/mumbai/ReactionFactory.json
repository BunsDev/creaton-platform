{
  "address": "0x357e3501402Ef3168A008650C091d58239Ab7DA2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sfHost",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sfCfa",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sfSuperTokenFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sfResolver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sfVersion",
          "type": "string"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "reactionContractAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reactionTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reactionTokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenMetadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingTokenAddress",
          "type": "address"
        }
      ],
      "name": "ReactionDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20WithTokenInfo",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createSuperToken",
      "outputs": [
        {
          "internalType": "contract ISuperToken",
          "name": "superToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reactionTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "reactionTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenMetadataURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stakingTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "monthDistributionPercentage",
          "type": "uint8"
        }
      ],
      "name": "deployReaction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "monthDistributionPercentage",
          "type": "uint8"
        }
      ],
      "name": "getStakedFlow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20WithTokenInfo",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getSuperToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sfHost",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sfCfa",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sfSuperTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sfResolver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "sfVersion",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20WithTokenInfo",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isSuperToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "superTokenRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2bf14df8ec1779801a24031c020916312750dabf511f0af88f25b00ed62ebe6",
  "receipt": {
    "to": null,
    "from": "0xE6C9Ea928c0BA8fF32ab877D8F89C6cD1c47c515",
    "contractAddress": "0x357e3501402Ef3168A008650C091d58239Ab7DA2",
    "transactionIndex": 14,
    "gasUsed": "4159387",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000200000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000008000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x1cee14c08e4c47629b9dc431c12720b65a19e75b0f08c5d3f7dd8c422fea1014",
    "transactionHash": "0xc2bf14df8ec1779801a24031c020916312750dabf511f0af88f25b00ed62ebe6",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 25693557,
        "transactionHash": "0xc2bf14df8ec1779801a24031c020916312750dabf511f0af88f25b00ed62ebe6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e6c9ea928c0ba8ff32ab877d8f89c6cd1c47c515",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001122f8531805530000000000000000000000000000000000000000000000000da0c074f8b3bd59000000000000000000000000000000000000000000000936087190cf37ff00ec0000000000000000000000000000000000000000000000000d8f9d7ca59bb8060000000000000000000000000000000000000000000009360882b3c78b17063f",
        "logIndex": 136,
        "blockHash": "0x1cee14c08e4c47629b9dc431c12720b65a19e75b0f08c5d3f7dd8c422fea1014"
      }
    ],
    "blockNumber": 25693557,
    "cumulativeGasUsed": "9190962",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8a6644763d6e19978493c65d3b98ffe4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sfHost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sfCfa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sfSuperTokenFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sfResolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sfVersion\",\"type\":\"string\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reactionContractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reactionTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reactionTokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenMetadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"}],\"name\":\"ReactionDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createSuperToken\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reactionTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reactionTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenMetadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"monthDistributionPercentage\",\"type\":\"uint8\"}],\"name\":\"deployReaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"monthDistributionPercentage\",\"type\":\"uint8\"}],\"name\":\"getStakedFlow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getSuperToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sfHost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sfCfa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sfSuperTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sfResolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sfVersion\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isSuperToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superTokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/reaction/ReactionFactory.sol\":\"ReactionFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x20ba3c551439998a53313a63959be77ab70f14338a39592c7a6eb36e8bc3d148\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xe4e0b7e3f0265ffaa565d26acd2d45f2633f19127ed625e5a05a9f201a87a667\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0xe61a285c5255957ac2b03b633f13ae245bd546d5bf2fe2650508983fda1498b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @title Constant Flow Agreement interface\\n * @author Superfluid\\n */\\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    /**\\n     * @notice Get the maximum flow rate allowed with the deposit\\n     * @dev The deposit is clipped and rounded down\\n     * @param deposit Deposit amount used for creating the flow\\n     * @return flowRate The maximum flow rate\\n     */\\n    function getMaximumFlowRateFromDeposit(\\n        ISuperfluidToken token,\\n        uint256 deposit)\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @notice Get the deposit required for creating the flow\\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\\n     * @param flowRate Flow rate to be tested\\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\\n     * NOTE:\\n     * - if calculated deposit (flowRate * liquidationPeriod) is less\\n     *   than the minimum deposit, we use the minimum deposit otherwise\\n     *   we use the calculated deposit\\n     */\\n    function getDepositRequiredForFlowRate(\\n        ISuperfluidToken token,\\n        int96 flowRate)\\n        external view virtual\\n        returns (uint256 deposit);\\n\\n    /**\\n     * @dev Returns whether it is the patrician period based on host.getNow()\\n     * @param account The account we are interested in\\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\\n     * @return timestamp The value of host.getNow()\\n     */\\n    function isPatricianPeriodNow(\\n        ISuperfluidToken token,\\n        address account)\\n        public view virtual\\n        returns (bool isPatricianPeriod, uint256 timestamp);\\n\\n    /**\\n     * @dev Returns whether it is the patrician period based on timestamp\\n     * @param account The account we are interested in\\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\\n     * @return isPatricianPeriod Whether it is currently the patrician period dictated by governance\\n     */\\n    function isPatricianPeriod(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 timestamp)\\n        public view virtual\\n        returns (bool isPatricianPeriod);\\n\\n    /**\\n     * @notice Create a flow betwen ctx.msgSender and receiver\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param receiver Flow receiver address\\n     * @param flowRate New flow rate in amount per second\\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementCreated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - A deposit is taken as safety margin for the solvency agents\\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\\n     */\\n    function createFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n    /**\\n     * @notice Update the flow rate between ctx.msgSender and receiver\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param receiver Flow receiver address\\n     * @param flowRate New flow rate in amount per second\\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementUpdated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Only the flow sender may update the flow rate\\n     * - Even if the flow rate is zero, the flow is not deleted\\n     * from the system\\n     * - Deposit amount will be adjusted accordingly\\n     * - No new gas fee is charged\\n     */\\n    function updateFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n\\n    /**\\n     * @dev Get the flow data between `sender` and `receiver` of `token`\\n     * @param token Super token address\\n     * @param sender Flow receiver\\n     * @param receiver Flow sender\\n     * @return timestamp Timestamp of when the flow is updated\\n     * @return flowRate The flow rate\\n     * @return deposit The amount of deposit the flow\\n     * @return owedDeposit The amount of owed deposit of the flow\\n     */\\n    function getFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @notice Get flow data using agreementId\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param agreementId The agreement ID\\n     * @return timestamp Timestamp of when the flow is updated\\n     * @return flowRate The flow rate\\n     * @return deposit The deposit amount of the flow\\n     * @return owedDeposit The owed deposit amount of the flow\\n     */\\n    function getFlowByID(\\n       ISuperfluidToken token,\\n       bytes32 agreementId\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get the aggregated flow info of the account\\n     * @param token Super token address\\n     * @param account Account for the query\\n     * @return timestamp Timestamp of when a flow was last updated for account\\n     * @return flowRate The net flow rate of token for account\\n     * @return deposit The sum of all deposits for account's flows\\n     * @return owedDeposit The sum of all owed deposits for account's flows\\n     */\\n    function getAccountFlowInfo(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @dev Get the net flow rate of the account\\n     * @param token Super token address\\n     * @param account Account for the query\\n     * @return flowRate Net flow rate\\n     */\\n    function getNetFlow(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @notice Delete the flow between sender and receiver\\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\\n     * @param token Super token address\\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\\n     * @param receiver Flow receiver address\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementTerminated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Both flow sender and receiver may delete the flow\\n     * - If Sender account is insolvent or in critical state, a solvency agent may\\n     *   also terminate the agreement\\n     * - Gas fee may be returned to the sender\\n     */\\n    function deleteFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n     /**\\n      * @dev Flow updated event\\n      * @param token Super token address\\n      * @param sender Flow sender address\\n      * @param receiver Flow recipient address\\n      * @param flowRate Flow rate in amount per second for this flow\\n      * @param totalSenderFlowRate Total flow rate in amount per second for the sender\\n      * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\\n      * @param userData The user provided data\\n      */\\n     event FlowUpdated(\\n         ISuperfluidToken indexed token,\\n         address indexed sender,\\n         address indexed receiver,\\n         int96 flowRate,\\n         int256 totalSenderFlowRate,\\n         int256 totalReceiverFlowRate,\\n         bytes userData\\n     );\\n\\n}\\n\",\"keccak256\":\"0x5885d4630de3f671ca803ef003771bed0f88a57e0eefb4f4ed684db5ec1553c6\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\n/**\\n * @title Super app definitions library\\n * @author Superfluid\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n\\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\\n    }\\n}\\n\\n/**\\n * @title Context definitions library\\n * @author Superfluid\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @title Batch operation library\\n * @author Superfluid\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev Superfluid.callAgreement batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev Superfluid.callAppAction batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\n/**\\n * @title Superfluid governance configs library\\n * @author Superfluid\\n */\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\\\");\\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY = \\n        keccak256(\\\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\\\");\\n\\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.trustedForwarder\\\",\\n            forwarder));\\n    }\\n\\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\\\",\\n            deployer,\\n            registrationKey));\\n    }\\n\\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.factory\\\",\\n            factory));\\n    }\\n\\n    function decodePPPConfig(uint256 pppConfig) internal pure returns (uint256 liquidationPeriod, uint256 patricianPeriod) {\\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\\n        patricianPeriod = pppConfig & type(uint32).max;\\n    }\\n}\\n\",\"keccak256\":\"0x2e92713e66eb26b3593bda5e6f8ff7f33c8de7b58de749e60a181dd88150e20d\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Super agreement interface\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Get the type of the agreement class\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class\\n     * @param account Account the state belongs to\\n     * @param time Time used for the calculation\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\\n     * @return deposit Account deposit amount of this agreement\\n     * @return owedDeposit Account owed deposit amount of this agreement\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xc3a6a907245116bcecc70fe4b207454012e8ce4fa190228fb8bbe39e0b1bc5cf\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n/**\\n * @title SuperApp interface\\n * @author Superfluid\\n * @dev Be aware of the app being jailed, when the word permitted is used.\\n *\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0x57f4203168992c940eb6b8c7cc75f854cb36a1f9323b3f39ddc5e4fbe819c043\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /**\\n     * @dev Initialize the contract\\n     */\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     *         zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     *         allowance mechanism. `amount` is then deducted from the caller's\\n     *         allowance.\\n     *\\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     *         means all token operations (creation, movement and destruction) must have\\n     *         amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\\n     *      the corresponding functions will be called with `data` and empty\\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n   /**\\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\\n    * spend tokens of `sender`.\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfTransferFrom(\\n        address sender,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n   ) external;\\n\\n   /**\\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\\n    * `account`.\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfApproveFor(\\n        address account,\\n        address spender,\\n        uint256 amount\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account where tokens are upgraded to\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0x3cb0b7216007b942f7611d7b3d983c0df9408fdd4fd6b799c33fc9033e0abf8b\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n/**\\n * @title Super token factory interface\\n * @author Superfluid\\n */\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    /**\\n      * @dev Super token logic created event\\n      * @param tokenLogic Token logic address\\n      */\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    /**\\n      * @dev Super token created event\\n      * @param token Newly created super token address\\n      */\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n    /**\\n      * @dev Custom super token created event\\n      * @param token Newly created custom super token address\\n      */\\n    event CustomSuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x68a466c978557e47bd7385b1d7d78f1c8fb07462a870efc5a791008e33a4f535\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n/**\\n * @title Host interface\\n * @author Superfluid\\n * NOTE:\\n * This is the central contract of the system where super agreement, super app\\n * and super token features are connected.\\n *\\n * The Superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Time\\n     *\\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\\n     * > Neo: Then why can't I see what happens to her?\\n     * > The Oracle: We can never see past the choices we don't understand.\\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\\n     *************************************************************************/\\n\\n    function getNow() external view returns (uint256);\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governance address of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n    /**\\n     * @dev Governance replaced event\\n     * @param oldGov Address of the old governance contract\\n     * @param newGov Address of the new governance contract\\n     */\\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic Initial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n    /**\\n     * @notice Agreement class registered event\\n     * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n     * @param agreementType The agreement type registered\\n     * @param code Address of the new agreement\\n     */\\n    event AgreementClassRegistered(bytes32 agreementType, address code);\\n\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n    /**\\n     * @notice Agreement class updated event\\n     * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n     * @param agreementType The agreement type updated\\n     * @param code Address of the new agreement\\n     */\\n    event AgreementClassUpdated(bytes32 agreementType, address code);\\n\\n    /**\\n    * @notice Check if the agreement type is whitelisted\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @notice Get agreement class\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @notice Create a new bitmask by adding a agreement class to it\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @notice Create a new bitmask by removing a agreement class from it\\n    * @dev agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n    /**\\n     * @dev SuperToken factory updated event\\n     * @param newFactory Address of the new factory\\n     */\\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\\n\\n    /**\\n     * @notice Update the super token logic to the latest\\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n    /**\\n     * @dev SuperToken logic updated event\\n     * @param code Address of the new SuperToken logic\\n     */\\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     * `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n    /**\\n     * @dev App registered event\\n     * @param app Address of jailed app\\n     */\\n    event AppRegistered(ISuperApp indexed app);\\n\\n    /**\\n     * @dev Message sender declares it as a super app, using a registration key\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     * `SuperAppDefinitions`\\n     * @param registrationKey The registration key issued by the governance\\n     */\\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\\n\\n    /**\\n     * @dev Message sender declares app as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     * `SuperAppDefinitions`\\n     * NOTE: only factory contracts authorized by governance can register super apps\\n     */\\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The target super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app is allowed to call the target app as downstream app\\n     * @param app Super app address\\n     * @param targetApp The target super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed,\\n        ISuperfluidToken appAllowanceToken\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 appAllowanceWantedMore,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n    /**\\n     * @dev Jail event for the app\\n     * @param app Address of jailed app\\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param agreementClass The agreement address you are calling\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @notice Call app action\\n     * @dev Main use case is calling app action in a batch call via the host\\n     * @param callData The contextual call data\\n     *\\n     * NOTE: See \\\"Contextless Call Proxies\\\" above for more about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Context Struct\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n        // app address\\n        address appAddress;\\n        // app allowance in super token\\n        ISuperfluidToken appAllowanceToken;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation type. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function for trusted forwarders (EIP-2771)\\n     * @param operations Array of batch operations\\n     */\\n    function forwardBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage doesn't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0xb47488f67a2669e8166364ed471a1dd16039b155b6a87192c3be53ad25f3b0f7\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @title Superfluid governance interface\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function batchUpdateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken[] calldata tokens) external;\\n    \\n    /**\\n     * @dev Set configuration as address value\\n     */\\n    function setConfig(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key,\\n        address value\\n    ) external;\\n    \\n    /**\\n     * @dev Set configuration as uint256 value\\n     */\\n    function setConfig(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev Clear configuration\\n     */\\n    function clearConfig(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key\\n    ) external;\\n\\n    /**\\n     * @dev Get configuration as address value\\n     */\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /**\\n     * @dev Get configuration as uint256 value\\n     */\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x2166f766b7f61f9bb1376b0948efa0d0c0046b93dc301e51ce495203b145189b\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid token interface\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**\\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\\n     *\\n     * Note:\\n     * - version: 1\\n     * - liquidationType key:\\n     *    - 0 = reward account receives reward (PIC period)\\n     *    - 1 = liquidator account receives reward (Pleb period)\\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\\n     */\\n    struct LiquidationTypeData {\\n        uint256 version;\\n        uint8 liquidationType;\\n    }\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @notice Calculate the realtime balance given the current host.getNow() value\\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\\n     * @param account for the query\\n     * @return availableBalance Real-time balance\\n     * @return deposit Account deposit\\n     * @return owedDeposit Account owed Deposit\\n     */\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @notice Check if account is critical\\n    * @dev A critical account is when availableBalance < 0\\n    * @param account The account to check\\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\\n    * @return isCritical Whether the account is critical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @notice Check if account is critical now (current host.getNow())\\n    * @dev A critical account is when availableBalance < 0\\n    * @param account The account to check\\n    * @return isCritical Whether the account is critical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @notice Check if account is solvent\\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\\n     * @param account The account to check\\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @notice Check if account is solvent now\\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\\n     * @param account The account to check\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @notice Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n    /**\\n     * @dev Agreement created event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n    /**\\n     * @dev Agreement updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n    /**\\n     * @dev Agreement terminated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of an agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @notice Settle balance from an account by the agreement\\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Make liquidation payouts (v2)\\n     * @param id Agreement ID\\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAmount The amount the reward recepient account will receive\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     *\\n     * - If a bailout is required (bailoutAmount > 0)\\n     *   - the actual reward (single deposit) goes to the executor,\\n     *   - while the reward account becomes the bailout account\\n     *   - total bailout include: bailout amount + reward amount\\n     *   - the targetAccount will be bailed out\\n     * - If a bailout is not required\\n     *   - the targetAccount will pay the rewardAmount\\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayoutsV2\\n    (\\n        bytes32 id,\\n        bytes memory liquidationTypeData,\\n        address liquidatorAccount,\\n        bool useDefaultRewardAccount,\\n        address targetAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta\\n    ) external;\\n    /**\\n     * @dev Agreement liquidation event v2 (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAccount Account that collects the reward or bails out insolvent accounts\\n     * @param rewardAmount The amount the reward recipient account balance should change by\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if the agreement is liquidated during the PIC period\\n     *   - the rewardAccount will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\\n     *   - the liquidatorAccount will get the rewardAmount (remaining deposit)\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the targetAccount is insolvent\\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\\n     *   - the rewardAccount will pay for both the rewardAmount and bailoutAmount\\n     *   - the targetAccount will receive the bailoutAmount\\n     */\\n    event AgreementLiquidatedV2(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed liquidatorAccount,\\n        address indexed targetAccount,\\n        address rewardAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta,\\n        bytes liquidationTypeData\\n    );\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n    /**************************************************************************\\n     * DEPRECATED\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     *\\n     * NOTE:\\n     *\\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     *\\n     * NOTE:\\n     *\\n     * [DEPRECATED] Use AgreementLiquidatedV2 instead\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param bondAccount Account that collect the reward or bailout accounts\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of liquidation bailouot\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if bailout is equal to 0, then\\n     *   - the bondAccount will get the rewardAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount.\\n     * - if bailout is larger than 0, then\\n     *   - the liquidatorAccount will get the rewardAmouont,\\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\\n     */\\n    event AgreementLiquidatedBy(\\n        address liquidatorAccount,\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed bondAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    );\\n}\\n\",\"keccak256\":\"0x9189eaba9e856cc4932ea29eeaf4e89a09448dde13860591691ec122856fdc75\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n/**\\n * @title ERC20 token with token info interface\\n * @author Superfluid\\n * @dev Using abstract contract instead of interfaces because old solidity\\n *      does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x66708dae3fcd06e6fc0a46f2959fc2d1e6b9361f28598337339d26af8eb8c0f9\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\n/**\\n * @title ERC20 token info interface\\n * @author Superfluid\\n * @dev ERC20 standard interface does not specify these functions, but\\n *      often the token implementations have them.\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70e573644a0ff271c0ccef526809e9d9ab4950ec58755ca84e833cde3b8f3df0\",\"license\":\"AGPLv3\"},\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/ux/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.8.0;\\n\\n/**\\n * @title Abstraction for an address resolver contract\\n * @author Superfluid\\n */\\ninterface IResolver {\\n\\n    event Set(string indexed name, address target);\\n\\n    /**\\n     * @dev Set resolver address name\\n     */\\n    function set(string calldata name, address target) external;\\n\\n    /**\\n     * @dev Get address by name\\n     */\\n    function get(string calldata name) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xac74894c775af067d6caccdde0966c54a5e4ebefb0903bc7334c964359bf2f69\",\"license\":\"AGPLv3\"},\"src/reaction/ReactionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {\\n    ISuperfluid\\n} from \\\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\nimport \\\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/ux/IResolver.sol\\\";\\n\\nimport \\\"./ReactionToken.sol\\\";\\nimport \\\"./StakedFlow.sol\\\";\\n\\ncontract ReactionFactory is Context, UUPSUpgradeable, Initializable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address private _sfHost; // host\\n    address private _sfCfa; // the stored constant flow agreement class address\\n    address private _sfSuperTokenFactory;\\n    address private _sfResolver;\\n    string private _sfVersion;\\n\\n    IResolver internal _resolver; // Superfluid resolver\\n\\n    address owner;\\n\\n    mapping (address => address) public superTokenRegistry;  // token registry for non-official tokens\\n\\n    EnumerableSet.AddressSet private superTokensSet; // Registry supertokens\\n\\n    mapping(address => mapping(address => address)) internal _stakedFlows;\\n\\n    event Initialized(address sfHost, address sfCfa, address sfSuperTokenFactory, address sfResolver, string sfVersion);\\n    event ReactionDeployed(address creator, address reactionContractAddr, string reactionTokenName, string reactionTokenSymbol, string tokenMetadataURI, address stakingTokenAddress);\\n\\n    function initialize(address sfHost, address sfCfa, address sfSuperTokenFactory, address sfResolver, string memory sfVersion) public payable initializer {\\n        require(address(sfHost) != address(0), \\\"ReactionFactory: Host Address can't be 0x\\\");\\n        require(address(sfCfa) != address(0), \\\"ReactionFactory: CFA Address can't be 0x\\\");\\n        require(address(sfSuperTokenFactory) != address(0), \\\"ReactionFactory: SuperTokenFactory Address can't be 0x\\\");\\n        require(address(sfResolver) != address(0), \\\"ReactionFactory: Resolver Address can't be 0x\\\");\\n\\n        _sfHost = sfHost;\\n        _sfCfa = sfCfa;\\n        _sfSuperTokenFactory = sfSuperTokenFactory;\\n        _sfResolver = sfResolver;\\n        _sfVersion = sfVersion;\\n\\n        _resolver = IResolver(sfResolver);\\n\\n        owner = _msgSender();\\n\\n        emit Initialized(_sfHost, _sfCfa, _sfSuperTokenFactory, _sfResolver, _sfVersion);\\n    }\\n\\n    function deployReaction(string memory reactionTokenName, string memory reactionTokenSymbol, string memory tokenMetadataURI, address stakingTokenAddress, uint8 monthDistributionPercentage) external returns (address){\\n        ReactionToken reactionContract = new ReactionToken(\\n            address(this),\\n            _sfHost, \\n            _sfCfa,\\n            stakingTokenAddress,\\n            reactionTokenName, \\n            reactionTokenSymbol,\\n            tokenMetadataURI,\\n            monthDistributionPercentage\\n        );\\n\\n        address reactionContractAddr = address(reactionContract);\\n\\n        emit ReactionDeployed(_msgSender(), reactionContractAddr, reactionTokenName, reactionTokenSymbol, tokenMetadataURI, stakingTokenAddress);\\n\\n        return reactionContractAddr;\\n    }\\n\\n    function isSuperToken(ERC20WithTokenInfo _token) public view returns (bool) {\\n        if(!superTokensSet.contains(address(_token))){\\n            string memory tokenId = string(abi.encodePacked('supertokens', '.', _sfVersion, '.', _token.symbol()));\\n            return _resolver.get(tokenId) == address(_token);\\n        }\\n        return true;\\n    }\\n\\n    function getSuperToken(ERC20WithTokenInfo _token) public view returns (address tokenAddress) {\\n        if(isSuperToken(_token)){\\n            tokenAddress = address(_token);\\n        } else {\\n            string memory tokenId = string(abi.encodePacked('supertokens', '.', _sfVersion, '.', _token.symbol(), 'x'));\\n            tokenAddress = _resolver.get(tokenId);\\n\\n            if (tokenAddress == address(0)) { // Look on the App registry if there's already a \\\"non-oficially registered\\\" Supertoken\\n                tokenAddress = superTokenRegistry[address(_token)];\\n            }\\n        }\\n    }\\n\\n    function createSuperToken(ERC20WithTokenInfo _token) public returns (ISuperToken superToken) {\\n        require(isSuperToken(_token) == false, \\\"ReactionFactory: Token is already a SuperToken\\\");\\n\\n        if (superTokenRegistry[address(_token)] != address(0)) {\\n            superToken = ISuperToken(superTokenRegistry[address(_token)]);\\n        } else {\\n            ISuperTokenFactory factory = ISuperfluid(_sfHost).getSuperTokenFactory();\\n            string memory name = string(abi.encodePacked('Super ', _token.name()));\\n            string memory symbol = string(abi.encodePacked(_token.symbol(), 'x'));\\n            superToken = factory.createERC20Wrapper(_token, ISuperTokenFactory.Upgradability.FULL_UPGRADABE, name, symbol);\\n            superTokenRegistry[address(_token)] = address(superToken);\\n            superTokensSet.add(address(superToken));\\n        }\\n    }\\n\\n    function getStakedFlow(address user, address token, uint8 monthDistributionPercentage) public returns (address){\\n        address stakedFlow = _stakedFlows[user][token];\\n        if(stakedFlow == address(0)){\\n            stakedFlow = address(new StakedFlow(address(this), _sfHost, _sfCfa, monthDistributionPercentage));\\n            _stakedFlows[user][token] = stakedFlow;\\n        }\\n\\n        return stakedFlow;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\\n    }\\n\\n     /* ========== MODIFIERS ========== */\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"ReactionFactory: Caller is not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x4b88a7e50224d89ff45d11b6766dc203475cc12a06de51f0e833821978f614a6\",\"license\":\"MIT\"},\"src/reaction/ReactionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\n\\nimport {\\n    IConstantFlowAgreementV1\\n} from \\\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperTokenFactory\\n} from \\\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nimport \\\"./ReactionFactory.sol\\\";\\nimport \\\"./StakedFlow.sol\\\";\\n\\ncontract ReactionToken is Context, ERC20 {\\n    event Staked(address author, uint256 amount, address stakingTokenAddress);\\n    event Reacted(address author, address reactionRecipientAddress, uint256 tokenId, address reactionTokenAddress, uint256 amount, string reactionTokenName, string reactionTokenSymbol);\\n    event Flowed(address flow, uint256 amount, address stakingTokenAddress, address recipient, address stakingSuperTokenAddress);\\n\\n    address private _sfHost; // host\\n    address private _sfCfa; // the stored constant flow agreement class address\\n\\n    address private _stakingTokenAddress; // If 0x, all tokens will be accepted to stake\\n    uint8 private _monthDistributionPercentage; // Monthly percentage to be returned (0-100)\\n\\n    string internal _tokenMetadataURI; // Metadata url\\n\\n    ReactionFactory internal _reactionFactory;\\n\\n    constructor(\\n        address reactionFactory,\\n        address sfHost, \\n        address sfCfa, \\n        address stakingTokenAddress,\\n        string memory reactionTokenName, \\n        string memory reactionTokenSymbol,\\n        string memory tokenMetadataURI,\\n        uint8 monthDistributionPercentage\\n    ) ERC20(reactionTokenName, reactionTokenSymbol) {\\n        require(address(reactionFactory) != address(0), \\\"ReactionToken: Reaction Factory can't be 0x\\\");\\n        require(address(sfHost) != address(0), \\\"ReactionToken: Host Address can't be 0x\\\");\\n        require(address(sfCfa) != address(0), \\\"ReactionToken: CFA Address can't be 0x\\\");\\n        require(monthDistributionPercentage < 101, \\\"ReactionToken: monthDistributionPercentage must be between 0 and 100\\\");\\n        require(monthDistributionPercentage > 0, \\\"ReactionToken: monthDistributionPercentage must be between 0 and 100\\\");\\n\\n        _reactionFactory = ReactionFactory(reactionFactory);\\n        _sfHost = sfHost;\\n        _sfCfa = sfCfa;\\n\\n        _stakingTokenAddress = stakingTokenAddress;\\n        _monthDistributionPercentage = monthDistributionPercentage;\\n        _tokenMetadataURI = tokenMetadataURI;\\n    }\\n\\n    function stakeAndMint(uint256 amount, address stakingTokenAddress, address reactionRecipientAddress, uint256 tokenId) public {\\n        require(address(stakingTokenAddress) != address(0), \\\"ReactionToken: Staking Token Address can't be 0x\\\");\\n        require(address(reactionRecipientAddress) != address(0), \\\"ReactionToken: reactionRecipient Address can't be 0x\\\");\\n\\n        // Verify if the staking token is correct\\n        if(_stakingTokenAddress != address(0)){\\n            require(address(stakingTokenAddress) == address(_stakingTokenAddress), \\\"ReactionToken: Invalid Staking Token\\\");\\n        }\\n\\n        // Stake everything to the StakedFlow\\n        StakedFlow stakedFlow = StakedFlow(_reactionFactory.getStakedFlow(_msgSender(), stakingTokenAddress, _monthDistributionPercentage));\\n\\n        IERC20(stakingTokenAddress).transferFrom(_msgSender(), address(stakedFlow), amount);\\n        emit Staked(_msgSender(), amount, stakingTokenAddress);\\n\\n        // Mint the reaction token straight to the Recipient\\n        _mint(reactionRecipientAddress, amount);\\n        ERC20 reactionToken = ERC20(address(this));\\n        emit Reacted(_msgSender(), reactionRecipientAddress, tokenId, address(this), amount, reactionToken.name(), reactionToken.symbol());\\n\\n        // Upsert the stream the staked amount\\n        address stakingSuperTokenAddress = stakedFlow.flow(amount, stakingTokenAddress, _msgSender());\\n        emit Flowed(address(stakedFlow), amount, stakingTokenAddress, _msgSender(), stakingSuperTokenAddress); \\n    }\\n\\n    function getTokenMetadataURI() public view returns (string memory) {\\n        return _tokenMetadataURI;\\n    }\\n\\n    function getStakingTokenAddress() public view returns (address) {\\n        return _stakingTokenAddress;\\n    }\\n}\",\"keccak256\":\"0x9642705ee254fdc7ffac20d28c9532d4885acd950e2fc42cf19e8dbf6eff0c26\",\"license\":\"MIT\"},\"src/reaction/StakedFlow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {\\n    IConstantFlowAgreementV1\\n} from \\\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperTokenFactory\\n} from \\\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\nimport { ERC20WithTokenInfo } from \\\"@superfluid-finance_1/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\\\";\\n\\nimport \\\"./ReactionFactory.sol\\\"; \\n\\ncontract StakedFlow is Context {\\n    event Flowing(address stakingSuperToken, uint256 balance, address recipient, uint256 flowRate);\\n\\n    ISuperfluid internal _host; // Superfluid host address\\n    IConstantFlowAgreementV1 internal _cfa; // Superfluid Constant Flow Agreement address\\n    ISuperTokenFactory internal _superTokenFactory; // Superfluid Supertoken Factory\\n\\n    ReactionFactory internal _reactionFactory;\\n\\n    uint8 internal _monthDistributionPercentage;\\n\\n    constructor(\\n        address reactionFactory,\\n        address host, \\n        address cfa,\\n        uint8 monthDistributionPercentage\\n    ) {\\n        require(address(reactionFactory) != address(0), \\\"StakedFlow: Reaction Factory can't be 0x\\\");\\n        require(address(host) != address(0), \\\"StakedFlow: Host Address can't be 0x\\\");\\n        require(address(cfa) != address(0), \\\"StakedFlow: CFA Address can't be 0x\\\");\\n        require(monthDistributionPercentage < 101, \\\"StakedFlow: monthDistributionPercentage must be between 0 and 100\\\");\\n        require(monthDistributionPercentage > 0, \\\"StakedFlow: monthDistributionPercentage must be between 0 and 100\\\");\\n\\n        _reactionFactory = ReactionFactory(reactionFactory);\\n        _host = ISuperfluid(host);\\n        _cfa =  IConstantFlowAgreementV1(cfa);\\n        _monthDistributionPercentage = monthDistributionPercentage;\\n    }\\n\\n    function flow(uint256 amount, address stakingTokenAddress, address recipient) public returns (address){\\n        require(address(stakingTokenAddress) != address(0), \\\"StakedFlow: Staking Token Address can't be 0x\\\");\\n\\n        ERC20WithTokenInfo stakingToken = ERC20WithTokenInfo(stakingTokenAddress);\\n\\n        // Get/Create the super token\\n        address stakingSuperToken = _reactionFactory.isSuperToken(stakingToken) ? address(stakingToken) : _reactionFactory.getSuperToken(stakingToken);\\n        if (stakingSuperToken == address(0)) {\\n            stakingSuperToken = address(_reactionFactory.createSuperToken(stakingToken));\\n        }\\n\\n        // Approve token to be upgraded\\n        if (stakingToken.allowance(address(this), stakingSuperToken) < amount) {\\n            bool success = stakingToken.approve(stakingSuperToken, amount); // max allowance\\n            require(success, \\\"ReactionToken: Failed to approve allowance to SuperToken\\\");\\n        }\\n\\n        // Give token Superpowers\\n        if(address(stakingToken) != address(stakingSuperToken)){\\n            ISuperToken(stakingSuperToken).upgrade(amount);\\n        }\\n\\n        // Calculate the flow rate\\n        uint256 secondsInAMonth = 2592000;\\n        uint256 balance = ISuperToken(stakingSuperToken).balanceOf(address(this));\\n        uint256 flowRate = (balance*_monthDistributionPercentage)/(secondsInAMonth*100);\\n\\n        // Create/Uodate CFA\\n        (, int96 outFlowRate,,) = _cfa.getFlow(ISuperToken(stakingSuperToken), address(this), recipient);\\n        if(outFlowRate > 0){\\n            _host.callAgreement(\\n                _cfa,\\n                abi.encodeWithSelector(\\n                    _cfa.updateFlow.selector,\\n                    stakingSuperToken,\\n                    recipient,\\n                    flowRate,\\n                    new bytes(0) // placeholder\\n                ),\\n                new bytes(0)\\n            );\\n        }else{\\n            _host.callAgreement(\\n                _cfa,\\n                abi.encodeWithSelector(\\n                    _cfa.createFlow.selector,\\n                    stakingSuperToken,\\n                    recipient,\\n                    flowRate,\\n                    new bytes(0) // placeholder\\n                ),\\n                new bytes(0)\\n            );\\n        }\\n\\n        emit Flowing(stakingSuperToken, balance, recipient, flowRate);\\n\\n        return stakingSuperToken;\\n    }\\n}\",\"keccak256\":\"0x62e78af815f7bfb66e70316b776666b8a84c3068126acfdd0dfc052db84aa994\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c614aae6100526000396000818161081d015281816108b5015281816109c401528181610a5c0152610b5e0152614aae6000f3fe608060405260043610620000c25760003560e01c8063949ec2231162000073578063a7403a321162000055578063a7403a3214620001cf578063a8866adc14620001f4578063ce69fd6f146200022e57620000c2565b8063949ec2231462000185578063976e8cbd14620001aa57620000c2565b80633659cfe611620000a95780633659cfe614620001225780634f1ef286146200014757806352d1902d146200015e57620000c2565b80630c08a5c414620000c75780632fb3b3611462000109575b600080fd5b348015620000d457600080fd5b50620000ec620000e63660046200197d565b62000264565b6040516001600160a01b0390911681526020015b60405180910390f35b620001206200011a366004620019bb565b620003f3565b005b3480156200012f57600080fd5b5062000120620001413660046200197d565b62000812565b620001206200015836600462001a9a565b620009b9565b3480156200016b57600080fd5b506200017662000b51565b60405190815260200162000100565b3480156200019257600080fd5b50620000ec620001a436600462001a4d565b62000c18565b348015620001b757600080fd5b50620000ec620001c936600462001b97565b62000d10565b348015620001dc57600080fd5b50620000ec620001ee3660046200197d565b62000dd5565b3480156200020157600080fd5b50620000ec620002133660046200197d565b6007602052600090815260409020546001600160a01b031681565b3480156200023b57600080fd5b50620002536200024d3660046200197d565b62001159565b604051901515815260200162000100565b6000620002718262001159565b156200027f575080620003ee565b60006004836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620002bd57600080fd5b505afa158015620002d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002fc919081019062001b1b565b6040516020016200030f92919062001dd3565b60408051601f19818403018152908290526005547f693ec85e0000000000000000000000000000000000000000000000000000000083529092506001600160a01b03169063693ec85e9062000369908490600401620020d4565b60206040518083038186803b1580156200038257600080fd5b505afa15801562000397573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003bd91906200199c565b91506001600160a01b038216620003ec576001600160a01b038084166000908152600760205260409020541691505b505b919050565b600054610100900460ff16620004105760005460ff161562000414565b303b155b6200048c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015620004b8576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038616620005365760405162461bcd60e51b815260206004820152602960248201527f5265616374696f6e466163746f72793a20486f7374204164647265737320636160448201527f6e27742062652030780000000000000000000000000000000000000000000000606482015260840162000483565b6001600160a01b038516620005b45760405162461bcd60e51b815260206004820152602860248201527f5265616374696f6e466163746f72793a2043464120416464726573732063616e60448201527f2774206265203078000000000000000000000000000000000000000000000000606482015260840162000483565b6001600160a01b038416620006325760405162461bcd60e51b815260206004820152603660248201527f5265616374696f6e466163746f72793a205375706572546f6b656e466163746f60448201527f727920416464726573732063616e277420626520307800000000000000000000606482015260840162000483565b6001600160a01b038316620006b05760405162461bcd60e51b815260206004820152602d60248201527f5265616374696f6e466163746f72793a205265736f6c7665722041646472657360448201527f732063616e277420626520307800000000000000000000000000000000000000606482015260840162000483565b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0389811691909102919091179091556001805473ffffffffffffffffffffffffffffffffffffffff19908116888416179091556002805482168784161790556003805490911691851691909117905581516200074590600490602085019062001844565b506005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055620007763390565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790556000546001546002546003546040517f7b6a0fb0130a7d7a04b9aeddccf2f89347b48e2aec6de20e57890bb98df4132a95620007ef95620100009004811694811693811692169060049062001f48565b60405180910390a180156200080a576000805461ff00191690555b505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620008b35760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840162000483565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200090f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146200098d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840162000483565b6200099881620012cb565b60408051600080825260208201909252620009b6918391906200134c565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141562000a5a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840162000483565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000ab67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161462000b345760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840162000483565b62000b3f82620012cb565b62000b4d828260016200134c565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000bf35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840162000483565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6001600160a01b038084166000908152600a6020908152604080832086851684529091528120549091168062000d065760005460015460405130926001600160a01b03620100009091048116921690869062000c7490620018d3565b6001600160a01b03948516815292841660208401529216604082015260ff9091166060820152608001604051809103906000f08015801562000cba573d6000803e3d6000fd5b506001600160a01b038681166000908152600a6020908152604080832089851684529091529020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905590505b90505b9392505050565b60008030600060029054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b0316868a8a8a8960405162000d5390620018e1565b62000d6698979695949392919062001ec4565b604051809103906000f08015801562000d83573d6000803e3d6000fd5b509050807f98572afc23f97eff4d2c5d95997d06e995e45e881de3f161a42cd594badb01e933828a8a8a8a60405162000dc29695949392919062002000565b60405180910390a1979650505050505050565b600062000de28262001159565b1562000e575760405162461bcd60e51b815260206004820152602e60248201527f5265616374696f6e466163746f72793a20546f6b656e20697320616c7265616460448201527f792061205375706572546f6b656e000000000000000000000000000000000000606482015260840162000483565b6001600160a01b03828116600090815260076020526040902054161562000e9a57506001600160a01b0380821660009081526007602052604090205416620003ee565b60008060029054906101000a90046001600160a01b03166001600160a01b031663731aed6e6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000eea57600080fd5b505afa15801562000eff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f2591906200199c565b90506000836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801562000f6357600080fd5b505afa15801562000f78573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000fa2919081019062001b1b565b60405160200162000fb4919062001e7d565b60405160208183030381529060405290506000846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200100157600080fd5b505afa15801562001016573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001040919081019062001b1b565b60405160200162001052919062001d10565b60408051601f19818403018152908290527f431f148100000000000000000000000000000000000000000000000000000000825291506001600160a01b0384169063431f148190620010b0908890600290879087906004016200206e565b602060405180830381600087803b158015620010cb57600080fd5b505af1158015620010e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200110691906200199c565b6001600160a01b038681166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905593506200115060088562001513565b50505050919050565b60006200116860088362001533565b620012c35760006004836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620011ab57600080fd5b505afa158015620011c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620011ea919081019062001b1b565b604051602001620011fd92919062001d53565b60408051601f19818403018152908290526005547f693ec85e0000000000000000000000000000000000000000000000000000000083529092506001600160a01b038086169291169063693ec85e906200125c908590600401620020d4565b60206040518083038186803b1580156200127557600080fd5b505afa1580156200128a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012b091906200199c565b6001600160a01b031614915050620003ee565b506001919050565b6006546001600160a01b03163314620009b65760405162461bcd60e51b8152602060048201526024808201527f5265616374696f6e466163746f72793a2043616c6c6572206973206e6f74206f60448201527f776e657200000000000000000000000000000000000000000000000000000000606482015260840162000483565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156200138857620013828362001556565b6200150e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620013c257600080fd5b505afa925050508015620013f5575060408051601f3d908101601f19168201909252620013f29181019062001b02565b60015b620014695760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840162000483565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114620015005760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840162000483565b506200150e83838362001623565b505050565b60006200152a836001600160a01b03841662001654565b90505b92915050565b6001600160a01b038116600090815260018301602052604081205415156200152a565b6001600160a01b0381163b620015d55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840162000483565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6200162e83620016a6565b6000825111806200163c5750805b156200150e576200164e8383620016e8565b50505050565b60008181526001830160205260408120546200169d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200152d565b5060006200152d565b620016b18162001556565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200152a838360405180606001604052806027815260200162004a526027913960606001600160a01b0384163b6200178b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840162000483565b600080856001600160a01b031685604051620017a8919062001cf2565b600060405180830381855af49150503d8060008114620017e5576040519150601f19603f3d011682016040523d82523d6000602084013e620017ea565b606091505b5091509150620017fc82828662001806565b9695505050505050565b606083156200181757508162000d09565b825115620018285782518084602001fd5b8160405162461bcd60e51b8152600401620004839190620020d4565b828054620018529062002177565b90600052602060002090601f016020900481019282620018765760008555620018c1565b82601f106200189157805160ff1916838001178555620018c1565b82800160010185558215620018c1579182015b82811115620018c1578251825591602001919060010190620018a4565b50620018cf929150620018ef565b5090565b61102380620021db83390190565b61185480620031fe83390190565b5b80821115620018cf5760008155600101620018f0565b60006200191d62001917846200211d565b620020e9565b90508281528383830111156200193257600080fd5b828260208301376000602084830101529392505050565b600082601f8301126200195a578081fd5b6200152a8383356020850162001906565b803560ff81168114620003ee57600080fd5b6000602082840312156200198f578081fd5b813562000d0981620021c4565b600060208284031215620019ae578081fd5b815162000d0981620021c4565b600080600080600060a08688031215620019d3578081fd5b8535620019e081620021c4565b94506020860135620019f281620021c4565b9350604086013562001a0481620021c4565b9250606086013562001a1681620021c4565b9150608086013567ffffffffffffffff81111562001a32578182fd5b62001a408882890162001949565b9150509295509295909350565b60008060006060848603121562001a62578283fd5b833562001a6f81620021c4565b9250602084013562001a8181620021c4565b915062001a91604085016200196b565b90509250925092565b6000806040838503121562001aad578182fd5b823562001aba81620021c4565b9150602083013567ffffffffffffffff81111562001ad6578182fd5b8301601f8101851362001ae7578182fd5b62001af88582356020840162001906565b9150509250929050565b60006020828403121562001b14578081fd5b5051919050565b60006020828403121562001b2d578081fd5b815167ffffffffffffffff81111562001b44578182fd5b8201601f8101841362001b55578182fd5b805162001b6662001917826200211d565b81815285602083850101111562001b7b578384fd5b62001b8e82602083016020860162002148565b95945050505050565b600080600080600060a0868803121562001baf578081fd5b853567ffffffffffffffff8082111562001bc7578283fd5b62001bd589838a0162001949565b9650602088013591508082111562001beb578283fd5b62001bf989838a0162001949565b9550604088013591508082111562001c0f578283fd5b5062001c1e8882890162001949565b935050606086013562001c3181620021c4565b915062001c41608087016200196b565b90509295509295909350565b6000815180845262001c6781602086016020860162002148565b601f01601f19169290920160200192915050565b6000815462001c8a8162002177565b6001828116801562001ca5576001811462001cb75762001ce8565b60ff1984168752828701945062001ce8565b8560005260208060002060005b8581101562001cdf5781548a82015290840190820162001cc4565b50505082870194505b5050505092915050565b6000825162001d0681846020870162002148565b9190910192915050565b6000825162001d2481846020870162002148565b7f7800000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b60007f7375706572746f6b656e7300000000000000000000000000000000000000000082527f2e0000000000000000000000000000000000000000000000000000000000000080600b84015262001dae600c84018662001c7b565b90815283519062001dc782600183016020880162002148565b01600101949350505050565b60007f7375706572746f6b656e7300000000000000000000000000000000000000000082527f2e0000000000000000000000000000000000000000000000000000000000000080600b84015262001e2e600c84018662001c7b565b90815283519062001e4782600183016020880162002148565b7f780000000000000000000000000000000000000000000000000000000000000091016001810191909152600201949350505050565b60007f53757065722000000000000000000000000000000000000000000000000000008252825162001eb781600685016020870162002148565b9190910160060192915050565b60006101006001600160a01b03808c168452808b166020850152808a16604085015280891660608501525080608084015262001f038184018862001c4d565b905082810360a084015262001f19818762001c4d565b905082810360c084015262001f2f818662001c4d565b91505060ff831660e08301529998505050505050505050565b60006001600160a01b0380881683526020818816818501528187166040850152818616606085015260a06080850152829150845462001f878162002177565b8060a087015260c060018084166000811462001fac576001811462001fc15762001fee565b60ff198516838a015260e08901965062001fee565b898852858820885b8581101562001fe65781548b820186015290830190870162001fc9565b8a0184019750505b50949c9b505050505050505050505050565b60006001600160a01b038089168352808816602084015260c060408401526200202d60c084018862001c4d565b838103606085015262002041818862001c4d565b9050838103608085015262002057818762001c4d565b92505080841660a084015250979650505050505050565b60006001600160a01b0386168252600385106200209957634e487b7160e01b81526021600452602481fd5b84602083015260806040830152620020b5608083018562001c4d565b8281036060840152620020c9818562001c4d565b979650505050505050565b6000602082526200152a602083018462001c4d565b604051601f8201601f1916810167ffffffffffffffff81118282101715620021155762002115620021ae565b604052919050565b600067ffffffffffffffff8211156200213a576200213a620021ae565b50601f01601f191660200190565b60005b83811015620021655781810151838201526020016200214b565b838111156200164e5750506000910152565b6002810460018216806200218c57607f821691505b60208210811415620003ec57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620009b657600080fdfe60806040523480156200001157600080fd5b5060405162001023380380620010238339810160408190526200003491620002aa565b6001600160a01b038416620000a15760405162461bcd60e51b815260206004820152602860248201527f5374616b6564466c6f773a205265616374696f6e20466163746f72792063616e60448201526704ee840c4ca4060f60c31b60648201526084015b60405180910390fd5b6001600160a01b038316620001055760405162461bcd60e51b8152602060048201526024808201527f5374616b6564466c6f773a20486f737420416464726573732063616e277420626044820152630ca4060f60e31b606482015260840162000098565b6001600160a01b038216620001695760405162461bcd60e51b815260206004820152602360248201527f5374616b6564466c6f773a2043464120416464726573732063616e277420626560448201526204060f60eb1b606482015260840162000098565b60658160ff1610620001cc5760405162461bcd60e51b8152602060048201526041602482015260008051602062001003833981519152604482015260008051602062000fe38339815191526064820152600360fc1b608482015260a40162000098565b60008160ff16116200022f5760405162461bcd60e51b8152602060048201526041602482015260008051602062001003833981519152604482015260008051602062000fe38339815191526064820152600360fc1b608482015260a40162000098565b60038054600080546001600160a01b03199081166001600160a01b03978816179091556001805482169587169590951790945592909216939092169290921760ff60a01b1916600160a01b60ff92909216919091021790556200030c565b80516001600160a01b0381168114620002a557600080fd5b919050565b60008060008060808587031215620002c0578384fd5b620002cb856200028d565b9350620002db602086016200028d565b9250620002eb604086016200028d565b9150606085015160ff8116811462000301578182fd5b939692955090935050565b610cc7806200031c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fcb1908914610030575b600080fd5b61004361003e366004610aab565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60006001600160a01b0383166100fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f5374616b6564466c6f773a205374616b696e6720546f6b656e2041646472657360448201527f732063616e27742062652030780000000000000000000000000000000000000060648201526084015b60405180910390fd5b6003546040517fce69fd6f0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152859260009291169063ce69fd6f9060240160206040518083038186803b15801561015e57600080fd5b505afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019691906109ca565b610235576003546040517f0c08a5c40000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015290911690630c08a5c49060240160206040518083038186803b1580156101f857600080fd5b505afa15801561020c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023091906109a7565b610237565b815b90506001600160a01b0381166102e2576003546040517fa7403a320000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063a7403a3290602401602060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102df91906109a7565b90505b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03828116602483015287919084169063dd62ed3e9060440160206040518083038186803b15801561034557600080fd5b505afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d9190610a93565b10156104b3576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152602482018890526000919084169063095ea7b390604401602060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042291906109ca565b9050806104b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f5265616374696f6e546f6b656e3a204661696c656420746f20617070726f766560448201527f20616c6c6f77616e636520746f205375706572546f6b656e000000000000000060648201526084016100f3565b505b806001600160a01b0316826001600160a01b031614610540576040517f45977d03000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b038216906345977d0390602401600060405180830381600087803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b505050505b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015262278d00906000906001600160a01b038416906370a082319060240160206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190610a93565b905060006105e7836064610bea565b60035461060f9074010000000000000000000000000000000000000000900460ff1684610bea565b6106199190610bca565b6001546040517fe6a1e8880000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301523060248301528a811660448301529293506000929091169063e6a1e8889060640160806040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190610aec565b5050915050600081600b0b13156108105760008054600154604080519384526020840190526001600160a01b03918216926339255d5b92909116907f50209a620000000000000000000000000000000000000000000000000000000090610733908a908e90899060448101610b5a565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b90931690526107b4929160248101610b96565b600060405180830381600087803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261080a91908101906109ea565b50610948565b60008054600154604080519384526020840190526001600160a01b03918216926339255d5b92909116907f62fc305e000000000000000000000000000000000000000000000000000000009061086f908a908e90899060448101610b5a565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b90931690526108f0929160248101610b96565b600060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094691908101906109ea565b505b604080516001600160a01b038781168252602082018690528a16818301526060810184905290517f0100b8f2c2a1111cdf33078f5ed06f4716dfd9709bf8bae7735b7fc446ed9d9e9181900360800190a1509298975050505050505050565b6000602082840312156109b8578081fd5b81516109c381610c79565b9392505050565b6000602082840312156109db578081fd5b815180151581146109c3578182fd5b6000602082840312156109fb578081fd5b815167ffffffffffffffff80821115610a12578283fd5b818401915084601f830112610a25578283fd5b815181811115610a3757610a37610c63565b604051601f8201601f19908116603f01168101908382118183101715610a5f57610a5f610c63565b81604052828152876020848701011115610a77578586fd5b610a88836020830160208801610c33565b979650505050505050565b600060208284031215610aa4578081fd5b5051919050565b600080600060608486031215610abf578182fd5b833592506020840135610ad181610c79565b91506040840135610ae181610c79565b809150509250925092565b60008060008060808587031215610b01578081fd5b84519350602085015180600b0b8114610b18578182fd5b6040860151606090960151949790965092505050565b60008151808452610b46816020860160208601610c33565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610b8c6080830184610b2e565b9695505050505050565b60006001600160a01b038516825260606020830152610bb86060830185610b2e565b8281036040840152610b8c8185610b2e565b600082610be557634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c2e57634e487b7160e01b81526011600452602481fd5b500290565b60005b83811015610c4e578181015183820152602001610c36565b83811115610c5d576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c8e57600080fd5b5056fea26469706673582212200fa32c698fbc78d693bf25826e78e9e5a19baa088eb6dedb85d86ceb6ce6f69964736f6c6343000802003363656e74616765206d757374206265206265747765656e203020616e642031305374616b6564466c6f773a206d6f6e7468446973747269627574696f6e50657260806040523480156200001157600080fd5b50604051620018543803806200185483398101604081905262000034916200047b565b8351849084906200004d906003906020850190620002f3565b50805162000063906004906020840190620002f3565b5050506001600160a01b038816620000d65760405162461bcd60e51b815260206004820152602b60248201527f5265616374696f6e546f6b656e3a205265616374696f6e20466163746f72792060448201526a0c6c2dc4ee840c4ca4060f60ab1b60648201526084015b60405180910390fd5b6001600160a01b0387166200013e5760405162461bcd60e51b815260206004820152602760248201527f5265616374696f6e546f6b656e3a20486f737420416464726573732063616e276044820152660e840c4ca4060f60cb1b6064820152608401620000cd565b6001600160a01b038616620001a55760405162461bcd60e51b815260206004820152602660248201527f5265616374696f6e546f6b656e3a2043464120416464726573732063616e2774604482015265040c4ca4060f60d31b6064820152608401620000cd565b60658160ff16106200020c5760405162461bcd60e51b8152602060048201526044602482018190526000805160206200181483398151915290820152600080516020620018348339815191526064820152630203130360e41b608482015260a401620000cd565b60008160ff1611620002735760405162461bcd60e51b8152602060048201526044602482018190526000805160206200181483398151915290820152600080516020620018348339815191526064820152630203130360e41b608482015260a401620000cd565b600980546001600160a01b03808b166001600160a01b031992831617909255600580548a8416908316179055600680548984169083161790556007805460ff8516600160a01b0260ff60a01b19948a169190931617929092161790558151620002e4906008906020850190620002f3565b505050505050505050620005ba565b828054620003019062000567565b90600052602060002090601f01602090048101928262000325576000855562000370565b82601f106200034057805160ff191683800117855562000370565b8280016001018555821562000370579182015b828111156200037057825182559160200191906001019062000353565b506200037e92915062000382565b5090565b5b808211156200037e576000815560010162000383565b80516001600160a01b0381168114620003b157600080fd5b919050565b600082601f830112620003c7578081fd5b81516001600160401b0380821115620003e457620003e4620005a4565b604051601f8301601f19908116603f011681019082821181831017156200040f576200040f620005a4565b816040528381526020925086838588010111156200042b578485fd5b8491505b838210156200044e57858201830151818301840152908201906200042f565b838211156200045f57848385830101525b9695505050505050565b805160ff81168114620003b157600080fd5b600080600080600080600080610100898b03121562000498578384fd5b620004a38962000399565b9750620004b360208a0162000399565b9650620004c360408a0162000399565b9550620004d360608a0162000399565b60808a01519095506001600160401b0380821115620004f0578586fd5b620004fe8c838d01620003b6565b955060a08b015191508082111562000514578485fd5b620005228c838d01620003b6565b945060c08b015191508082111562000538578384fd5b50620005478b828c01620003b6565b9250506200055860e08a0162000469565b90509295985092959890939650565b6002810460018216806200057c57607f821691505b602082108114156200059e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61124a80620005ca6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a9059cbb11610066578063a9059cbb146101d6578063dd62ed3e146101e9578063f2cc8fcc14610222578063fa29140714610237576100ea565b806370a082311461019257806395d89b41146101bb578063a457c2d7146101c3576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780635e1e09a114610177576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761023f565b6040516101049190611148565b60405180910390f35b61012061011b366004610f81565b6102d1565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610f41565b6102e9565b60405160128152602001610104565b610120610172366004610f81565b61030d565b6007546040516001600160a01b039091168152602001610104565b6101346101a0366004610eca565b6001600160a01b031660009081526020819052604090205490565b6100f761034c565b6101206101d1366004610f81565b61035b565b6101206101e4366004610f81565b61040a565b6101346101f7366004610f09565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610235610230366004611075565b610418565b005b6100f76109bd565b60606003805461024e906111ab565b80601f016020809104026020016040519081016040528092919081815260200182805461027a906111ab565b80156102c75780601f1061029c576101008083540402835291602001916102c7565b820191906000526020600020905b8154815290600101906020018083116102aa57829003601f168201915b5050505050905090565b6000336102df8185856109cc565b5060019392505050565b6000336102f7858285610b24565b610302858585610bd4565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102df908290869061034790879061115b565b6109cc565b60606004805461024e906111ab565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103fd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61030282868684036109cc565b6000336102df818585610bd4565b6001600160a01b0383166104945760405162461bcd60e51b815260206004820152603060248201527f5265616374696f6e546f6b656e3a205374616b696e6720546f6b656e2041646460448201527f726573732063616e27742062652030780000000000000000000000000000000060648201526084016103f4565b6001600160a01b0382166105105760405162461bcd60e51b815260206004820152603460248201527f5265616374696f6e546f6b656e3a207265616374696f6e526563697069656e7460448201527f20416464726573732063616e277420626520307800000000000000000000000060648201526084016103f4565b6007546001600160a01b0316156105a3576007546001600160a01b038481169116146105a35760405162461bcd60e51b8152602060048201526024808201527f5265616374696f6e546f6b656e3a20496e76616c6964205374616b696e67205460448201527f6f6b656e0000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6009546000906001600160a01b031663949ec2233360075460405160e084901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039283166004820152918816602483015274010000000000000000000000000000000000000000900460ff166044820152606401602060405180830381600087803b15801561063c57600080fd5b505af1158015610650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106749190610eed565b90506001600160a01b0384166323b872dd336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908416602482015260448101889052606401602060405180830381600087803b1580156106ee57600080fd5b505af1158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610fac565b5060408051338152602081018790526001600160a01b0386168183015290517f9f9e4044c5742cca66ca090b21552bac14645e68bad7a92364a9d9ff18111a1c9181900360600190a16107798386610deb565b307f9f7ca02a10f016e6c4933b06b65132657f9504778eb5ffbf26c84f6f9acd1e15338585308a866001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108159190810190610fcc565b876001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088a9190810190610fcc565b60405161089d97969594939291906110e8565b60405180910390a160006001600160a01b03831663fcb190898888336040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381600087803b15801561092057600080fd5b505af1158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190610eed565b604080516001600160a01b038681168252602082018b9052898116828401523360608301528316608082015290519192507fa6c09c9934f935991a6cd67fa7ee3ff315b2b075e0b089b498a65853a34d63db919081900360a00190a150505050505050565b60606008805461024e906111ab565b6001600160a01b038316610a475760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b038216610ac35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610bce5781811015610bc15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103f4565b610bce84848484036109cc565b50505050565b6001600160a01b038316610c505760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b038216610ccc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b03831660009081526020819052604090205481811015610d5b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d9290849061115b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610dde91815260200190565b60405180910390a3610bce565b6001600160a01b038216610e415760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103f4565b8060026000828254610e53919061115b565b90915550506001600160a01b03821660009081526020819052604081208054839290610e8090849061115b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208284031215610edb578081fd5b8135610ee6816111fc565b9392505050565b600060208284031215610efe578081fd5b8151610ee6816111fc565b60008060408385031215610f1b578081fd5b8235610f26816111fc565b91506020830135610f36816111fc565b809150509250929050565b600080600060608486031215610f55578081fd5b8335610f60816111fc565b92506020840135610f70816111fc565b929592945050506040919091013590565b60008060408385031215610f93578182fd5b8235610f9e816111fc565b946020939093013593505050565b600060208284031215610fbd578081fd5b81518015158114610ee6578182fd5b600060208284031215610fdd578081fd5b815167ffffffffffffffff80821115610ff4578283fd5b818401915084601f830112611007578283fd5b815181811115611019576110196111e6565b604051601f8201601f19908116603f01168101908382118183101715611041576110416111e6565b81604052828152876020848701011115611059578586fd5b61106a83602083016020880161117f565b979650505050505050565b6000806000806080858703121561108a578081fd5b84359350602085013561109c816111fc565b925060408501356110ac816111fc565b9396929550929360600135925050565b600081518084526110d481602086016020860161117f565b601f01601f19169290920160200192915050565b60006001600160a01b03808a168352808916602084015287604084015280871660608401525084608083015260e060a083015261112860e08301856110bc565b82810360c084015261113a81856110bc565b9a9950505050505050505050565b600060208252610ee660208301846110bc565b6000821982111561117a57634e487b7160e01b81526011600452602481fd5b500190565b60005b8381101561119a578181015183820152602001611182565b83811115610bce5750506000910152565b6002810460018216806111bf57607f821691505b602082108114156111e057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461121157600080fd5b5056fea2646970667358221220e34a9900ee0a522e448e3ac18563ce061dd7db8ae42c9cd14f59426b5e664f0564736f6c634300080200335265616374696f6e546f6b656e3a206d6f6e7468446973747269627574696f6e50657263656e74616765206d757374206265206265747765656e203020616e64416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bcef02c219f73ffd87768c8e8477f1175be2a7867a658bed12f71081c4e1a59c64736f6c63430008020033",
  "deployedBytecode": "0x608060405260043610620000c25760003560e01c8063949ec2231162000073578063a7403a321162000055578063a7403a3214620001cf578063a8866adc14620001f4578063ce69fd6f146200022e57620000c2565b8063949ec2231462000185578063976e8cbd14620001aa57620000c2565b80633659cfe611620000a95780633659cfe614620001225780634f1ef286146200014757806352d1902d146200015e57620000c2565b80630c08a5c414620000c75780632fb3b3611462000109575b600080fd5b348015620000d457600080fd5b50620000ec620000e63660046200197d565b62000264565b6040516001600160a01b0390911681526020015b60405180910390f35b620001206200011a366004620019bb565b620003f3565b005b3480156200012f57600080fd5b5062000120620001413660046200197d565b62000812565b620001206200015836600462001a9a565b620009b9565b3480156200016b57600080fd5b506200017662000b51565b60405190815260200162000100565b3480156200019257600080fd5b50620000ec620001a436600462001a4d565b62000c18565b348015620001b757600080fd5b50620000ec620001c936600462001b97565b62000d10565b348015620001dc57600080fd5b50620000ec620001ee3660046200197d565b62000dd5565b3480156200020157600080fd5b50620000ec620002133660046200197d565b6007602052600090815260409020546001600160a01b031681565b3480156200023b57600080fd5b50620002536200024d3660046200197d565b62001159565b604051901515815260200162000100565b6000620002718262001159565b156200027f575080620003ee565b60006004836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620002bd57600080fd5b505afa158015620002d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002fc919081019062001b1b565b6040516020016200030f92919062001dd3565b60408051601f19818403018152908290526005547f693ec85e0000000000000000000000000000000000000000000000000000000083529092506001600160a01b03169063693ec85e9062000369908490600401620020d4565b60206040518083038186803b1580156200038257600080fd5b505afa15801562000397573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003bd91906200199c565b91506001600160a01b038216620003ec576001600160a01b038084166000908152600760205260409020541691505b505b919050565b600054610100900460ff16620004105760005460ff161562000414565b303b155b6200048c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015620004b8576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038616620005365760405162461bcd60e51b815260206004820152602960248201527f5265616374696f6e466163746f72793a20486f7374204164647265737320636160448201527f6e27742062652030780000000000000000000000000000000000000000000000606482015260840162000483565b6001600160a01b038516620005b45760405162461bcd60e51b815260206004820152602860248201527f5265616374696f6e466163746f72793a2043464120416464726573732063616e60448201527f2774206265203078000000000000000000000000000000000000000000000000606482015260840162000483565b6001600160a01b038416620006325760405162461bcd60e51b815260206004820152603660248201527f5265616374696f6e466163746f72793a205375706572546f6b656e466163746f60448201527f727920416464726573732063616e277420626520307800000000000000000000606482015260840162000483565b6001600160a01b038316620006b05760405162461bcd60e51b815260206004820152602d60248201527f5265616374696f6e466163746f72793a205265736f6c7665722041646472657360448201527f732063616e277420626520307800000000000000000000000000000000000000606482015260840162000483565b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0389811691909102919091179091556001805473ffffffffffffffffffffffffffffffffffffffff19908116888416179091556002805482168784161790556003805490911691851691909117905581516200074590600490602085019062001844565b506005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055620007763390565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790556000546001546002546003546040517f7b6a0fb0130a7d7a04b9aeddccf2f89347b48e2aec6de20e57890bb98df4132a95620007ef95620100009004811694811693811692169060049062001f48565b60405180910390a180156200080a576000805461ff00191690555b505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620008b35760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840162000483565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200090f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146200098d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840162000483565b6200099881620012cb565b60408051600080825260208201909252620009b6918391906200134c565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141562000a5a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840162000483565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000ab67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161462000b345760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840162000483565b62000b3f82620012cb565b62000b4d828260016200134c565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000bf35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840162000483565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6001600160a01b038084166000908152600a6020908152604080832086851684529091528120549091168062000d065760005460015460405130926001600160a01b03620100009091048116921690869062000c7490620018d3565b6001600160a01b03948516815292841660208401529216604082015260ff9091166060820152608001604051809103906000f08015801562000cba573d6000803e3d6000fd5b506001600160a01b038681166000908152600a6020908152604080832089851684529091529020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905590505b90505b9392505050565b60008030600060029054906101000a90046001600160a01b0316600160009054906101000a90046001600160a01b0316868a8a8a8960405162000d5390620018e1565b62000d6698979695949392919062001ec4565b604051809103906000f08015801562000d83573d6000803e3d6000fd5b509050807f98572afc23f97eff4d2c5d95997d06e995e45e881de3f161a42cd594badb01e933828a8a8a8a60405162000dc29695949392919062002000565b60405180910390a1979650505050505050565b600062000de28262001159565b1562000e575760405162461bcd60e51b815260206004820152602e60248201527f5265616374696f6e466163746f72793a20546f6b656e20697320616c7265616460448201527f792061205375706572546f6b656e000000000000000000000000000000000000606482015260840162000483565b6001600160a01b03828116600090815260076020526040902054161562000e9a57506001600160a01b0380821660009081526007602052604090205416620003ee565b60008060029054906101000a90046001600160a01b03166001600160a01b031663731aed6e6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000eea57600080fd5b505afa15801562000eff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f2591906200199c565b90506000836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801562000f6357600080fd5b505afa15801562000f78573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000fa2919081019062001b1b565b60405160200162000fb4919062001e7d565b60405160208183030381529060405290506000846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200100157600080fd5b505afa15801562001016573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001040919081019062001b1b565b60405160200162001052919062001d10565b60408051601f19818403018152908290527f431f148100000000000000000000000000000000000000000000000000000000825291506001600160a01b0384169063431f148190620010b0908890600290879087906004016200206e565b602060405180830381600087803b158015620010cb57600080fd5b505af1158015620010e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200110691906200199c565b6001600160a01b038681166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff191691831691909117905593506200115060088562001513565b50505050919050565b60006200116860088362001533565b620012c35760006004836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620011ab57600080fd5b505afa158015620011c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620011ea919081019062001b1b565b604051602001620011fd92919062001d53565b60408051601f19818403018152908290526005547f693ec85e0000000000000000000000000000000000000000000000000000000083529092506001600160a01b038086169291169063693ec85e906200125c908590600401620020d4565b60206040518083038186803b1580156200127557600080fd5b505afa1580156200128a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012b091906200199c565b6001600160a01b031614915050620003ee565b506001919050565b6006546001600160a01b03163314620009b65760405162461bcd60e51b8152602060048201526024808201527f5265616374696f6e466163746f72793a2043616c6c6572206973206e6f74206f60448201527f776e657200000000000000000000000000000000000000000000000000000000606482015260840162000483565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156200138857620013828362001556565b6200150e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620013c257600080fd5b505afa925050508015620013f5575060408051601f3d908101601f19168201909252620013f29181019062001b02565b60015b620014695760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840162000483565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114620015005760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840162000483565b506200150e83838362001623565b505050565b60006200152a836001600160a01b03841662001654565b90505b92915050565b6001600160a01b038116600090815260018301602052604081205415156200152a565b6001600160a01b0381163b620015d55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840162000483565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6200162e83620016a6565b6000825111806200163c5750805b156200150e576200164e8383620016e8565b50505050565b60008181526001830160205260408120546200169d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200152d565b5060006200152d565b620016b18162001556565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200152a838360405180606001604052806027815260200162004a526027913960606001600160a01b0384163b6200178b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840162000483565b600080856001600160a01b031685604051620017a8919062001cf2565b600060405180830381855af49150503d8060008114620017e5576040519150601f19603f3d011682016040523d82523d6000602084013e620017ea565b606091505b5091509150620017fc82828662001806565b9695505050505050565b606083156200181757508162000d09565b825115620018285782518084602001fd5b8160405162461bcd60e51b8152600401620004839190620020d4565b828054620018529062002177565b90600052602060002090601f016020900481019282620018765760008555620018c1565b82601f106200189157805160ff1916838001178555620018c1565b82800160010185558215620018c1579182015b82811115620018c1578251825591602001919060010190620018a4565b50620018cf929150620018ef565b5090565b61102380620021db83390190565b61185480620031fe83390190565b5b80821115620018cf5760008155600101620018f0565b60006200191d62001917846200211d565b620020e9565b90508281528383830111156200193257600080fd5b828260208301376000602084830101529392505050565b600082601f8301126200195a578081fd5b6200152a8383356020850162001906565b803560ff81168114620003ee57600080fd5b6000602082840312156200198f578081fd5b813562000d0981620021c4565b600060208284031215620019ae578081fd5b815162000d0981620021c4565b600080600080600060a08688031215620019d3578081fd5b8535620019e081620021c4565b94506020860135620019f281620021c4565b9350604086013562001a0481620021c4565b9250606086013562001a1681620021c4565b9150608086013567ffffffffffffffff81111562001a32578182fd5b62001a408882890162001949565b9150509295509295909350565b60008060006060848603121562001a62578283fd5b833562001a6f81620021c4565b9250602084013562001a8181620021c4565b915062001a91604085016200196b565b90509250925092565b6000806040838503121562001aad578182fd5b823562001aba81620021c4565b9150602083013567ffffffffffffffff81111562001ad6578182fd5b8301601f8101851362001ae7578182fd5b62001af88582356020840162001906565b9150509250929050565b60006020828403121562001b14578081fd5b5051919050565b60006020828403121562001b2d578081fd5b815167ffffffffffffffff81111562001b44578182fd5b8201601f8101841362001b55578182fd5b805162001b6662001917826200211d565b81815285602083850101111562001b7b578384fd5b62001b8e82602083016020860162002148565b95945050505050565b600080600080600060a0868803121562001baf578081fd5b853567ffffffffffffffff8082111562001bc7578283fd5b62001bd589838a0162001949565b9650602088013591508082111562001beb578283fd5b62001bf989838a0162001949565b9550604088013591508082111562001c0f578283fd5b5062001c1e8882890162001949565b935050606086013562001c3181620021c4565b915062001c41608087016200196b565b90509295509295909350565b6000815180845262001c6781602086016020860162002148565b601f01601f19169290920160200192915050565b6000815462001c8a8162002177565b6001828116801562001ca5576001811462001cb75762001ce8565b60ff1984168752828701945062001ce8565b8560005260208060002060005b8581101562001cdf5781548a82015290840190820162001cc4565b50505082870194505b5050505092915050565b6000825162001d0681846020870162002148565b9190910192915050565b6000825162001d2481846020870162002148565b7f7800000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b60007f7375706572746f6b656e7300000000000000000000000000000000000000000082527f2e0000000000000000000000000000000000000000000000000000000000000080600b84015262001dae600c84018662001c7b565b90815283519062001dc782600183016020880162002148565b01600101949350505050565b60007f7375706572746f6b656e7300000000000000000000000000000000000000000082527f2e0000000000000000000000000000000000000000000000000000000000000080600b84015262001e2e600c84018662001c7b565b90815283519062001e4782600183016020880162002148565b7f780000000000000000000000000000000000000000000000000000000000000091016001810191909152600201949350505050565b60007f53757065722000000000000000000000000000000000000000000000000000008252825162001eb781600685016020870162002148565b9190910160060192915050565b60006101006001600160a01b03808c168452808b166020850152808a16604085015280891660608501525080608084015262001f038184018862001c4d565b905082810360a084015262001f19818762001c4d565b905082810360c084015262001f2f818662001c4d565b91505060ff831660e08301529998505050505050505050565b60006001600160a01b0380881683526020818816818501528187166040850152818616606085015260a06080850152829150845462001f878162002177565b8060a087015260c060018084166000811462001fac576001811462001fc15762001fee565b60ff198516838a015260e08901965062001fee565b898852858820885b8581101562001fe65781548b820186015290830190870162001fc9565b8a0184019750505b50949c9b505050505050505050505050565b60006001600160a01b038089168352808816602084015260c060408401526200202d60c084018862001c4d565b838103606085015262002041818862001c4d565b9050838103608085015262002057818762001c4d565b92505080841660a084015250979650505050505050565b60006001600160a01b0386168252600385106200209957634e487b7160e01b81526021600452602481fd5b84602083015260806040830152620020b5608083018562001c4d565b8281036060840152620020c9818562001c4d565b979650505050505050565b6000602082526200152a602083018462001c4d565b604051601f8201601f1916810167ffffffffffffffff81118282101715620021155762002115620021ae565b604052919050565b600067ffffffffffffffff8211156200213a576200213a620021ae565b50601f01601f191660200190565b60005b83811015620021655781810151838201526020016200214b565b838111156200164e5750506000910152565b6002810460018216806200218c57607f821691505b60208210811415620003ec57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620009b657600080fdfe60806040523480156200001157600080fd5b5060405162001023380380620010238339810160408190526200003491620002aa565b6001600160a01b038416620000a15760405162461bcd60e51b815260206004820152602860248201527f5374616b6564466c6f773a205265616374696f6e20466163746f72792063616e60448201526704ee840c4ca4060f60c31b60648201526084015b60405180910390fd5b6001600160a01b038316620001055760405162461bcd60e51b8152602060048201526024808201527f5374616b6564466c6f773a20486f737420416464726573732063616e277420626044820152630ca4060f60e31b606482015260840162000098565b6001600160a01b038216620001695760405162461bcd60e51b815260206004820152602360248201527f5374616b6564466c6f773a2043464120416464726573732063616e277420626560448201526204060f60eb1b606482015260840162000098565b60658160ff1610620001cc5760405162461bcd60e51b8152602060048201526041602482015260008051602062001003833981519152604482015260008051602062000fe38339815191526064820152600360fc1b608482015260a40162000098565b60008160ff16116200022f5760405162461bcd60e51b8152602060048201526041602482015260008051602062001003833981519152604482015260008051602062000fe38339815191526064820152600360fc1b608482015260a40162000098565b60038054600080546001600160a01b03199081166001600160a01b03978816179091556001805482169587169590951790945592909216939092169290921760ff60a01b1916600160a01b60ff92909216919091021790556200030c565b80516001600160a01b0381168114620002a557600080fd5b919050565b60008060008060808587031215620002c0578384fd5b620002cb856200028d565b9350620002db602086016200028d565b9250620002eb604086016200028d565b9150606085015160ff8116811462000301578182fd5b939692955090935050565b610cc7806200031c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fcb1908914610030575b600080fd5b61004361003e366004610aab565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b60006001600160a01b0383166100fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f5374616b6564466c6f773a205374616b696e6720546f6b656e2041646472657360448201527f732063616e27742062652030780000000000000000000000000000000000000060648201526084015b60405180910390fd5b6003546040517fce69fd6f0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152859260009291169063ce69fd6f9060240160206040518083038186803b15801561015e57600080fd5b505afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019691906109ca565b610235576003546040517f0c08a5c40000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015290911690630c08a5c49060240160206040518083038186803b1580156101f857600080fd5b505afa15801561020c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023091906109a7565b610237565b815b90506001600160a01b0381166102e2576003546040517fa7403a320000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063a7403a3290602401602060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102df91906109a7565b90505b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03828116602483015287919084169063dd62ed3e9060440160206040518083038186803b15801561034557600080fd5b505afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d9190610a93565b10156104b3576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152602482018890526000919084169063095ea7b390604401602060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042291906109ca565b9050806104b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f5265616374696f6e546f6b656e3a204661696c656420746f20617070726f766560448201527f20616c6c6f77616e636520746f205375706572546f6b656e000000000000000060648201526084016100f3565b505b806001600160a01b0316826001600160a01b031614610540576040517f45977d03000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b038216906345977d0390602401600060405180830381600087803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b505050505b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015262278d00906000906001600160a01b038416906370a082319060240160206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190610a93565b905060006105e7836064610bea565b60035461060f9074010000000000000000000000000000000000000000900460ff1684610bea565b6106199190610bca565b6001546040517fe6a1e8880000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301523060248301528a811660448301529293506000929091169063e6a1e8889060640160806040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190610aec565b5050915050600081600b0b13156108105760008054600154604080519384526020840190526001600160a01b03918216926339255d5b92909116907f50209a620000000000000000000000000000000000000000000000000000000090610733908a908e90899060448101610b5a565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b90931690526107b4929160248101610b96565b600060405180830381600087803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261080a91908101906109ea565b50610948565b60008054600154604080519384526020840190526001600160a01b03918216926339255d5b92909116907f62fc305e000000000000000000000000000000000000000000000000000000009061086f908a908e90899060448101610b5a565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b90931690526108f0929160248101610b96565b600060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094691908101906109ea565b505b604080516001600160a01b038781168252602082018690528a16818301526060810184905290517f0100b8f2c2a1111cdf33078f5ed06f4716dfd9709bf8bae7735b7fc446ed9d9e9181900360800190a1509298975050505050505050565b6000602082840312156109b8578081fd5b81516109c381610c79565b9392505050565b6000602082840312156109db578081fd5b815180151581146109c3578182fd5b6000602082840312156109fb578081fd5b815167ffffffffffffffff80821115610a12578283fd5b818401915084601f830112610a25578283fd5b815181811115610a3757610a37610c63565b604051601f8201601f19908116603f01168101908382118183101715610a5f57610a5f610c63565b81604052828152876020848701011115610a77578586fd5b610a88836020830160208801610c33565b979650505050505050565b600060208284031215610aa4578081fd5b5051919050565b600080600060608486031215610abf578182fd5b833592506020840135610ad181610c79565b91506040840135610ae181610c79565b809150509250925092565b60008060008060808587031215610b01578081fd5b84519350602085015180600b0b8114610b18578182fd5b6040860151606090960151949790965092505050565b60008151808452610b46816020860160208601610c33565b601f01601f19169290920160200192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152610b8c6080830184610b2e565b9695505050505050565b60006001600160a01b038516825260606020830152610bb86060830185610b2e565b8281036040840152610b8c8185610b2e565b600082610be557634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c2e57634e487b7160e01b81526011600452602481fd5b500290565b60005b83811015610c4e578181015183820152602001610c36565b83811115610c5d576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c8e57600080fd5b5056fea26469706673582212200fa32c698fbc78d693bf25826e78e9e5a19baa088eb6dedb85d86ceb6ce6f69964736f6c6343000802003363656e74616765206d757374206265206265747765656e203020616e642031305374616b6564466c6f773a206d6f6e7468446973747269627574696f6e50657260806040523480156200001157600080fd5b50604051620018543803806200185483398101604081905262000034916200047b565b8351849084906200004d906003906020850190620002f3565b50805162000063906004906020840190620002f3565b5050506001600160a01b038816620000d65760405162461bcd60e51b815260206004820152602b60248201527f5265616374696f6e546f6b656e3a205265616374696f6e20466163746f72792060448201526a0c6c2dc4ee840c4ca4060f60ab1b60648201526084015b60405180910390fd5b6001600160a01b0387166200013e5760405162461bcd60e51b815260206004820152602760248201527f5265616374696f6e546f6b656e3a20486f737420416464726573732063616e276044820152660e840c4ca4060f60cb1b6064820152608401620000cd565b6001600160a01b038616620001a55760405162461bcd60e51b815260206004820152602660248201527f5265616374696f6e546f6b656e3a2043464120416464726573732063616e2774604482015265040c4ca4060f60d31b6064820152608401620000cd565b60658160ff16106200020c5760405162461bcd60e51b8152602060048201526044602482018190526000805160206200181483398151915290820152600080516020620018348339815191526064820152630203130360e41b608482015260a401620000cd565b60008160ff1611620002735760405162461bcd60e51b8152602060048201526044602482018190526000805160206200181483398151915290820152600080516020620018348339815191526064820152630203130360e41b608482015260a401620000cd565b600980546001600160a01b03808b166001600160a01b031992831617909255600580548a8416908316179055600680548984169083161790556007805460ff8516600160a01b0260ff60a01b19948a169190931617929092161790558151620002e4906008906020850190620002f3565b505050505050505050620005ba565b828054620003019062000567565b90600052602060002090601f01602090048101928262000325576000855562000370565b82601f106200034057805160ff191683800117855562000370565b8280016001018555821562000370579182015b828111156200037057825182559160200191906001019062000353565b506200037e92915062000382565b5090565b5b808211156200037e576000815560010162000383565b80516001600160a01b0381168114620003b157600080fd5b919050565b600082601f830112620003c7578081fd5b81516001600160401b0380821115620003e457620003e4620005a4565b604051601f8301601f19908116603f011681019082821181831017156200040f576200040f620005a4565b816040528381526020925086838588010111156200042b578485fd5b8491505b838210156200044e57858201830151818301840152908201906200042f565b838211156200045f57848385830101525b9695505050505050565b805160ff81168114620003b157600080fd5b600080600080600080600080610100898b03121562000498578384fd5b620004a38962000399565b9750620004b360208a0162000399565b9650620004c360408a0162000399565b9550620004d360608a0162000399565b60808a01519095506001600160401b0380821115620004f0578586fd5b620004fe8c838d01620003b6565b955060a08b015191508082111562000514578485fd5b620005228c838d01620003b6565b945060c08b015191508082111562000538578384fd5b50620005478b828c01620003b6565b9250506200055860e08a0162000469565b90509295985092959890939650565b6002810460018216806200057c57607f821691505b602082108114156200059e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61124a80620005ca6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a9059cbb11610066578063a9059cbb146101d6578063dd62ed3e146101e9578063f2cc8fcc14610222578063fa29140714610237576100ea565b806370a082311461019257806395d89b41146101bb578063a457c2d7146101c3576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780635e1e09a114610177576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761023f565b6040516101049190611148565b60405180910390f35b61012061011b366004610f81565b6102d1565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610f41565b6102e9565b60405160128152602001610104565b610120610172366004610f81565b61030d565b6007546040516001600160a01b039091168152602001610104565b6101346101a0366004610eca565b6001600160a01b031660009081526020819052604090205490565b6100f761034c565b6101206101d1366004610f81565b61035b565b6101206101e4366004610f81565b61040a565b6101346101f7366004610f09565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610235610230366004611075565b610418565b005b6100f76109bd565b60606003805461024e906111ab565b80601f016020809104026020016040519081016040528092919081815260200182805461027a906111ab565b80156102c75780601f1061029c576101008083540402835291602001916102c7565b820191906000526020600020905b8154815290600101906020018083116102aa57829003601f168201915b5050505050905090565b6000336102df8185856109cc565b5060019392505050565b6000336102f7858285610b24565b610302858585610bd4565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102df908290869061034790879061115b565b6109cc565b60606004805461024e906111ab565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103fd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61030282868684036109cc565b6000336102df818585610bd4565b6001600160a01b0383166104945760405162461bcd60e51b815260206004820152603060248201527f5265616374696f6e546f6b656e3a205374616b696e6720546f6b656e2041646460448201527f726573732063616e27742062652030780000000000000000000000000000000060648201526084016103f4565b6001600160a01b0382166105105760405162461bcd60e51b815260206004820152603460248201527f5265616374696f6e546f6b656e3a207265616374696f6e526563697069656e7460448201527f20416464726573732063616e277420626520307800000000000000000000000060648201526084016103f4565b6007546001600160a01b0316156105a3576007546001600160a01b038481169116146105a35760405162461bcd60e51b8152602060048201526024808201527f5265616374696f6e546f6b656e3a20496e76616c6964205374616b696e67205460448201527f6f6b656e0000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6009546000906001600160a01b031663949ec2233360075460405160e084901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039283166004820152918816602483015274010000000000000000000000000000000000000000900460ff166044820152606401602060405180830381600087803b15801561063c57600080fd5b505af1158015610650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106749190610eed565b90506001600160a01b0384166323b872dd336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908416602482015260448101889052606401602060405180830381600087803b1580156106ee57600080fd5b505af1158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610fac565b5060408051338152602081018790526001600160a01b0386168183015290517f9f9e4044c5742cca66ca090b21552bac14645e68bad7a92364a9d9ff18111a1c9181900360600190a16107798386610deb565b307f9f7ca02a10f016e6c4933b06b65132657f9504778eb5ffbf26c84f6f9acd1e15338585308a866001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108159190810190610fcc565b876001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088a9190810190610fcc565b60405161089d97969594939291906110e8565b60405180910390a160006001600160a01b03831663fcb190898888336040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381600087803b15801561092057600080fd5b505af1158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190610eed565b604080516001600160a01b038681168252602082018b9052898116828401523360608301528316608082015290519192507fa6c09c9934f935991a6cd67fa7ee3ff315b2b075e0b089b498a65853a34d63db919081900360a00190a150505050505050565b60606008805461024e906111ab565b6001600160a01b038316610a475760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b038216610ac35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610bce5781811015610bc15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103f4565b610bce84848484036109cc565b50505050565b6001600160a01b038316610c505760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b038216610ccc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b03831660009081526020819052604090205481811015610d5b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103f4565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d9290849061115b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610dde91815260200190565b60405180910390a3610bce565b6001600160a01b038216610e415760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103f4565b8060026000828254610e53919061115b565b90915550506001600160a01b03821660009081526020819052604081208054839290610e8090849061115b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208284031215610edb578081fd5b8135610ee6816111fc565b9392505050565b600060208284031215610efe578081fd5b8151610ee6816111fc565b60008060408385031215610f1b578081fd5b8235610f26816111fc565b91506020830135610f36816111fc565b809150509250929050565b600080600060608486031215610f55578081fd5b8335610f60816111fc565b92506020840135610f70816111fc565b929592945050506040919091013590565b60008060408385031215610f93578182fd5b8235610f9e816111fc565b946020939093013593505050565b600060208284031215610fbd578081fd5b81518015158114610ee6578182fd5b600060208284031215610fdd578081fd5b815167ffffffffffffffff80821115610ff4578283fd5b818401915084601f830112611007578283fd5b815181811115611019576110196111e6565b604051601f8201601f19908116603f01168101908382118183101715611041576110416111e6565b81604052828152876020848701011115611059578586fd5b61106a83602083016020880161117f565b979650505050505050565b6000806000806080858703121561108a578081fd5b84359350602085013561109c816111fc565b925060408501356110ac816111fc565b9396929550929360600135925050565b600081518084526110d481602086016020860161117f565b601f01601f19169290920160200192915050565b60006001600160a01b03808a168352808916602084015287604084015280871660608401525084608083015260e060a083015261112860e08301856110bc565b82810360c084015261113a81856110bc565b9a9950505050505050505050565b600060208252610ee660208301846110bc565b6000821982111561117a57634e487b7160e01b81526011600452602481fd5b500190565b60005b8381101561119a578181015183820152602001611182565b83811115610bce5750506000910152565b6002810460018216806111bf57607f821691505b602082108114156111e057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461121157600080fd5b5056fea2646970667358221220e34a9900ee0a522e448e3ac18563ce061dd7db8ae42c9cd14f59426b5e664f0564736f6c634300080200335265616374696f6e546f6b656e3a206d6f6e7468446973747269627574696f6e50657263656e74616765206d757374206265206265747765656e203020616e64416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bcef02c219f73ffd87768c8e8477f1175be2a7867a658bed12f71081c4e1a59c64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1243,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1246,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 40997,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_sfHost",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 40999,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_sfCfa",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 41001,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_sfSuperTokenFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 41003,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_sfResolver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 41005,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_sfVersion",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 41008,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_resolver",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IResolver)12839"
      },
      {
        "astId": 41010,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 41014,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "superTokenRegistry",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 41017,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "superTokensSet",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)8404_storage"
      },
      {
        "astId": 41023,
        "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
        "label": "_stakedFlows",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IResolver)12839": {
        "encoding": "inplace",
        "label": "contract IResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)8404_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 8403,
            "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8103_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8103_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8098,
            "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8102,
            "contract": "src/reaction/ReactionFactory.sol:ReactionFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}